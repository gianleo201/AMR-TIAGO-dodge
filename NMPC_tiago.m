clc;
clear all;
close all;

Ts = 0.01;
EXPORT = 1;

CONSTRAINT_TYPE = 1; % 1: normal constraint; 2: cbf constraint; 3: velocity damper constraint
CONSIDER_BALANCE = true;
RECORD_SIMULATION = true;

video_names = ["Simple_constraint" "CBF_constraint" "VD_constraint"];

BEGIN_ACADO; % Always start with "BEGIN_ACADO".

DifferentialState x1 x2 x3 x4 x5 x6;
Control tau1 tau2 tau3;
OnlineData x_obs y_obs r_obs dx_obs dy_obs x01 x02 x03 x04 x05 x06;

syms X [6 1] real;
syms Tau [3 1] real;
syms XOBS YOBS;

n_XD = length(diffStates);
n_U = length(controls);

%% Differential Equation

% % Differential Equation (built from matlab function)
% f = acado.DifferentialEquation(); % Set the differential equation object
% f.linkMatlabODE('TIAGO'); % Link to a Matlab ODE

% gravity acceleration
g0 = 9.81;

% set up parameters of the robot


mb = 30;
mt = 27;
mw = 1.82;

% torso and base
hb = 0.193;
rt1 = 0.062;
rt2 = 0.159;
rt3 = 0.02435;
rw = 0.0985;
db = 0.54;

m1 = mb + mt + mw;
ht = 0.597+0.2;
rt4 = 0.155;

CoM3x = -(mt*(ht - rt2) + mb*(hb + ht) + mw*(hb + ht))/(mb + mt + mw);
CoM3y = -(mb*(rt1 - rt4) - mt*(rt1 - rt3) + mw*(rt1 - rt4))/(mb + mt + mw);
p_module = sqrt((rw+hb+ht)^2+(-rt1+rt4)^2);
p_angle= atan2(rw+hb+ht,-rt1+rt4);

% arm1 (link 2)
m2 = 2.08+1.79+2.28;
l2 = 0.32;
I2zz = 0.06;

% arm2 (link 3)
m3 = 1.89+1.07+0.2+0.6+0.2;
l3 = 0.34+0.25;
I3zz = 0.006;

% Differential equations
f = dot([x1;x2;x3;x4;x5;x6]) == [
    x4;
    x5;
    x6;
    -(4*I3zz*l2^3*m2^2*x5^2*sin(x2) - 4*l2^2*l3^2*m3^2*tau1 - 8*I3zz*l2^2*m2*tau1 - 8*I2zz*l3^2*m3*tau1 - 32*I3zz*l2^2*m3*tau1 - 32*I2zz*I3zz*tau1 + 32*I3zz*l2^3*m3^2*x5^2*sin(x2) - 4*I2zz*g0*l3^2*m3^2*sin(2*x2 + 2*x3) - 2*l2^2*l3^2*m2*m3*tau1 + 4*l2^2*l3^2*m3^2*tau1*cos(2*x3) - 8*l2^2*l3*m3^2*tau3*cos(x2 + x3) - 16*I2zz*l3*m3*tau3*cos(x2 + x3) - 4*l2*l3^2*m3^2*tau2*cos(x2) + 4*l2*l3^2*m3^2*tau3*cos(x2) - 16*I3zz*l2*m2*tau2*cos(x2) + 16*I3zz*l2*m2*tau3*cos(x2) - 32*I3zz*l2*m3*tau2*cos(x2) + 32*I3zz*l2*m3*tau3*cos(x2) + 4*I2zz*l3^3*m3^2*x5^2*sin(x2 + x3) + 4*I2zz*l3^3*m3^2*x6^2*sin(x2 + x3) + 4*l2*l3^2*m3^2*tau2*cos(x2 + 2*x3) + 8*l2^2*l3*m3^2*tau3*cos(x2 - x3) - 4*l2*l3^2*m3^2*tau3*cos(x2 + 2*x3) - 4*I3zz*g0*l2^2*m2^2*sin(2*x2) - 16*I3zz*g0*l2^2*m3^2*sin(2*x2) + 24*I3zz*l2^3*m2*m3*x5^2*sin(x2) + g0*l2^2*l3^2*m2*m3^2*sin(2*x2 + 2*x3) + l2^2*l3^3*m2*m3^2*x5^2*sin(x2 - x3) + l2^2*l3^3*m2*m3^2*x6^2*sin(x2 - x3) - l2^3*l3^2*m2*m3^2*x5^2*sin(x2 + 2*x3) + 8*I3zz*l2^2*l3*m3^2*x5^2*sin(x2 + x3) + 8*I3zz*l2^2*l3*m3^2*x6^2*sin(x2 + x3) + 16*I2zz*I3zz*l3*m3*x5^2*sin(x2 + x3) + 16*I2zz*I3zz*l3*m3*x6^2*sin(x2 + x3) + 4*I2zz*l2*l3^2*m3^2*x5^2*sin(x2) + 16*I2zz*I3zz*l2*m2*x5^2*sin(x2) + 32*I2zz*I3zz*l2*m3*x5^2*sin(x2) + 4*I2zz*l2*l3^2*m3^2*x5^2*sin(x2 + 2*x3) + 8*I3zz*l2^2*l3*m3^2*x5^2*sin(x2 - x3) + 8*I3zz*l2^2*l3*m3^2*x6^2*sin(x2 - x3) - 4*l2*l3^2*m2*m3*tau2*cos(x2) + 4*l2*l3^2*m2*m3*tau3*cos(x2) - 2*g0*l2^2*l3^2*m2*m3^2*sin(2*x2) - g0*l2^2*l3^2*m2^2*m3*sin(2*x2) + 3*l2^3*l3^2*m2*m3^2*x5^2*sin(x2) + l2^3*l3^2*m2^2*m3*x5^2*sin(x2) + 8*I2zz*l3^3*m3^2*x5*x6*sin(x2 + x3) + 4*l2^2*l3*m2*m3*tau3*cos(x2 - x3) - 16*I3zz*g0*l2^2*m2*m3*sin(2*x2) + 2*l2^2*l3^3*m2*m3^2*x5*x6*sin(x2 - x3) + 16*I3zz*l2^2*l3*m3^2*x5*x6*sin(x2 + x3) + 4*I2zz*l2*l3^2*m2*m3*x5^2*sin(x2) + 32*I2zz*I3zz*l3*m3*x5*x6*sin(x2 + x3) + 4*I3zz*l2^2*l3*m2*m3*x5^2*sin(x2 - x3) + 4*I3zz*l2^2*l3*m2*m3*x6^2*sin(x2 - x3) + 16*I3zz*l2^2*l3*m3^2*x5*x6*sin(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3*x5*x6*sin(x2 - x3))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3));
    (2*(2*l3^2*m3^2*tau2 - 2*l3^2*m3^2*tau3 + 16*I3zz*m1*tau2 - 16*I3zz*m1*tau3 + 16*I3zz*m2*tau2 - 16*I3zz*m2*tau3 + 16*I3zz*m3*tau2 - 16*I3zz*m3*tau3 + 4*l3^2*m1*m3*tau2 - 4*l3^2*m1*m3*tau3 + 4*l3^2*m2*m3*tau2 - 4*l3^2*m2*m3*tau3 - 2*l3^2*m3^2*tau2*cos(2*x2 + 2*x3) + 2*l3^2*m3^2*tau3*cos(2*x2 + 2*x3) + 8*I3zz*g0*l2*m2^2*sin(x2) + 16*I3zz*g0*l2*m3^2*sin(x2) - 4*l2*l3*m3^2*tau3*cos(x3) - 2*I3zz*l2^2*m2^2*x5^2*sin(2*x2) - 8*I3zz*l2^2*m3^2*x5^2*sin(2*x2) + 4*l2*l3*m3^2*tau3*cos(2*x2 + x3) + 2*l2*l3^2*m3^2*tau1*cos(x2) + 8*I3zz*l2*m2*tau1*cos(x2) + 16*I3zz*l2*m3*tau1*cos(x2) - 2*l2*l3^2*m3^2*tau1*cos(x2 + 2*x3) + 4*I3zz*l2*l3*m3^2*x5^2*sin(x3) + 4*I3zz*l2*l3*m3^2*x6^2*sin(x3) + 2*g0*l2*l3^2*m1*m3^2*sin(x2) + 3*g0*l2*l3^2*m2*m3^2*sin(x2) + 2*g0*l2*l3^2*m2^2*m3*sin(x2) + 8*I3zz*g0*l2*m1*m2*sin(x2) + 16*I3zz*g0*l2*m1*m3*sin(x2) + 24*I3zz*g0*l2*m2*m3*sin(x2) - 4*I3zz*l2*l3*m3^2*x5^2*sin(2*x2 + x3) - 4*I3zz*l2*l3*m3^2*x6^2*sin(2*x2 + x3) + 2*l2^2*l3^2*m1*m3^2*x5^2*sin(2*x3) - l2^2*l3^2*m2*m3^2*x5^2*sin(2*x2) - (l2^2*l3^2*m2^2*m3*x5^2*sin(2*x2))/2 + l2^2*l3^2*m2*m3^2*x5^2*sin(2*x3) - 2*g0*l2*l3^2*m1*m3^2*sin(x2 + 2*x3) - g0*l2*l3^2*m2*m3^2*sin(x2 + 2*x3) - 8*l2*l3*m1*m3*tau3*cos(x3) - 6*l2*l3*m2*m3*tau3*cos(x3) - 8*I3zz*l2^2*m2*m3*x5^2*sin(2*x2) + 2*l2*l3^3*m1*m3^2*x5^2*sin(x3) + 2*l2*l3^3*m1*m3^2*x6^2*sin(x3) + (3*l2*l3^3*m2*m3^2*x5^2*sin(x3))/2 + (3*l2*l3^3*m2*m3^2*x6^2*sin(x3))/2 + 2*l2*l3*m2*m3*tau3*cos(2*x2 + x3) + 2*l2*l3^2*m2*m3*tau1*cos(x2) - (l2*l3^3*m2*m3^2*x5^2*sin(2*x2 + x3))/2 - (l2*l3^3*m2*m3^2*x6^2*sin(2*x2 + x3))/2 + 8*I3zz*l2*l3*m1*m3*x5^2*sin(x3) + 8*I3zz*l2*l3*m1*m3*x6^2*sin(x3) + 6*I3zz*l2*l3*m2*m3*x5^2*sin(x3) + 6*I3zz*l2*l3*m2*m3*x6^2*sin(x3) + 8*I3zz*l2*l3*m3^2*x5*x6*sin(x3) + 2*g0*l2*l3^2*m1*m2*m3*sin(x2) - 2*I3zz*l2*l3*m2*m3*x5^2*sin(2*x2 + x3) - 2*I3zz*l2*l3*m2*m3*x6^2*sin(2*x2 + x3) - 8*I3zz*l2*l3*m3^2*x5*x6*sin(2*x2 + x3) + 4*l2*l3^3*m1*m3^2*x5*x6*sin(x3) + 3*l2*l3^3*m2*m3^2*x5*x6*sin(x3) - l2*l3^3*m2*m3^2*x5*x6*sin(2*x2 + x3) + 16*I3zz*l2*l3*m1*m3*x5*x6*sin(x3) + 12*I3zz*l2*l3*m2*m3*x5*x6*sin(x3) - 4*I3zz*l2*l3*m2*m3*x5*x6*sin(2*x2 + x3)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3));
    (4*(tau3 + (g0*l3*m3*sin(x2 + x3))/2 - (l2*l3*m3*x5^2*sin(x3))/2)*(8*I2zz*m1 + 8*I2zz*m2 + 8*I3zz*m1 + 8*I2zz*m3 + 8*I3zz*m2 + 8*I3zz*m3 + l2^2*m2^2 + 4*l2^2*m3^2 + l3^2*m3^2 + 2*l2^2*m1*m2 + 8*l2^2*m1*m3 + 6*l2^2*m2*m3 + 2*l3^2*m1*m3 + 2*l3^2*m2*m3 - l2^2*m2^2*cos(2*x2) - 4*l2^2*m3^2*cos(2*x2) - l3^2*m3^2*cos(2*x2 + 2*x3) - 4*l2*l3*m3^2*cos(2*x2 + x3) - 4*l2^2*m2*m3*cos(2*x2) + 4*l2*l3*m3^2*cos(x3) - 2*l2*l3*m2*m3*cos(2*x2 + x3) + 8*l2*l3*m1*m3*cos(x3) + 6*l2*l3*m2*m3*cos(x3)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)) - (4*(tau2 + g0*m3*((l3*sin(x2 + x3))/2 + l2*sin(x2)) + (g0*l2*m2*sin(x2))/2 + (l2*l3*m3*x6*sin(x3)*(2*x5 + x6))/2)*(8*I3zz*m1 + 8*I3zz*m2 + 8*I3zz*m3 + l3^2*m3^2 + 2*l3^2*m1*m3 + 2*l3^2*m2*m3 - l3^2*m3^2*cos(2*x2 + 2*x3) - 2*l2*l3*m3^2*cos(2*x2 + x3) + 2*l2*l3*m3^2*cos(x3) - l2*l3*m2*m3*cos(2*x2 + x3) + 4*l2*l3*m1*m3*cos(x3) + 3*l2*l3*m2*m3*cos(x3)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)) + (4*((l3*m3*x5^2*sin(x2 + x3))/2 - tau1 + (l3*m3*x6^2*sin(x2 + x3))/2 + (l2*m2*x5^2*sin(x2))/2 + l2*m3*x5^2*sin(x2) + l3*m3*x5*x6*sin(x2 + x3))*(l2*l3^2*m3^2*cos(x2) - 4*I2zz*l3*m3*cos(x2 + x3) - 2*l2^2*l3*m3^2*cos(x2 + x3) + 4*I3zz*l2*m2*cos(x2) + 8*I3zz*l2*m3*cos(x2) + 2*l2^2*l3*m3^2*cos(x2 - x3) - l2*l3^2*m3^2*cos(x2 + 2*x3) + l2*l3^2*m2*m3*cos(x2) + l2^2*l3*m2*m3*cos(x2 - x3)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3));
    ];
 

% additive objective term to improve balance
Dx = [-(64*CoM3x*I2zz*I3zz*m1 + 8*I3zz*hb*l2^2*m2^2 + 8*I2zz*hb*l3^2*m3^2 + 32*I3zz*hb*l2^2*m3^2 + 8*I3zz*ht*l2^2*m2^2 + 8*I2zz*ht*l3^2*m3^2 + 32*I3zz*ht*l2^2*m3^2 + 8*I3zz*l2^2*m2^2*rw + 8*I2zz*l3^2*m3^2*rw + 32*I3zz*l2^2*m3^2*rw + 64*I2zz*I3zz*hb*m1 + 64*I2zz*I3zz*hb*m2 + 64*I2zz*I3zz*hb*m3 + 64*I2zz*I3zz*ht*m1 + 64*I2zz*I3zz*ht*m2 + 64*I2zz*I3zz*ht*m3 + 64*I2zz*I3zz*m1*rw + 64*I2zz*I3zz*m2*rw + 64*I2zz*I3zz*m3*rw - 8*I2zz*hb*l3^2*m3^2*cos(2*x2 + 2*x3) - 8*I2zz*ht*l3^2*m3^2*cos(2*x2 + 2*x3) - 8*I2zz*l3^2*m3^2*rw*cos(2*x2 + 2*x3) - 4*I2zz*db*l3^2*m3^2*sin(2*x2 + 2*x3) - 8*I2zz*l3^2*m3^2*rt1*sin(2*x2 + 2*x3) + 8*I2zz*l3^2*m3^2*rt4*sin(2*x2 + 2*x3) + 8*CoM3x*l2^2*l3^2*m1*m3^2 + 16*CoM3x*I3zz*l2^2*m1*m2 + 16*CoM3x*I2zz*l3^2*m1*m3 + 64*CoM3x*I3zz*l2^2*m1*m3 + 8*hb*l2^2*l3^2*m1*m3^2 + 6*hb*l2^2*l3^2*m2*m3^2 + 2*hb*l2^2*l3^2*m2^2*m3 + 8*ht*l2^2*l3^2*m1*m3^2 + 6*ht*l2^2*l3^2*m2*m3^2 + 2*ht*l2^2*l3^2*m2^2*m3 + 8*l2^2*l3^2*m1*m3^2*rw + 6*l2^2*l3^2*m2*m3^2*rw + 2*l2^2*l3^2*m2^2*m3*rw + 16*I3zz*hb*l2^2*m1*m2 + 16*I2zz*hb*l3^2*m1*m3 + 64*I3zz*hb*l2^2*m1*m3 + 16*I2zz*hb*l3^2*m2*m3 + 48*I3zz*hb*l2^2*m2*m3 + 16*I3zz*ht*l2^2*m1*m2 + 16*I2zz*ht*l3^2*m1*m3 + 64*I3zz*ht*l2^2*m1*m3 + 16*I2zz*ht*l3^2*m2*m3 + 48*I3zz*ht*l2^2*m2*m3 + 16*I3zz*l2^2*m1*m2*rw + 16*I2zz*l3^2*m1*m3*rw + 64*I3zz*l2^2*m1*m3*rw + 16*I2zz*l3^2*m2*m3*rw + 48*I3zz*l2^2*m2*m3*rw - 8*I3zz*hb*l2^2*m2^2*cos(2*x2) - 32*I3zz*hb*l2^2*m3^2*cos(2*x2) - 8*I3zz*ht*l2^2*m2^2*cos(2*x2) - 32*I3zz*ht*l2^2*m3^2*cos(2*x2) - 8*I3zz*l2^2*m2^2*rw*cos(2*x2) - 32*I3zz*l2^2*m3^2*rw*cos(2*x2) - 4*I3zz*db*l2^2*m2^2*sin(2*x2) - 16*I3zz*db*l2^2*m3^2*sin(2*x2) - 8*I3zz*l2^2*m2^2*rt1*sin(2*x2) - 32*I3zz*l2^2*m3^2*rt1*sin(2*x2) + 8*I3zz*l2^2*m2^2*rt4*sin(2*x2) + 32*I3zz*l2^2*m3^2*rt4*sin(2*x2) + 2*hb*l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3) + 2*ht*l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3) - 32*I3zz*l2^2*m2*m3*rt1*sin(2*x2) + 32*I3zz*l2^2*m2*m3*rt4*sin(2*x2) + 2*l2^2*l3^2*m2*m3^2*rw*cos(2*x2 + 2*x3) + db*l2^2*l3^2*m2*m3^2*sin(2*x2 + 2*x3) + 2*l2^2*l3^2*m2*m3^2*rt1*sin(2*x2 + 2*x3) - 2*l2^2*l3^2*m2*m3^2*rt4*sin(2*x2 + 2*x3) + 4*CoM3x*l2^2*l3^2*m1*m2*m3 + 4*hb*l2^2*l3^2*m1*m2*m3 + 4*ht*l2^2*l3^2*m1*m2*m3 - 8*CoM3x*l2^2*l3^2*m1*m3^2*cos(2*x3) + 4*l2^2*l3^2*m1*m2*m3*rw - 8*hb*l2^2*l3^2*m1*m3^2*cos(2*x3) - 4*hb*l2^2*l3^2*m2*m3^2*cos(2*x2) - 2*hb*l2^2*l3^2*m2^2*m3*cos(2*x2) - 4*hb*l2^2*l3^2*m2*m3^2*cos(2*x3) - 8*ht*l2^2*l3^2*m1*m3^2*cos(2*x3) - 4*ht*l2^2*l3^2*m2*m3^2*cos(2*x2) - 2*ht*l2^2*l3^2*m2^2*m3*cos(2*x2) - 4*ht*l2^2*l3^2*m2*m3^2*cos(2*x3) - 8*l2^2*l3^2*m1*m3^2*rw*cos(2*x3) - 4*l2^2*l3^2*m2*m3^2*rw*cos(2*x2) - 2*l2^2*l3^2*m2^2*m3*rw*cos(2*x2) - 4*l2^2*l3^2*m2*m3^2*rw*cos(2*x3) - 2*db*l2^2*l3^2*m2*m3^2*sin(2*x2) - db*l2^2*l3^2*m2^2*m3*sin(2*x2) - 4*l2^2*l3^2*m2*m3^2*rt1*sin(2*x2) - 2*l2^2*l3^2*m2^2*m3*rt1*sin(2*x2) + 4*l2^2*l3^2*m2*m3^2*rt4*sin(2*x2) + 2*l2^2*l3^2*m2^2*m3*rt4*sin(2*x2) - 32*I3zz*hb*l2^2*m2*m3*cos(2*x2) - 32*I3zz*ht*l2^2*m2*m3*cos(2*x2) - 32*I3zz*l2^2*m2*m3*rw*cos(2*x2) - 16*I3zz*db*l2^2*m2*m3*sin(2*x2))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3))), (8*I3zz*l2^2*m2^2 + 8*I2zz*l3^2*m3^2 + 32*I3zz*l2^2*m3^2 + 64*I2zz*I3zz*m1 + 64*I2zz*I3zz*m2 + 64*I2zz*I3zz*m3 + 8*l2^2*l3^2*m1*m3^2 + 6*l2^2*l3^2*m2*m3^2 + 2*l2^2*l3^2*m2^2*m3 + 16*I3zz*l2^2*m1*m2 + 16*I2zz*l3^2*m1*m3 + 64*I3zz*l2^2*m1*m3 + 16*I2zz*l3^2*m2*m3 + 48*I3zz*l2^2*m2*m3 - 8*I3zz*l2^2*m2^2*cos(2*x2) - 32*I3zz*l2^2*m3^2*cos(2*x2) - 8*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 16*I3zz*db*l2*m2^2*sin(x2) + 32*I3zz*db*l2*m3^2*sin(x2) + 4*l2^2*l3^2*m1*m2*m3 + 32*I3zz*l2*m2^2*rt1*sin(x2) + 64*I3zz*l2*m3^2*rt1*sin(x2) - 32*I3zz*l2*m2^2*rt4*sin(x2) - 64*I3zz*l2*m3^2*rt4*sin(x2) - 8*l2^2*l3^2*m1*m3^2*cos(2*x3) - 4*l2^2*l3^2*m2*m3^2*cos(2*x2) - 2*l2^2*l3^2*m2^2*m3*cos(2*x2) - 4*l2^2*l3^2*m2*m3^2*cos(2*x3) - 32*I3zz*l2^2*m2*m3*cos(2*x2) + 2*l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3) - 32*CoM3x*I3zz*l2*m1*m2*cos(x2) - 64*CoM3x*I3zz*l2*m1*m3*cos(x2) + 4*db*l2*l3^2*m1*m3^2*sin(x2) + 6*db*l2*l3^2*m2*m3^2*sin(x2) + 4*db*l2*l3^2*m2^2*m3*sin(x2) + 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2 + 2*x3) + 8*l2*l3^2*m1*m3^2*rt1*sin(x2) + 12*l2*l3^2*m2*m3^2*rt1*sin(x2) + 8*l2*l3^2*m2^2*m3*rt1*sin(x2) - 8*l2*l3^2*m1*m3^2*rt4*sin(x2) - 12*l2*l3^2*m2*m3^2*rt4*sin(x2) - 8*l2*l3^2*m2^2*m3*rt4*sin(x2) + 16*I3zz*db*l2*m1*m2*sin(x2) + 32*I3zz*db*l2*m1*m3*sin(x2) + 48*I3zz*db*l2*m2*m3*sin(x2) + 32*I3zz*l2*m1*m2*rt1*sin(x2) + 64*I3zz*l2*m1*m3*rt1*sin(x2) + 96*I3zz*l2*m2*m3*rt1*sin(x2) - 32*I3zz*l2*m1*m2*rt4*sin(x2) - 64*I3zz*l2*m1*m3*rt4*sin(x2) - 96*I3zz*l2*m2*m3*rt4*sin(x2) - 4*db*l2*l3^2*m1*m3^2*sin(x2 + 2*x3) - 2*db*l2*l3^2*m2*m3^2*sin(x2 + 2*x3) - 8*l2*l3^2*m1*m3^2*rt1*sin(x2 + 2*x3) - 4*l2*l3^2*m2*m3^2*rt1*sin(x2 + 2*x3) + 8*l2*l3^2*m1*m3^2*rt4*sin(x2 + 2*x3) + 4*l2*l3^2*m2*m3^2*rt4*sin(x2 + 2*x3) - 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2) + 4*db*l2*l3^2*m1*m2*m3*sin(x2) + 8*l2*l3^2*m1*m2*m3*rt1*sin(x2) - 8*l2*l3^2*m1*m2*m3*rt4*sin(x2) - 8*CoM3x*l2*l3^2*m1*m2*m3*cos(x2))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3))), -(32*I2zz*l3*m3^2*rt4*sin(x2 + x3) - 32*I2zz*l3*m3^2*rt1*sin(x2 + x3) - 16*I2zz*db*l3*m3^2*sin(x2 + x3) + 16*I3zz*db*l2*m2^2*sin(x2) + 32*I3zz*db*l2*m3^2*sin(x2) + 32*I3zz*l2*m2^2*rt1*sin(x2) + 64*I3zz*l2*m3^2*rt1*sin(x2) - 32*I3zz*l2*m2^2*rt4*sin(x2) - 64*I3zz*l2*m3^2*rt4*sin(x2) - 16*l2^2*l3*m1*m3^2*rt1*sin(x2 + x3) + 4*l2^2*l3*m2^2*m3*rt1*sin(x2 + x3) + 16*l2^2*l3*m1*m3^2*rt4*sin(x2 + x3) - 4*l2^2*l3*m2^2*m3*rt4*sin(x2 + x3) - 32*CoM3x*I3zz*l2*m1*m2*cos(x2) - 64*CoM3x*I3zz*l2*m1*m3*cos(x2) - 16*I2zz*db*l3*m1*m3*sin(x2 + x3) - 16*I2zz*db*l3*m2*m3*sin(x2 + x3) + 4*db*l2*l3^2*m1*m3^2*sin(x2) + 6*db*l2*l3^2*m2*m3^2*sin(x2) + 4*db*l2*l3^2*m2^2*m3*sin(x2) - 32*I2zz*l3*m1*m3*rt1*sin(x2 + x3) - 32*I2zz*l3*m2*m3*rt1*sin(x2 + x3) + 32*I2zz*l3*m1*m3*rt4*sin(x2 + x3) + 32*I2zz*l3*m2*m3*rt4*sin(x2 + x3) - 16*CoM3x*l2^2*l3*m1*m3^2*cos(x2 - x3) + 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2 + 2*x3) + 8*l2*l3^2*m1*m3^2*rt1*sin(x2) + 12*l2*l3^2*m2*m3^2*rt1*sin(x2) + 8*l2*l3^2*m2^2*m3*rt1*sin(x2) - 8*l2*l3^2*m1*m3^2*rt4*sin(x2) - 12*l2*l3^2*m2*m3^2*rt4*sin(x2) - 8*l2*l3^2*m2^2*m3*rt4*sin(x2) + 16*I3zz*db*l2*m1*m2*sin(x2) + 32*I3zz*db*l2*m1*m3*sin(x2) + 48*I3zz*db*l2*m2*m3*sin(x2) + 32*I3zz*l2*m1*m2*rt1*sin(x2) + 64*I3zz*l2*m1*m3*rt1*sin(x2) + 96*I3zz*l2*m2*m3*rt1*sin(x2) - 32*I3zz*l2*m1*m2*rt4*sin(x2) - 64*I3zz*l2*m1*m3*rt4*sin(x2) - 96*I3zz*l2*m2*m3*rt4*sin(x2) + 8*db*l2^2*l3*m1*m3^2*sin(x2 - x3) - 4*db*l2*l3^2*m1*m3^2*sin(x2 + 2*x3) + 4*db*l2^2*l3*m2*m3^2*sin(x2 - x3) + 2*db*l2^2*l3*m2^2*m3*sin(x2 - x3) - 2*db*l2*l3^2*m2*m3^2*sin(x2 + 2*x3) + 16*l2^2*l3*m1*m3^2*rt1*sin(x2 - x3) - 8*l2*l3^2*m1*m3^2*rt1*sin(x2 + 2*x3) + 8*l2^2*l3*m2*m3^2*rt1*sin(x2 - x3) + 4*l2^2*l3*m2^2*m3*rt1*sin(x2 - x3) - 4*l2*l3^2*m2*m3^2*rt1*sin(x2 + 2*x3) - 16*l2^2*l3*m1*m3^2*rt4*sin(x2 - x3) + 8*l2*l3^2*m1*m3^2*rt4*sin(x2 + 2*x3) - 8*l2^2*l3*m2*m3^2*rt4*sin(x2 - x3) - 4*l2^2*l3*m2^2*m3*rt4*sin(x2 - x3) + 4*l2*l3^2*m2*m3^2*rt4*sin(x2 + 2*x3) + 16*CoM3x*l2^2*l3*m1*m3^2*cos(x2 + x3) + 32*CoM3x*I2zz*l3*m1*m3*cos(x2 + x3) - 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2) - 8*db*l2^2*l3*m1*m3^2*sin(x2 + x3) + 2*db*l2^2*l3*m2^2*m3*sin(x2 + x3) + 4*db*l2*l3^2*m1*m2*m3*sin(x2) - 8*CoM3x*l2^2*l3*m1*m2*m3*cos(x2 - x3) + 8*l2*l3^2*m1*m2*m3*rt1*sin(x2) - 8*l2*l3^2*m1*m2*m3*rt4*sin(x2) + 4*db*l2^2*l3*m1*m2*m3*sin(x2 - x3) + 8*l2^2*l3*m1*m2*m3*rt1*sin(x2 - x3) - 8*l2^2*l3*m1*m2*m3*rt4*sin(x2 - x3) - 8*CoM3x*l2*l3^2*m1*m2*m3*cos(x2))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)));
 (64*CoM3x*I2zz*I3zz*m1 + 8*I3zz*hb*l2^2*m2^2 + 8*I2zz*hb*l3^2*m3^2 + 32*I3zz*hb*l2^2*m3^2 + 8*I3zz*ht*l2^2*m2^2 + 8*I2zz*ht*l3^2*m3^2 + 32*I3zz*ht*l2^2*m3^2 + 8*I3zz*l2^2*m2^2*rw + 8*I2zz*l3^2*m3^2*rw + 32*I3zz*l2^2*m3^2*rw + 64*I2zz*I3zz*hb*m1 + 64*I2zz*I3zz*hb*m2 + 64*I2zz*I3zz*hb*m3 + 64*I2zz*I3zz*ht*m1 + 64*I2zz*I3zz*ht*m2 + 64*I2zz*I3zz*ht*m3 + 64*I2zz*I3zz*m1*rw + 64*I2zz*I3zz*m2*rw + 64*I2zz*I3zz*m3*rw - 8*I2zz*hb*l3^2*m3^2*cos(2*x2 + 2*x3) - 8*I2zz*ht*l3^2*m3^2*cos(2*x2 + 2*x3) - 8*I2zz*l3^2*m3^2*rw*cos(2*x2 + 2*x3) + 4*I2zz*db*l3^2*m3^2*sin(2*x2 + 2*x3) - 8*I2zz*l3^2*m3^2*rt1*sin(2*x2 + 2*x3) + 8*I2zz*l3^2*m3^2*rt4*sin(2*x2 + 2*x3) + 8*CoM3x*l2^2*l3^2*m1*m3^2 + 16*CoM3x*I3zz*l2^2*m1*m2 + 16*CoM3x*I2zz*l3^2*m1*m3 + 64*CoM3x*I3zz*l2^2*m1*m3 + 8*hb*l2^2*l3^2*m1*m3^2 + 6*hb*l2^2*l3^2*m2*m3^2 + 2*hb*l2^2*l3^2*m2^2*m3 + 8*ht*l2^2*l3^2*m1*m3^2 + 6*ht*l2^2*l3^2*m2*m3^2 + 2*ht*l2^2*l3^2*m2^2*m3 + 8*l2^2*l3^2*m1*m3^2*rw + 6*l2^2*l3^2*m2*m3^2*rw + 2*l2^2*l3^2*m2^2*m3*rw + 16*I3zz*hb*l2^2*m1*m2 + 16*I2zz*hb*l3^2*m1*m3 + 64*I3zz*hb*l2^2*m1*m3 + 16*I2zz*hb*l3^2*m2*m3 + 48*I3zz*hb*l2^2*m2*m3 + 16*I3zz*ht*l2^2*m1*m2 + 16*I2zz*ht*l3^2*m1*m3 + 64*I3zz*ht*l2^2*m1*m3 + 16*I2zz*ht*l3^2*m2*m3 + 48*I3zz*ht*l2^2*m2*m3 + 16*I3zz*l2^2*m1*m2*rw + 16*I2zz*l3^2*m1*m3*rw + 64*I3zz*l2^2*m1*m3*rw + 16*I2zz*l3^2*m2*m3*rw + 48*I3zz*l2^2*m2*m3*rw - 8*I3zz*hb*l2^2*m2^2*cos(2*x2) - 32*I3zz*hb*l2^2*m3^2*cos(2*x2) - 8*I3zz*ht*l2^2*m2^2*cos(2*x2) - 32*I3zz*ht*l2^2*m3^2*cos(2*x2) - 8*I3zz*l2^2*m2^2*rw*cos(2*x2) - 32*I3zz*l2^2*m3^2*rw*cos(2*x2) + 4*I3zz*db*l2^2*m2^2*sin(2*x2) + 16*I3zz*db*l2^2*m3^2*sin(2*x2) - 8*I3zz*l2^2*m2^2*rt1*sin(2*x2) - 32*I3zz*l2^2*m3^2*rt1*sin(2*x2) + 8*I3zz*l2^2*m2^2*rt4*sin(2*x2) + 32*I3zz*l2^2*m3^2*rt4*sin(2*x2) + 2*hb*l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3) + 2*ht*l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3) - 32*I3zz*l2^2*m2*m3*rt1*sin(2*x2) + 32*I3zz*l2^2*m2*m3*rt4*sin(2*x2) + 2*l2^2*l3^2*m2*m3^2*rw*cos(2*x2 + 2*x3) - db*l2^2*l3^2*m2*m3^2*sin(2*x2 + 2*x3) + 2*l2^2*l3^2*m2*m3^2*rt1*sin(2*x2 + 2*x3) - 2*l2^2*l3^2*m2*m3^2*rt4*sin(2*x2 + 2*x3) + 4*CoM3x*l2^2*l3^2*m1*m2*m3 + 4*hb*l2^2*l3^2*m1*m2*m3 + 4*ht*l2^2*l3^2*m1*m2*m3 - 8*CoM3x*l2^2*l3^2*m1*m3^2*cos(2*x3) + 4*l2^2*l3^2*m1*m2*m3*rw - 8*hb*l2^2*l3^2*m1*m3^2*cos(2*x3) - 4*hb*l2^2*l3^2*m2*m3^2*cos(2*x2) - 2*hb*l2^2*l3^2*m2^2*m3*cos(2*x2) - 4*hb*l2^2*l3^2*m2*m3^2*cos(2*x3) - 8*ht*l2^2*l3^2*m1*m3^2*cos(2*x3) - 4*ht*l2^2*l3^2*m2*m3^2*cos(2*x2) - 2*ht*l2^2*l3^2*m2^2*m3*cos(2*x2) - 4*ht*l2^2*l3^2*m2*m3^2*cos(2*x3) - 8*l2^2*l3^2*m1*m3^2*rw*cos(2*x3) - 4*l2^2*l3^2*m2*m3^2*rw*cos(2*x2) - 2*l2^2*l3^2*m2^2*m3*rw*cos(2*x2) - 4*l2^2*l3^2*m2*m3^2*rw*cos(2*x3) + 2*db*l2^2*l3^2*m2*m3^2*sin(2*x2) + db*l2^2*l3^2*m2^2*m3*sin(2*x2) - 4*l2^2*l3^2*m2*m3^2*rt1*sin(2*x2) - 2*l2^2*l3^2*m2^2*m3*rt1*sin(2*x2) + 4*l2^2*l3^2*m2*m3^2*rt4*sin(2*x2) + 2*l2^2*l3^2*m2^2*m3*rt4*sin(2*x2) - 32*I3zz*hb*l2^2*m2*m3*cos(2*x2) - 32*I3zz*ht*l2^2*m2*m3*cos(2*x2) - 32*I3zz*l2^2*m2*m3*rw*cos(2*x2) + 16*I3zz*db*l2^2*m2*m3*sin(2*x2))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3))), (8*I3zz*l2^2*m2^2*cos(2*x2) - 8*I2zz*l3^2*m3^2 - 32*I3zz*l2^2*m3^2 - 64*I2zz*I3zz*m1 - 64*I2zz*I3zz*m2 - 64*I2zz*I3zz*m3 - 8*l2^2*l3^2*m1*m3^2 - 6*l2^2*l3^2*m2*m3^2 - 2*l2^2*l3^2*m2^2*m3 - 16*I3zz*l2^2*m1*m2 - 16*I2zz*l3^2*m1*m3 - 64*I3zz*l2^2*m1*m3 - 16*I2zz*l3^2*m2*m3 - 48*I3zz*l2^2*m2*m3 - 8*I3zz*l2^2*m2^2 + 32*I3zz*l2^2*m3^2*cos(2*x2) + 8*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 16*I3zz*db*l2*m2^2*sin(x2) + 32*I3zz*db*l2*m3^2*sin(x2) - 4*l2^2*l3^2*m1*m2*m3 - 32*I3zz*l2*m2^2*rt1*sin(x2) - 64*I3zz*l2*m3^2*rt1*sin(x2) + 32*I3zz*l2*m2^2*rt4*sin(x2) + 64*I3zz*l2*m3^2*rt4*sin(x2) + 8*l2^2*l3^2*m1*m3^2*cos(2*x3) + 4*l2^2*l3^2*m2*m3^2*cos(2*x2) + 2*l2^2*l3^2*m2^2*m3*cos(2*x2) + 4*l2^2*l3^2*m2*m3^2*cos(2*x3) + 32*I3zz*l2^2*m2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3) + 32*CoM3x*I3zz*l2*m1*m2*cos(x2) + 64*CoM3x*I3zz*l2*m1*m3*cos(x2) + 4*db*l2*l3^2*m1*m3^2*sin(x2) + 6*db*l2*l3^2*m2*m3^2*sin(x2) + 4*db*l2*l3^2*m2^2*m3*sin(x2) - 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2 + 2*x3) - 8*l2*l3^2*m1*m3^2*rt1*sin(x2) - 12*l2*l3^2*m2*m3^2*rt1*sin(x2) - 8*l2*l3^2*m2^2*m3*rt1*sin(x2) + 8*l2*l3^2*m1*m3^2*rt4*sin(x2) + 12*l2*l3^2*m2*m3^2*rt4*sin(x2) + 8*l2*l3^2*m2^2*m3*rt4*sin(x2) + 16*I3zz*db*l2*m1*m2*sin(x2) + 32*I3zz*db*l2*m1*m3*sin(x2) + 48*I3zz*db*l2*m2*m3*sin(x2) - 32*I3zz*l2*m1*m2*rt1*sin(x2) - 64*I3zz*l2*m1*m3*rt1*sin(x2) - 96*I3zz*l2*m2*m3*rt1*sin(x2) + 32*I3zz*l2*m1*m2*rt4*sin(x2) + 64*I3zz*l2*m1*m3*rt4*sin(x2) + 96*I3zz*l2*m2*m3*rt4*sin(x2) - 4*db*l2*l3^2*m1*m3^2*sin(x2 + 2*x3) - 2*db*l2*l3^2*m2*m3^2*sin(x2 + 2*x3) + 8*l2*l3^2*m1*m3^2*rt1*sin(x2 + 2*x3) + 4*l2*l3^2*m2*m3^2*rt1*sin(x2 + 2*x3) - 8*l2*l3^2*m1*m3^2*rt4*sin(x2 + 2*x3) - 4*l2*l3^2*m2*m3^2*rt4*sin(x2 + 2*x3) + 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2) + 4*db*l2*l3^2*m1*m2*m3*sin(x2) - 8*l2*l3^2*m1*m2*m3*rt1*sin(x2) + 8*l2*l3^2*m1*m2*m3*rt4*sin(x2) + 8*CoM3x*l2*l3^2*m1*m2*m3*cos(x2))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3))), -(32*I2zz*l3*m3^2*rt1*sin(x2 + x3) - 16*I2zz*db*l3*m3^2*sin(x2 + x3) - 32*I2zz*l3*m3^2*rt4*sin(x2 + x3) + 16*I3zz*db*l2*m2^2*sin(x2) + 32*I3zz*db*l2*m3^2*sin(x2) - 32*I3zz*l2*m2^2*rt1*sin(x2) - 64*I3zz*l2*m3^2*rt1*sin(x2) + 32*I3zz*l2*m2^2*rt4*sin(x2) + 64*I3zz*l2*m3^2*rt4*sin(x2) + 16*l2^2*l3*m1*m3^2*rt1*sin(x2 + x3) - 4*l2^2*l3*m2^2*m3*rt1*sin(x2 + x3) - 16*l2^2*l3*m1*m3^2*rt4*sin(x2 + x3) + 4*l2^2*l3*m2^2*m3*rt4*sin(x2 + x3) + 32*CoM3x*I3zz*l2*m1*m2*cos(x2) + 64*CoM3x*I3zz*l2*m1*m3*cos(x2) - 16*I2zz*db*l3*m1*m3*sin(x2 + x3) - 16*I2zz*db*l3*m2*m3*sin(x2 + x3) + 4*db*l2*l3^2*m1*m3^2*sin(x2) + 6*db*l2*l3^2*m2*m3^2*sin(x2) + 4*db*l2*l3^2*m2^2*m3*sin(x2) + 32*I2zz*l3*m1*m3*rt1*sin(x2 + x3) + 32*I2zz*l3*m2*m3*rt1*sin(x2 + x3) - 32*I2zz*l3*m1*m3*rt4*sin(x2 + x3) - 32*I2zz*l3*m2*m3*rt4*sin(x2 + x3) + 16*CoM3x*l2^2*l3*m1*m3^2*cos(x2 - x3) - 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2 + 2*x3) - 8*l2*l3^2*m1*m3^2*rt1*sin(x2) - 12*l2*l3^2*m2*m3^2*rt1*sin(x2) - 8*l2*l3^2*m2^2*m3*rt1*sin(x2) + 8*l2*l3^2*m1*m3^2*rt4*sin(x2) + 12*l2*l3^2*m2*m3^2*rt4*sin(x2) + 8*l2*l3^2*m2^2*m3*rt4*sin(x2) + 16*I3zz*db*l2*m1*m2*sin(x2) + 32*I3zz*db*l2*m1*m3*sin(x2) + 48*I3zz*db*l2*m2*m3*sin(x2) - 32*I3zz*l2*m1*m2*rt1*sin(x2) - 64*I3zz*l2*m1*m3*rt1*sin(x2) - 96*I3zz*l2*m2*m3*rt1*sin(x2) + 32*I3zz*l2*m1*m2*rt4*sin(x2) + 64*I3zz*l2*m1*m3*rt4*sin(x2) + 96*I3zz*l2*m2*m3*rt4*sin(x2) + 8*db*l2^2*l3*m1*m3^2*sin(x2 - x3) - 4*db*l2*l3^2*m1*m3^2*sin(x2 + 2*x3) + 4*db*l2^2*l3*m2*m3^2*sin(x2 - x3) + 2*db*l2^2*l3*m2^2*m3*sin(x2 - x3) - 2*db*l2*l3^2*m2*m3^2*sin(x2 + 2*x3) - 16*l2^2*l3*m1*m3^2*rt1*sin(x2 - x3) + 8*l2*l3^2*m1*m3^2*rt1*sin(x2 + 2*x3) - 8*l2^2*l3*m2*m3^2*rt1*sin(x2 - x3) - 4*l2^2*l3*m2^2*m3*rt1*sin(x2 - x3) + 4*l2*l3^2*m2*m3^2*rt1*sin(x2 + 2*x3) + 16*l2^2*l3*m1*m3^2*rt4*sin(x2 - x3) - 8*l2*l3^2*m1*m3^2*rt4*sin(x2 + 2*x3) + 8*l2^2*l3*m2*m3^2*rt4*sin(x2 - x3) + 4*l2^2*l3*m2^2*m3*rt4*sin(x2 - x3) - 4*l2*l3^2*m2*m3^2*rt4*sin(x2 + 2*x3) - 16*CoM3x*l2^2*l3*m1*m3^2*cos(x2 + x3) - 32*CoM3x*I2zz*l3*m1*m3*cos(x2 + x3) + 8*CoM3x*l2*l3^2*m1*m3^2*cos(x2) - 8*db*l2^2*l3*m1*m3^2*sin(x2 + x3) + 2*db*l2^2*l3*m2^2*m3*sin(x2 + x3) + 4*db*l2*l3^2*m1*m2*m3*sin(x2) + 8*CoM3x*l2^2*l3*m1*m2*m3*cos(x2 - x3) - 8*l2*l3^2*m1*m2*m3*rt1*sin(x2) + 8*l2*l3^2*m1*m2*m3*rt4*sin(x2) + 4*db*l2^2*l3*m1*m2*m3*sin(x2 - x3) - 8*l2^2*l3*m1*m2*m3*rt1*sin(x2 - x3) + 8*l2^2*l3*m1*m2*m3*rt4*sin(x2 - x3) + 8*CoM3x*l2*l3^2*m1*m2*m3*cos(x2))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)))];
 
bx = [ -(64*I2zz*I3zz*g0*m1^2*rt4 - 32*I2zz*I3zz*db*g0*m1^2 - 32*I2zz*I3zz*db*g0*m2^2 - 32*I2zz*I3zz*db*g0*m3^2 - 64*I2zz*I3zz*g0*m1^2*rt1 - 64*I2zz*I3zz*g0*m2^2*rt1 - 64*I2zz*I3zz*g0*m3^2*rt1 - 64*CoM3y*I2zz*I3zz*g0*m1^2 + 64*I2zz*I3zz*g0*m2^2*rt4 + 64*I2zz*I3zz*g0*m3^2*rt4 - 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 - 8*CoM3y*I3zz*g0*l2^2*m1*m2^2 - 16*CoM3y*I3zz*g0*l2^2*m1^2*m2 - 8*CoM3y*I2zz*g0*l3^2*m1*m3^2 - 16*CoM3y*I2zz*g0*l3^2*m1^2*m3 - 32*CoM3y*I3zz*g0*l2^2*m1*m3^2 - 64*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m3^2 - db*g0*l2^2*l3^2*m2^2*m3^2 - 8*g0*l2^2*l3^2*m1^2*m3^2*rt1 - 2*g0*l2^2*l3^2*m2^2*m3^2*rt1 + 8*g0*l2^2*l3^2*m1^2*m3^2*rt4 + 2*g0*l2^2*l3^2*m2^2*m3^2*rt4 - 64*CoM3y*I2zz*I3zz*g0*m1*m2 - 64*CoM3y*I2zz*I3zz*g0*m1*m3 - 8*I3zz*db*g0*l2^2*m1*m2^2 - 8*I3zz*db*g0*l2^2*m1^2*m2 - 8*I2zz*db*g0*l3^2*m1*m3^2 - 8*I2zz*db*g0*l3^2*m1^2*m3 - 32*I3zz*db*g0*l2^2*m1*m3^2 - 32*I3zz*db*g0*l2^2*m1^2*m3 - 8*I2zz*db*g0*l3^2*m2*m3^2 - 8*I2zz*db*g0*l3^2*m2^2*m3 - 8*I3zz*db*g0*l2^2*m2*m3^2 - 8*I3zz*db*g0*l2^2*m2^2*m3 - 16*I3zz*g0*l2^2*m1*m2^2*rt1 - 16*I3zz*g0*l2^2*m1^2*m2*rt1 - 16*I2zz*g0*l3^2*m1*m3^2*rt1 - 16*I2zz*g0*l3^2*m1^2*m3*rt1 - 64*I3zz*g0*l2^2*m1*m3^2*rt1 - 64*I3zz*g0*l2^2*m1^2*m3*rt1 - 16*I2zz*g0*l3^2*m2*m3^2*rt1 - 16*I2zz*g0*l3^2*m2^2*m3*rt1 - 16*I3zz*g0*l2^2*m2*m3^2*rt1 - 16*I3zz*g0*l2^2*m2^2*m3*rt1 + 16*I3zz*g0*l2^2*m1*m2^2*rt4 + 16*I3zz*g0*l2^2*m1^2*m2*rt4 + 16*I2zz*g0*l3^2*m1*m3^2*rt4 + 16*I2zz*g0*l3^2*m1^2*m3*rt4 + 64*I3zz*g0*l2^2*m1*m3^2*rt4 + 64*I3zz*g0*l2^2*m1^2*m3*rt4 + 16*I2zz*g0*l3^2*m2*m3^2*rt4 + 16*I2zz*g0*l3^2*m2^2*m3*rt4 + 16*I3zz*g0*l2^2*m2*m3^2*rt4 + 16*I3zz*g0*l2^2*m2^2*m3*rt4 - 64*I2zz*I3zz*db*g0*m1*m2 - 64*I2zz*I3zz*db*g0*m1*m3 - 64*I2zz*I3zz*db*g0*m2*m3 - 128*I2zz*I3zz*g0*m1*m2*rt1 - 128*I2zz*I3zz*g0*m1*m3*rt1 - 128*I2zz*I3zz*g0*m2*m3*rt1 + 128*I2zz*I3zz*g0*m1*m2*rt4 + 128*I2zz*I3zz*g0*m1*m3*rt4 + 128*I2zz*I3zz*g0*m2*m3*rt4 + 16*I2zz*I3zz*db*l3*m3^2*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m3^2*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt1*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt1*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt4*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt4*x6^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m2^2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m3^2*x5^2*cos(x2) - 6*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 - 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 - 4*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 32*I2zz*I3zz*l2*m2^2*rt1*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m3^2*rt1*x5^2*cos(x2) - 32*I2zz*I3zz*l2*m2^2*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m3^2*rt4*x5^2*cos(x2) - 16*CoM3y*I2zz*g0*l3^2*m1*m2*m3 - 48*CoM3y*I3zz*g0*l2^2*m1*m2*m3 - 6*db*g0*l2^2*l3^2*m1*m2*m3^2 - 2*db*g0*l2^2*l3^2*m1*m2^2*m3 - 2*db*g0*l2^2*l3^2*m1^2*m2*m3 + 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) - 12*g0*l2^2*l3^2*m1*m2*m3^2*rt1 - 4*g0*l2^2*l3^2*m1*m2^2*m3*rt1 - 4*g0*l2^2*l3^2*m1^2*m2*m3*rt1 + 12*g0*l2^2*l3^2*m1*m2*m3^2*rt4 + 4*g0*l2^2*l3^2*m1*m2^2*m3*rt4 + 4*g0*l2^2*l3^2*m1^2*m2*m3*rt4 - (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 + x3))/2 - (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 + x3))/2 - 16*I2zz*db*g0*l3^2*m1*m2*m3 - 48*I3zz*db*g0*l2^2*m1*m2*m3 + 8*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*sin(x2 + x3) + 8*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*sin(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 + x3) + 8*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*x2) + 32*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*x2) - 32*I2zz*g0*l3^2*m1*m2*m3*rt1 - 96*I3zz*g0*l2^2*m1*m2*m3*rt1 + 32*I2zz*g0*l3^2*m1*m2*m3*rt4 + 96*I3zz*g0*l2^2*m1*m2*m3*rt4 + 4*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*x3) + 4*I2zz*db*l3^3*m1*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m1*m3^2*x6^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x6^2*cos(x2 + x3) - 8*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*x2) - 32*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*x2) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*x3) + 2*g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*x3) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*x3) - 2*g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*x3) + (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2))/2 + 8*I2zz*l3^3*m1*m3^2*rt1*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m1*m3^2*rt1*x6^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt1*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt1*x6^2*cos(x2 + x3) - 8*I2zz*l3^3*m1*m3^2*rt4*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m1*m3^2*rt4*x6^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt4*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt4*x6^2*cos(x2 + x3) + 8*CoM3x*I3zz*l2^3*m1*m2^2*x5^2*sin(x2) + 64*CoM3x*I3zz*l2^3*m1*m3^2*x5^2*sin(x2) + l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2) - l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2) + 4*I3zz*db*l2^3*m1*m2^2*x5^2*cos(x2) + 32*I3zz*db*l2^3*m1*m3^2*x5^2*cos(x2) + 8*I3zz*db*l2^3*m2*m3^2*x5^2*cos(x2) + 4*I3zz*db*l2^3*m2^2*m3*x5^2*cos(x2) + 8*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*x2 + 2*x3) + 8*I3zz*l2^3*m1*m2^2*rt1*x5^2*cos(x2) + 64*I3zz*l2^3*m1*m3^2*rt1*x5^2*cos(x2) + 16*I3zz*l2^3*m2*m3^2*rt1*x5^2*cos(x2) + 8*I3zz*l2^3*m2^2*m3*rt1*x5^2*cos(x2) - 8*I3zz*l2^3*m1*m2^2*rt4*x5^2*cos(x2) - 64*I3zz*l2^3*m1*m3^2*rt4*x5^2*cos(x2) - 16*I3zz*l2^3*m2*m3^2*rt4*x5^2*cos(x2) - 8*I3zz*l2^3*m2^2*m3*rt4*x5^2*cos(x2) - 8*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*x2 + 2*x3) + (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 - x3))/2 + (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 - x3))/2 - (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2 + 2*x3))/2 + l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 - x3) + l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 - x3) - l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2 + 2*x3) - l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 - x3) - l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 - x3) + l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 - x3) - 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 + x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 + x3) + 32*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*sin(x2 + x3) + 32*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*sin(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 + x3) + 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2) + 16*I2zz*I3zz*db*l3*m1*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m1*m3*x6^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x6^2*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2) + 6*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m2^2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m3^2*x5*x6*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt1*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt1*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt1*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt1*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt4*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt4*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt4*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt4*x6^2*cos(x2 + x3) + 32*CoM3x*I2zz*I3zz*l2*m1*m2*x5^2*sin(x2) + 64*CoM3x*I2zz*I3zz*l2*m1*m3*x5^2*sin(x2) + 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2) + 12*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m2^2*m3*rt1*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2) - 12*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m2^2*m3*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l3*m3^2*rt1*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m3^2*rt4*x5*x6*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m1*m2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m1*m3*x5^2*cos(x2) + 48*I2zz*I3zz*db*l2*m2*m3*x5^2*cos(x2) + 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2 + 2*x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 - x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 - x3) + 32*I2zz*I3zz*l2*m1*m2*rt1*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m1*m3*rt1*x5^2*cos(x2) + 96*I2zz*I3zz*l2*m2*m3*rt1*x5^2*cos(x2) - 32*I2zz*I3zz*l2*m1*m2*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m1*m3*rt4*x5^2*cos(x2) - 96*I2zz*I3zz*l2*m2*m3*rt4*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 - x3) + 2*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x5^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x6^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 - x3) + 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 - x3) + 4*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt1*x5^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt1*x6^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 - x3) - 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 - x3) - 4*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt4*x5^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt4*x6^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 - x3) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2) + 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*x2) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2) - 2*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*x2) - db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 + x3) + 32*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*x2) + 4*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) + 6*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2) + 2*CoM3x*l2^3*l3^2*m1*m2^2*m3*x5^2*sin(x2) + 16*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*sin(x2 + x3) - 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 + x3) + 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 + x3) - 32*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*x2) + 8*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*x3) - 8*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*x3) + 3*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2) + db*l2^3*l3^2*m1*m2^2*m3*x5^2*cos(x2) + 8*I2zz*db*l3^3*m1*m3^2*x5*x6*cos(x2 + x3) + 8*I2zz*db*l3^3*m2*m3^2*x5*x6*cos(x2 + x3) - 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2 + 2*x3) + 48*CoM3x*I3zz*l2^3*m1*m2*m3*x5^2*sin(x2) + 6*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2) + 2*l2^3*l3^2*m1*m2^2*m3*rt1*x5^2*cos(x2) - 6*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2) - 2*l2^3*l3^2*m1*m2^2*m3*rt4*x5^2*cos(x2) + 16*I2zz*l3^3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) + 16*I2zz*l3^3*m2*m3^2*rt1*x5*x6*cos(x2 + x3) - 16*I2zz*l3^3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) - 16*I2zz*l3^3*m2*m3^2*rt4*x5*x6*cos(x2 + x3) + 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2 + 2*x3) + 24*I3zz*db*l2^3*m1*m2*m3*x5^2*cos(x2) + 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*sin(x2 - x3) + 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*sin(x2 - x3) - 2*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2 + 2*x3) + 48*I3zz*l2^3*m1*m2*m3*rt1*x5^2*cos(x2) - 48*I3zz*l2^3*m1*m2*m3*rt4*x5^2*cos(x2) + db*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2 - x3) + db*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2 - x3) - db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2 + 2*x3) + db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 - x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 + x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 + x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt1*x5^2*cos(x2 - x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt1*x6^2*cos(x2 - x3) - 2*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt4*x5^2*cos(x2 - x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt4*x6^2*cos(x2 - x3) + 2*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2 - x3) + 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 + x3) + 4*l2^2*l3^3*m1*m2*m3^2*rt1*x5*x6*cos(x2 - x3) - 4*l2^2*l3^3*m1*m2*m3^2*rt4*x5*x6*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 + x3) - 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 + x3) + 8*CoM3x*I2zz*l2*l3^2*m1*m2*m3*x5^2*sin(x2) + 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*sin(x2 + x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 + x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m1*m3*x5*x6*cos(x2 + x3) + 32*I2zz*I3zz*db*l3*m2*m3*x5*x6*cos(x2 + x3) + 8*I2zz*l2*l3^2*m1*m2*m3*rt1*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m1*m2*m3*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l3*m1*m3*rt1*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m2*m3*rt1*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m1*m3*rt4*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m2*m3*rt4*x5*x6*cos(x2 + x3) + 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*sin(x2 - x3) + 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*sin(x2 - x3) + 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x6^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x6^2*cos(x2 - x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m2*m3^2*rt1*x5*x6*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 - x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m2*m3^2*rt4*x5*x6*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 - x3) + 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*sin(x2 - x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*sin(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m1*m2*m3*rt1*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m1*m2*m3*rt4*x5*x6*cos(x2 - x3))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)));
-(64*CoM3y*I2zz*I3zz*g0*m1^2 - 32*I2zz*I3zz*db*g0*m1^2 - 32*I2zz*I3zz*db*g0*m2^2 - 32*I2zz*I3zz*db*g0*m3^2 + 64*I2zz*I3zz*g0*m1^2*rt1 + 64*I2zz*I3zz*g0*m2^2*rt1 + 64*I2zz*I3zz*g0*m3^2*rt1 - 64*I2zz*I3zz*g0*m1^2*rt4 - 64*I2zz*I3zz*g0*m2^2*rt4 - 64*I2zz*I3zz*g0*m3^2*rt4 + 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 + 8*CoM3y*I3zz*g0*l2^2*m1*m2^2 + 16*CoM3y*I3zz*g0*l2^2*m1^2*m2 + 8*CoM3y*I2zz*g0*l3^2*m1*m3^2 + 16*CoM3y*I2zz*g0*l3^2*m1^2*m3 + 32*CoM3y*I3zz*g0*l2^2*m1*m3^2 + 64*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m3^2 - db*g0*l2^2*l3^2*m2^2*m3^2 + 8*g0*l2^2*l3^2*m1^2*m3^2*rt1 + 2*g0*l2^2*l3^2*m2^2*m3^2*rt1 - 8*g0*l2^2*l3^2*m1^2*m3^2*rt4 - 2*g0*l2^2*l3^2*m2^2*m3^2*rt4 + 64*CoM3y*I2zz*I3zz*g0*m1*m2 + 64*CoM3y*I2zz*I3zz*g0*m1*m3 - 8*I3zz*db*g0*l2^2*m1*m2^2 - 8*I3zz*db*g0*l2^2*m1^2*m2 - 8*I2zz*db*g0*l3^2*m1*m3^2 - 8*I2zz*db*g0*l3^2*m1^2*m3 - 32*I3zz*db*g0*l2^2*m1*m3^2 - 32*I3zz*db*g0*l2^2*m1^2*m3 - 8*I2zz*db*g0*l3^2*m2*m3^2 - 8*I2zz*db*g0*l3^2*m2^2*m3 - 8*I3zz*db*g0*l2^2*m2*m3^2 - 8*I3zz*db*g0*l2^2*m2^2*m3 + 16*I3zz*g0*l2^2*m1*m2^2*rt1 + 16*I3zz*g0*l2^2*m1^2*m2*rt1 + 16*I2zz*g0*l3^2*m1*m3^2*rt1 + 16*I2zz*g0*l3^2*m1^2*m3*rt1 + 64*I3zz*g0*l2^2*m1*m3^2*rt1 + 64*I3zz*g0*l2^2*m1^2*m3*rt1 + 16*I2zz*g0*l3^2*m2*m3^2*rt1 + 16*I2zz*g0*l3^2*m2^2*m3*rt1 + 16*I3zz*g0*l2^2*m2*m3^2*rt1 + 16*I3zz*g0*l2^2*m2^2*m3*rt1 - 16*I3zz*g0*l2^2*m1*m2^2*rt4 - 16*I3zz*g0*l2^2*m1^2*m2*rt4 - 16*I2zz*g0*l3^2*m1*m3^2*rt4 - 16*I2zz*g0*l3^2*m1^2*m3*rt4 - 64*I3zz*g0*l2^2*m1*m3^2*rt4 - 64*I3zz*g0*l2^2*m1^2*m3*rt4 - 16*I2zz*g0*l3^2*m2*m3^2*rt4 - 16*I2zz*g0*l3^2*m2^2*m3*rt4 - 16*I3zz*g0*l2^2*m2*m3^2*rt4 - 16*I3zz*g0*l2^2*m2^2*m3*rt4 - 64*I2zz*I3zz*db*g0*m1*m2 - 64*I2zz*I3zz*db*g0*m1*m3 - 64*I2zz*I3zz*db*g0*m2*m3 + 128*I2zz*I3zz*g0*m1*m2*rt1 + 128*I2zz*I3zz*g0*m1*m3*rt1 + 128*I2zz*I3zz*g0*m2*m3*rt1 - 128*I2zz*I3zz*g0*m1*m2*rt4 - 128*I2zz*I3zz*g0*m1*m3*rt4 - 128*I2zz*I3zz*g0*m2*m3*rt4 + 16*I2zz*I3zz*db*l3*m3^2*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m3^2*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt1*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt1*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt4*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt4*x6^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m2^2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m3^2*x5^2*cos(x2) + 6*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 + 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 + 4*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 - 32*I2zz*I3zz*l2*m2^2*rt1*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m3^2*rt1*x5^2*cos(x2) + 32*I2zz*I3zz*l2*m2^2*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m3^2*rt4*x5^2*cos(x2) + 16*CoM3y*I2zz*g0*l3^2*m1*m2*m3 + 48*CoM3y*I3zz*g0*l2^2*m1*m2*m3 - 6*db*g0*l2^2*l3^2*m1*m2*m3^2 - 2*db*g0*l2^2*l3^2*m1*m2^2*m3 - 2*db*g0*l2^2*l3^2*m1^2*m2*m3 - 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + 12*g0*l2^2*l3^2*m1*m2*m3^2*rt1 + 4*g0*l2^2*l3^2*m1*m2^2*m3*rt1 + 4*g0*l2^2*l3^2*m1^2*m2*m3*rt1 - 12*g0*l2^2*l3^2*m1*m2*m3^2*rt4 - 4*g0*l2^2*l3^2*m1*m2^2*m3*rt4 - 4*g0*l2^2*l3^2*m1^2*m2*m3*rt4 - (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 + x3))/2 - (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 + x3))/2 - 16*I2zz*db*g0*l3^2*m1*m2*m3 - 48*I3zz*db*g0*l2^2*m1*m2*m3 - 8*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*sin(x2 + x3) - 8*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*sin(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 + x3) - 8*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*x2) - 32*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*x2) + 32*I2zz*g0*l3^2*m1*m2*m3*rt1 + 96*I3zz*g0*l2^2*m1*m2*m3*rt1 - 32*I2zz*g0*l3^2*m1*m2*m3*rt4 - 96*I3zz*g0*l2^2*m1*m2*m3*rt4 + 4*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*x3) + 4*I2zz*db*l3^3*m1*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m1*m3^2*x6^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x6^2*cos(x2 + x3) + 8*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*x2) + 32*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*x2) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*x3) - 2*g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*x3) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*x3) + 2*g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*x3) + (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2))/2 - 8*I2zz*l3^3*m1*m3^2*rt1*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m1*m3^2*rt1*x6^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt1*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt1*x6^2*cos(x2 + x3) + 8*I2zz*l3^3*m1*m3^2*rt4*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m1*m3^2*rt4*x6^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt4*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt4*x6^2*cos(x2 + x3) - 8*CoM3x*I3zz*l2^3*m1*m2^2*x5^2*sin(x2) - 64*CoM3x*I3zz*l2^3*m1*m3^2*x5^2*sin(x2) - l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2) + l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2) + 4*I3zz*db*l2^3*m1*m2^2*x5^2*cos(x2) + 32*I3zz*db*l2^3*m1*m3^2*x5^2*cos(x2) + 8*I3zz*db*l2^3*m2*m3^2*x5^2*cos(x2) + 4*I3zz*db*l2^3*m2^2*m3*x5^2*cos(x2) - 8*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*x2 + 2*x3) - 8*I3zz*l2^3*m1*m2^2*rt1*x5^2*cos(x2) - 64*I3zz*l2^3*m1*m3^2*rt1*x5^2*cos(x2) - 16*I3zz*l2^3*m2*m3^2*rt1*x5^2*cos(x2) - 8*I3zz*l2^3*m2^2*m3*rt1*x5^2*cos(x2) + 8*I3zz*l2^3*m1*m2^2*rt4*x5^2*cos(x2) + 64*I3zz*l2^3*m1*m3^2*rt4*x5^2*cos(x2) + 16*I3zz*l2^3*m2*m3^2*rt4*x5^2*cos(x2) + 8*I3zz*l2^3*m2^2*m3*rt4*x5^2*cos(x2) + 8*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*x2 + 2*x3) + (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 - x3))/2 + (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 - x3))/2 - (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2 + 2*x3))/2 - l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 - x3) - l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 - x3) + l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2 + 2*x3) + l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 - x3) + l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 - x3) - l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2 + 2*x3) - 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 - x3) + 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 + x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 + x3) - 32*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*sin(x2 + x3) - 32*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*sin(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 + x3) - 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2) + 16*I2zz*I3zz*db*l3*m1*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m1*m3*x6^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x6^2*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2) + 6*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m2^2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m3^2*x5*x6*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt1*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt1*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt1*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt1*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt4*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt4*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt4*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt4*x6^2*cos(x2 + x3) - 32*CoM3x*I2zz*I3zz*l2*m1*m2*x5^2*sin(x2) - 64*CoM3x*I2zz*I3zz*l2*m1*m3*x5^2*sin(x2) - 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2) - 12*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m2^2*m3*rt1*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2) + 12*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m2^2*m3*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l3*m3^2*rt1*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m3^2*rt4*x5*x6*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m1*m2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m1*m3*x5^2*cos(x2) + 48*I2zz*I3zz*db*l2*m2*m3*x5^2*cos(x2) - 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2 + 2*x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 - x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 - x3) - 32*I2zz*I3zz*l2*m1*m2*rt1*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m1*m3*rt1*x5^2*cos(x2) - 96*I2zz*I3zz*l2*m2*m3*rt1*x5^2*cos(x2) + 32*I2zz*I3zz*l2*m1*m2*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m1*m3*rt4*x5^2*cos(x2) + 96*I2zz*I3zz*l2*m2*m3*rt4*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 - x3) + 2*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x5^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x6^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 - x3) - 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 - x3) - 4*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt1*x5^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt1*x6^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 - x3) + 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 - x3) + 4*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt4*x5^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt4*x6^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 - x3) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2) - 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*x2) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2) + 2*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*x2) - db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 + x3) - 32*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*x2) + 4*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) - 6*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2) - 2*CoM3x*l2^3*l3^2*m1*m2^2*m3*x5^2*sin(x2) - 16*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*sin(x2 + x3) + 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 + x3) - 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 + x3) + 32*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*x2) - 8*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*x3) + 8*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*x3) + 3*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2) + db*l2^3*l3^2*m1*m2^2*m3*x5^2*cos(x2) + 8*I2zz*db*l3^3*m1*m3^2*x5*x6*cos(x2 + x3) + 8*I2zz*db*l3^3*m2*m3^2*x5*x6*cos(x2 + x3) + 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2 + 2*x3) - 48*CoM3x*I3zz*l2^3*m1*m2*m3*x5^2*sin(x2) - 6*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2) - 2*l2^3*l3^2*m1*m2^2*m3*rt1*x5^2*cos(x2) + 6*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2) + 2*l2^3*l3^2*m1*m2^2*m3*rt4*x5^2*cos(x2) - 16*I2zz*l3^3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) - 16*I2zz*l3^3*m2*m3^2*rt1*x5*x6*cos(x2 + x3) + 16*I2zz*l3^3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) + 16*I2zz*l3^3*m2*m3^2*rt4*x5*x6*cos(x2 + x3) - 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2 + 2*x3) + 24*I3zz*db*l2^3*m1*m2*m3*x5^2*cos(x2) - 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*sin(x2 - x3) - 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*sin(x2 - x3) + 2*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2 + 2*x3) - 48*I3zz*l2^3*m1*m2*m3*rt1*x5^2*cos(x2) + 48*I3zz*l2^3*m1*m2*m3*rt4*x5^2*cos(x2) + db*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2 - x3) + db*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2 - x3) - db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2 + 2*x3) + db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 - x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 + x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 + x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt1*x5^2*cos(x2 - x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt1*x6^2*cos(x2 - x3) + 2*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt4*x5^2*cos(x2 - x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt4*x6^2*cos(x2 - x3) - 2*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2 - x3) - 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 + x3) - 4*l2^2*l3^3*m1*m2*m3^2*rt1*x5*x6*cos(x2 - x3) + 4*l2^2*l3^3*m1*m2*m3^2*rt4*x5*x6*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 + x3) - 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 + x3) - 8*CoM3x*I2zz*l2*l3^2*m1*m2*m3*x5^2*sin(x2) - 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*sin(x2 + x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 + x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m1*m3*x5*x6*cos(x2 + x3) + 32*I2zz*I3zz*db*l3*m2*m3*x5*x6*cos(x2 + x3) - 8*I2zz*l2*l3^2*m1*m2*m3*rt1*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m1*m2*m3*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l3*m1*m3*rt1*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m2*m3*rt1*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m1*m3*rt4*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m2*m3*rt4*x5*x6*cos(x2 + x3) - 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*sin(x2 - x3) - 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*sin(x2 - x3) - 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x6^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x6^2*cos(x2 - x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m2*m3^2*rt1*x5*x6*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 - x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m2*m3^2*rt4*x5*x6*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 - x3) - 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*sin(x2 - x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*sin(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m1*m2*m3*rt1*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m1*m2*m3*rt4*x5*x6*cos(x2 - x3))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)))];


% output functions: E-E position + E-E velocity + joint velocities + control inputs
h = { x1 - rt1 + rt4 - l3*sin(x2 + x3) - l2*sin(x2), hb + ht + rw + l3*cos(x2 + x3) + l2*cos(x2), x4 - x5*(l3*cos(x2 + x3) + l2*cos(x2)) - l3*x6*cos(x2 + x3), - x5*(l3*sin(x2 + x3) + l2*sin(x2)) - l3*x6*sin(x2 + x3), x4, x5, x6, tau1, tau2 + g0*m3*((l3*sin(x2 + x3))/2 + l2*sin(x2)) + (g0*l2*m2*sin(x2))/2, tau3 + (g0*l3*m3*sin(x2 + x3))/2, Dx(1,:)*[tau1;tau2;tau3]-bx(1), Dx(2,:)*[tau1;tau2;tau3]-bx(2)};
% h = { x1 - rt1 + rt4 - l3*sin(x2 + x3) - l2*sin(x2), hb + ht + rw + l3*cos(x2 + x3) + l2*cos(x2), x4 - x5*(l3*cos(x2 + x3) + l2*cos(x2)) - l3*x6*cos(x2 + x3), - x5*(l3*sin(x2 + x3) + l2*sin(x2)) - l3*x6*sin(x2 + x3), x4, x5, x6, tau1, tau2 + g0*m3*((l3*sin(x2 + x3))/2 + l2*sin(x2)) + (g0*l2*m2*sin(x2))/2, tau3 + (g0*l3*m3*sin(x2 + x3))/2};
hN = { x1 - rt1 + rt4 - l3*sin(x2 + x3) - l2*sin(x2), hb + ht + rw + l3*cos(x2 + x3) + l2*cos(x2), x4 - x5*(l3*cos(x2 + x3) + l2*cos(x2)) - l3*x6*cos(x2 + x3), - x5*(l3*sin(x2 + x3) + l2*sin(x2)) - l3*x6*sin(x2 + x3), x4, x5, x6};

% zmp symbolic function
syms zmp Mm1 Mm2 real;

% zmp and support polygon's edge's moments

% shifted model (w.r.t contact point)
% zmp = (4*I3zz*Tau1*l2^2*m2^2*rw - 4*I2zz*Tau2*l3^2*m3^2 - 16*I3zz*Tau2*l2^2*m3^2 - 32*I2zz*I3zz*Tau2*m1 - 32*I2zz*I3zz*Tau2*m2 - 32*I2zz*I3zz*Tau2*m3 - 4*I3zz*Tau2*l2^2*m2^2 + 4*I2zz*Tau1*l3^2*m3^2*rw + 16*I3zz*Tau1*l2^2*m3^2*rw + 32*I2zz*I3zz*Tau1*hb*m1 + 32*I2zz*I3zz*Tau1*hb*m2 + 32*I2zz*I3zz*Tau1*hb*m3 + 32*I2zz*I3zz*Tau1*ht*m1 + 32*I2zz*I3zz*Tau1*ht*m2 + 32*I2zz*I3zz*Tau1*ht*m3 + 32*I2zz*I3zz*Tau1*m1*rw + 32*I2zz*I3zz*Tau1*m2*rw + 32*I2zz*I3zz*Tau1*m3*rw + 32*CoM3y*I2zz*I3zz*g0*m1^2 - 4*Tau2*l2^2*l3^2*m1*m3^2 - 3*Tau2*l2^2*l3^2*m2*m3^2 - Tau2*l2^2*l3^2*m2^2*m3 + 32*I2zz*I3zz*g0*m1^2*rt1 + 32*I2zz*I3zz*g0*m2^2*rt1 + 32*I2zz*I3zz*g0*m3^2*rt1 - 32*I2zz*I3zz*g0*m1^2*rt4 - 32*I2zz*I3zz*g0*m2^2*rt4 - 32*I2zz*I3zz*g0*m3^2*rt4 - 8*I3zz*Tau2*l2^2*m1*m2 - 8*I2zz*Tau2*l3^2*m1*m3 - 32*I3zz*Tau2*l2^2*m1*m3 - 8*I2zz*Tau2*l3^2*m2*m3 - 24*I3zz*Tau2*l2^2*m2*m3 + 4*I3zz*Tau2*l2^2*m2^2*cos(2*X2) + 16*I3zz*Tau2*l2^2*m3^2*cos(2*X2) + 4*I2zz*Tau2*l3^2*m3^2*cos(2*X2 + 2*X3) + 32*CoM3x*I2zz*I3zz*Tau1*m1 + 4*I3zz*Tau1*hb*l2^2*m2^2 + 4*I2zz*Tau1*hb*l3^2*m3^2 + 16*I3zz*Tau1*hb*l2^2*m3^2 + 4*I3zz*Tau1*ht*l2^2*m2^2 + 4*I2zz*Tau1*ht*l3^2*m3^2 + 16*I3zz*Tau1*ht*l2^2*m3^2 + 8*I3zz*Tau1*hb*l2^2*m1*m2 + 8*I2zz*Tau1*hb*l3^2*m1*m3 + 32*I3zz*Tau1*hb*l2^2*m1*m3 + 8*I2zz*Tau1*hb*l3^2*m2*m3 + 24*I3zz*Tau1*hb*l2^2*m2*m3 + 8*I3zz*Tau1*ht*l2^2*m1*m2 + 8*I2zz*Tau1*ht*l3^2*m1*m3 + 32*I3zz*Tau1*ht*l2^2*m1*m3 + 8*I2zz*Tau1*ht*l3^2*m2*m3 + 24*I3zz*Tau1*ht*l2^2*m2*m3 + 8*I3zz*Tau1*l2^2*m1*m2*rw + 8*I2zz*Tau1*l3^2*m1*m3*rw + 32*I3zz*Tau1*l2^2*m1*m3*rw + 8*I2zz*Tau1*l3^2*m2*m3*rw + 24*I3zz*Tau1*l2^2*m2*m3*rw - 4*I3zz*Tau1*hb*l2^2*m2^2*cos(2*X2) - 16*I3zz*Tau1*hb*l2^2*m3^2*cos(2*X2) - 4*I3zz*Tau1*ht*l2^2*m2^2*cos(2*X2) - 16*I3zz*Tau1*ht*l2^2*m3^2*cos(2*X2) - 4*I3zz*Tau1*l2^2*m2^2*rw*cos(2*X2) - 16*I3zz*Tau1*l2^2*m3^2*rw*cos(2*X2) - 16*I2zz*Tau3*l3*m3^2*rt1*sin(X2 + X3) + 16*I2zz*Tau3*l3*m3^2*rt4*sin(X2 + X3) - 4*I2zz*Tau1*hb*l3^2*m3^2*cos(2*X2 + 2*X3) - 4*I2zz*Tau1*ht*l3^2*m3^2*cos(2*X2 + 2*X3) - 4*I3zz*Tau1*l2^2*m2^2*rt1*sin(2*X2) - 16*I3zz*Tau1*l2^2*m3^2*rt1*sin(2*X2) + 4*I3zz*Tau1*l2^2*m2^2*rt4*sin(2*X2) + 16*I3zz*Tau1*l2^2*m3^2*rt4*sin(2*X2) - 4*I2zz*Tau1*l3^2*m3^2*rw*cos(2*X2 + 2*X3) + 4*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 - 4*I2zz*Tau1*l3^2*m3^2*rt1*sin(2*X2 + 2*X3) + 4*I2zz*Tau1*l3^2*m3^2*rt4*sin(2*X2 + 2*X3) + 4*CoM3y*I3zz*g0*l2^2*m1*m2^2 + 8*CoM3y*I3zz*g0*l2^2*m1^2*m2 + 4*CoM3y*I2zz*g0*l3^2*m1*m3^2 + 8*CoM3y*I2zz*g0*l3^2*m1^2*m3 + 16*CoM3y*I3zz*g0*l2^2*m1*m3^2 + 32*CoM3y*I3zz*g0*l2^2*m1^2*m3 + 4*g0*l2^2*l3^2*m1^2*m3^2*rt1 + g0*l2^2*l3^2*m2^2*m3^2*rt1 - 4*g0*l2^2*l3^2*m1^2*m3^2*rt4 - g0*l2^2*l3^2*m2^2*m3^2*rt4 - 16*I3zz*Tau2*l2*m2^2*rt1*sin(X2) - 32*I3zz*Tau2*l2*m3^2*rt1*sin(X2) + 16*I3zz*Tau3*l2*m2^2*rt1*sin(X2) + 32*I3zz*Tau3*l2*m3^2*rt1*sin(X2) + 16*I3zz*Tau2*l2*m2^2*rt4*sin(X2) + 32*I3zz*Tau2*l2*m3^2*rt4*sin(X2) - 16*I3zz*Tau3*l2*m2^2*rt4*sin(X2) - 32*I3zz*Tau3*l2*m3^2*rt4*sin(X2) + 32*CoM3y*I2zz*I3zz*g0*m1*m2 + 32*CoM3y*I2zz*I3zz*g0*m1*m3 + 8*I3zz*g0*l2^2*m1*m2^2*rt1 + 8*I3zz*g0*l2^2*m1^2*m2*rt1 + 8*I2zz*g0*l3^2*m1*m3^2*rt1 + 8*I2zz*g0*l3^2*m1^2*m3*rt1 + 32*I3zz*g0*l2^2*m1*m3^2*rt1 + 32*I3zz*g0*l2^2*m1^2*m3*rt1 + 8*I2zz*g0*l3^2*m2*m3^2*rt1 + 8*I2zz*g0*l3^2*m2^2*m3*rt1 + 8*I3zz*g0*l2^2*m2*m3^2*rt1 + 8*I3zz*g0*l2^2*m2^2*m3*rt1 - 8*I3zz*g0*l2^2*m1*m2^2*rt4 - 8*I3zz*g0*l2^2*m1^2*m2*rt4 - 8*I2zz*g0*l3^2*m1*m3^2*rt4 - 8*I2zz*g0*l3^2*m1^2*m3*rt4 - 32*I3zz*g0*l2^2*m1*m3^2*rt4 - 32*I3zz*g0*l2^2*m1^2*m3*rt4 - 8*I2zz*g0*l3^2*m2*m3^2*rt4 - 8*I2zz*g0*l3^2*m2^2*m3*rt4 - 8*I3zz*g0*l2^2*m2*m3^2*rt4 - 8*I3zz*g0*l2^2*m2^2*m3*rt4 - 2*Tau2*l2^2*l3^2*m1*m2*m3 + 4*Tau2*l2^2*l3^2*m1*m3^2*cos(2*X3) + 2*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2) + Tau2*l2^2*l3^2*m2^2*m3*cos(2*X2) + 2*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X3) + 64*I2zz*I3zz*g0*m1*m2*rt1 + 64*I2zz*I3zz*g0*m1*m3*rt1 + 64*I2zz*I3zz*g0*m2*m3*rt1 - 64*I2zz*I3zz*g0*m1*m2*rt4 - 64*I2zz*I3zz*g0*m1*m3*rt4 - 64*I2zz*I3zz*g0*m2*m3*rt4 - Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) + 16*I3zz*Tau2*l2^2*m2*m3*cos(2*X2) + 4*CoM3x*Tau1*l2^2*l3^2*m1*m3^2 + 8*CoM3x*I3zz*Tau1*l2^2*m1*m2 + 8*CoM3x*I2zz*Tau1*l3^2*m1*m3 + 32*CoM3x*I3zz*Tau1*l2^2*m1*m3 + 4*Tau1*hb*l2^2*l3^2*m1*m3^2 + 3*Tau1*hb*l2^2*l3^2*m2*m3^2 + Tau1*hb*l2^2*l3^2*m2^2*m3 + 4*Tau1*ht*l2^2*l3^2*m1*m3^2 + 3*Tau1*ht*l2^2*l3^2*m2*m3^2 + Tau1*ht*l2^2*l3^2*m2^2*m3 + 4*Tau1*l2^2*l3^2*m1*m3^2*rw + 3*Tau1*l2^2*l3^2*m2*m3^2*rw + Tau1*l2^2*l3^2*m2^2*m3*rw + 2*Tau1*l2^2*l3^2*m1*m2*m3*rw - 4*Tau1*hb*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X2) - Tau1*hb*l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X3) - 4*Tau1*ht*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X2) - Tau1*ht*l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X3) - 16*I2zz*I3zz*X5^2*l2*m2^2*rt1*cos(X2) - 32*I2zz*I3zz*X5^2*l2*m3^2*rt1*cos(X2) + 16*I2zz*I3zz*X5^2*l2*m2^2*rt4*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m3^2*rt4*cos(X2) - 4*Tau1*l2^2*l3^2*m1*m3^2*rw*cos(2*X3) - 2*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X2) - Tau1*l2^2*l3^2*m2^2*m3*rw*cos(2*X2) - 2*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X3) - 8*Tau3*l2^2*l3*m1*m3^2*rt1*sin(X2 + X3) + 2*Tau3*l2^2*l3*m2^2*m3*rt1*sin(X2 + X3) + 8*Tau3*l2^2*l3*m1*m3^2*rt4*sin(X2 + X3) - 2*Tau3*l2^2*l3*m2^2*m3*rt4*sin(X2 + X3) + Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) + Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 2*Tau1*l2^2*l3^2*m2*m3^2*rt1*sin(2*X2) - Tau1*l2^2*l3^2*m2^2*m3*rt1*sin(2*X2) + 2*Tau1*l2^2*l3^2*m2*m3^2*rt4*sin(2*X2) + Tau1*l2^2*l3^2*m2^2*m3*rt4*sin(2*X2) + 4*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2) - 4*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2) - 16*I3zz*Tau1*hb*l2^2*m2*m3*cos(2*X2) - 16*I3zz*Tau1*ht*l2^2*m2*m3*cos(2*X2) + Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X2 + 2*X3) - 4*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*sin(X2 + X3) - 4*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*sin(X2 + X3) + (X5^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3))/2 + (X6^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3))/2 - (X5^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3))/2 - (X6^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3))/2 - 16*I3zz*Tau1*l2^2*m2*m3*rw*cos(2*X2) - 16*I2zz*Tau3*l3*m1*m3*rt1*sin(X2 + X3) - 16*I2zz*Tau3*l3*m2*m3*rt1*sin(X2 + X3) + 16*I2zz*Tau3*l3*m1*m3*rt4*sin(X2 + X3) + 16*I2zz*Tau3*l3*m2*m3*rt4*sin(X2 + X3) + Tau1*l2^2*l3^2*m2*m3^2*rt1*sin(2*X2 + 2*X3) - Tau1*l2^2*l3^2*m2*m3^2*rt4*sin(2*X2 + 2*X3) - 4*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) - 8*CoM3x*Tau3*l2^2*l3*m1*m3^2*cos(X2 - X3) + 4*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) - 16*I3zz*Tau1*l2^2*m2*m3*rt1*sin(2*X2) + 16*I3zz*Tau1*l2^2*m2*m3*rt4*sin(2*X2) + 16*CoM3x*I3zz*Tau2*l2*m1*m2*cos(X2) + 32*CoM3x*I3zz*Tau2*l2*m1*m3*cos(X2) - 16*CoM3x*I3zz*Tau3*l2*m1*m2*cos(X2) - 32*CoM3x*I3zz*Tau3*l2*m1*m3*cos(X2) + 3*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 + CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 + 2*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 - 4*I2zz*X5^2*l3^3*m1*m3^2*rt1*cos(X2 + X3) - 4*I2zz*X5^2*l3^3*m2*m3^2*rt1*cos(X2 + X3) - 4*I2zz*X6^2*l3^3*m1*m3^2*rt1*cos(X2 + X3) - 4*I2zz*X6^2*l3^3*m2*m3^2*rt1*cos(X2 + X3) + 4*I2zz*X5^2*l3^3*m1*m3^2*rt4*cos(X2 + X3) + 4*I2zz*X5^2*l3^3*m2*m3^2*rt4*cos(X2 + X3) + 4*I2zz*X6^2*l3^3*m1*m3^2*rt4*cos(X2 + X3) + 4*I2zz*X6^2*l3^3*m2*m3^2*rt4*cos(X2 + X3) - 4*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) - 4*Tau2*l2*l3^2*m1*m3^2*rt1*sin(X2) - 6*Tau2*l2*l3^2*m2*m3^2*rt1*sin(X2) - 4*Tau2*l2*l3^2*m2^2*m3*rt1*sin(X2) + 4*Tau3*l2*l3^2*m1*m3^2*rt1*sin(X2) + 6*Tau3*l2*l3^2*m2*m3^2*rt1*sin(X2) + 4*Tau3*l2*l3^2*m2^2*m3*rt1*sin(X2) + 4*Tau2*l2*l3^2*m1*m3^2*rt4*sin(X2) + 6*Tau2*l2*l3^2*m2*m3^2*rt4*sin(X2) + 4*Tau2*l2*l3^2*m2^2*m3*rt4*sin(X2) - 4*Tau3*l2*l3^2*m1*m3^2*rt4*sin(X2) - 6*Tau3*l2*l3^2*m2*m3^2*rt4*sin(X2) - 4*Tau3*l2*l3^2*m2^2*m3*rt4*sin(X2) + 8*CoM3y*I2zz*g0*l3^2*m1*m2*m3 + 24*CoM3y*I3zz*g0*l2^2*m1*m2*m3 - 4*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*X2) - 16*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*X2) - 4*CoM3x*I3zz*X5^2*l2^3*m1*m2^2*sin(X2) - 32*CoM3x*I3zz*X5^2*l2^3*m1*m3^2*sin(X2) - (X5^2*l2^3*l3^2*m2^2*m3^2*rt1*cos(X2))/2 + (X5^2*l2^3*l3^2*m2^2*m3^2*rt4*cos(X2))/2 + 6*g0*l2^2*l3^2*m1*m2*m3^2*rt1 + 2*g0*l2^2*l3^2*m1*m2^2*m3*rt1 + 2*g0*l2^2*l3^2*m1^2*m2*m3*rt1 - 6*g0*l2^2*l3^2*m1*m2*m3^2*rt4 - 2*g0*l2^2*l3^2*m1*m2^2*m3*rt4 - 2*g0*l2^2*l3^2*m1^2*m2*m3*rt4 + 4*Tau2*l2*l3^2*m1*m3^2*rt1*sin(X2 + 2*X3) + 8*Tau3*l2^2*l3*m1*m3^2*rt1*sin(X2 - X3) + 2*Tau2*l2*l3^2*m2*m3^2*rt1*sin(X2 + 2*X3) - 4*Tau3*l2*l3^2*m1*m3^2*rt1*sin(X2 + 2*X3) + 4*Tau3*l2^2*l3*m2*m3^2*rt1*sin(X2 - X3) + 2*Tau3*l2^2*l3*m2^2*m3*rt1*sin(X2 - X3) - 2*Tau3*l2*l3^2*m2*m3^2*rt1*sin(X2 + 2*X3) - 4*Tau2*l2*l3^2*m1*m3^2*rt4*sin(X2 + 2*X3) - 8*Tau3*l2^2*l3*m1*m3^2*rt4*sin(X2 - X3) - 2*Tau2*l2*l3^2*m2*m3^2*rt4*sin(X2 + 2*X3) + 4*Tau3*l2*l3^2*m1*m3^2*rt4*sin(X2 + 2*X3) - 4*Tau3*l2^2*l3*m2*m3^2*rt4*sin(X2 - X3) - 2*Tau3*l2^2*l3*m2^2*m3*rt4*sin(X2 - X3) + 2*Tau3*l2*l3^2*m2*m3^2*rt4*sin(X2 + 2*X3) - 16*I3zz*Tau2*l2*m1*m2*rt1*sin(X2) - 32*I3zz*Tau2*l2*m1*m3*rt1*sin(X2) + 16*I3zz*Tau3*l2*m1*m2*rt1*sin(X2) - 48*I3zz*Tau2*l2*m2*m3*rt1*sin(X2) + 32*I3zz*Tau3*l2*m1*m3*rt1*sin(X2) + 16*I3zz*Tau2*l2*m1*m2*rt4*sin(X2) + 48*I3zz*Tau3*l2*m2*m3*rt1*sin(X2) + 32*I3zz*Tau2*l2*m1*m3*rt4*sin(X2) - 16*I3zz*Tau3*l2*m1*m2*rt4*sin(X2) + 48*I3zz*Tau2*l2*m2*m3*rt4*sin(X2) - 32*I3zz*Tau3*l2*m1*m3*rt4*sin(X2) - 48*I3zz*Tau3*l2*m2*m3*rt4*sin(X2) + 4*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*X2) + 16*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*X2) - 4*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*X3) - g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*X3) + 4*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*X3) + g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*X3) - 4*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*X2 + 2*X3) - (X5^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3))/2 + (X5^2*l2^3*l3^2*m2^2*m3^2*rt1*cos(X2 + 2*X3))/2 - (X6^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3))/2 + (X5^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3))/2 - (X5^2*l2^3*l3^2*m2^2*m3^2*rt4*cos(X2 + 2*X3))/2 + (X6^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3))/2 - 4*I3zz*X5^2*l2^3*m1*m2^2*rt1*cos(X2) - 32*I3zz*X5^2*l2^3*m1*m3^2*rt1*cos(X2) - 8*I3zz*X5^2*l2^3*m2*m3^2*rt1*cos(X2) - 4*I3zz*X5^2*l2^3*m2^2*m3*rt1*cos(X2) + 4*I3zz*X5^2*l2^3*m1*m2^2*rt4*cos(X2) + 32*I3zz*X5^2*l2^3*m1*m3^2*rt4*cos(X2) + 8*I3zz*X5^2*l2^3*m2*m3^2*rt4*cos(X2) + 4*I3zz*X5^2*l2^3*m2^2*m3*rt4*cos(X2) + 16*I2zz*g0*l3^2*m1*m2*m3*rt1 + 48*I3zz*g0*l2^2*m1*m2*m3*rt1 - 16*I2zz*g0*l3^2*m1*m2*m3*rt4 - 48*I3zz*g0*l2^2*m1*m2*m3*rt4 + 4*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*X2 + 2*X3) - 16*I2zz*I3zz*X5^2*l3*m3^2*rt1*cos(X2 + X3) - 16*I2zz*I3zz*X6^2*l3*m3^2*rt1*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m3^2*rt4*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m3^2*rt4*cos(X2 + X3) + 2*CoM3x*Tau1*l2^2*l3^2*m1*m2*m3 + 8*CoM3x*Tau3*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*CoM3x*Tau1*l2^2*l3^2*m1*m3^2*cos(2*X3) + 16*CoM3x*I2zz*Tau3*l3*m1*m3*cos(X2 + X3) + 2*Tau1*hb*l2^2*l3^2*m1*m2*m3 + 2*Tau1*ht*l2^2*l3^2*m1*m2*m3 - 4*I2zz*X5^2*l2*l3^2*m1*m3^2*rt1*cos(X2 + 2*X3) - 8*I3zz*X5^2*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) - 2*I2zz*X5^2*l2*l3^2*m2*m3^2*rt1*cos(X2 + 2*X3) - 4*I3zz*X5^2*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) - 2*I3zz*X5^2*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) - 8*I3zz*X6^2*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) - 4*I3zz*X6^2*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) - 2*I3zz*X6^2*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) + 4*I2zz*X5^2*l2*l3^2*m1*m3^2*rt4*cos(X2 + 2*X3) + 8*I3zz*X5^2*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) + 2*I2zz*X5^2*l2*l3^2*m2*m3^2*rt4*cos(X2 + 2*X3) + 4*I3zz*X5^2*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) + 2*I3zz*X5^2*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) + 2*I3zz*X6^2*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) - 16*I2zz*I3zz*X5^2*l2*m1*m2*rt1*cos(X2) - 32*I2zz*I3zz*X5^2*l2*m1*m3*rt1*cos(X2) - 48*I2zz*I3zz*X5^2*l2*m2*m3*rt1*cos(X2) + 16*I2zz*I3zz*X5^2*l2*m1*m2*rt4*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m1*m3*rt4*cos(X2) + 48*I2zz*I3zz*X5^2*l2*m2*m3*rt4*cos(X2) - 8*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*sin(X2 + X3) + X5*X6*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) - X5*X6*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) + 4*CoM3x*Tau2*l2*l3^2*m1*m2*m3*cos(X2) - 4*CoM3x*Tau3*l2*l3^2*m1*m2*m3*cos(X2) - 8*I2zz*X5*X6*l3^3*m1*m3^2*rt1*cos(X2 + X3) - 8*I2zz*X5*X6*l3^3*m2*m3^2*rt1*cos(X2 + X3) + 8*I2zz*X5*X6*l3^3*m1*m3^2*rt4*cos(X2 + X3) + 8*I2zz*X5*X6*l3^3*m2*m3^2*rt4*cos(X2 + X3) - 4*CoM3x*Tau3*l2^2*l3*m1*m2*m3*cos(X2 - X3) - 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2) - CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*X2) - 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) - 3*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2) - CoM3x*X5^2*l2^3*l3^2*m1*m2^2*m3*sin(X2) - 4*Tau2*l2*l3^2*m1*m2*m3*rt1*sin(X2) + 4*Tau3*l2*l3^2*m1*m2*m3*rt1*sin(X2) + 4*Tau2*l2*l3^2*m1*m2*m3*rt4*sin(X2) - 4*Tau3*l2*l3^2*m1*m2*m3*rt4*sin(X2) + 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2) + CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*X2) + CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2 + 2*X3) - CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) + CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2 + 2*X3) - CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) - 16*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*X2) - 24*CoM3x*I3zz*X5^2*l2^3*m1*m2*m3*sin(X2) - 3*X5^2*l2^3*l3^2*m1*m2*m3^2*rt1*cos(X2) - X5^2*l2^3*l3^2*m1*m2^2*m3*rt1*cos(X2) + 3*X5^2*l2^3*l3^2*m1*m2*m3^2*rt4*cos(X2) + X5^2*l2^3*l3^2*m1*m2^2*m3*rt4*cos(X2) - X5*X6*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) + X5*X6*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) + 4*Tau3*l2^2*l3*m1*m2*m3*rt1*sin(X2 - X3) - 4*Tau3*l2^2*l3*m1*m2*m3*rt4*sin(X2 - X3) - CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2 + 2*X3) + 16*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*X2) - 4*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*X3) + 4*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*X3) - 8*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*sin(X2 + X3) - 8*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*sin(X2 + X3) - X5^2*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) + X5^2*l2^3*l3^2*m1*m2*m3^2*rt1*cos(X2 + 2*X3) - X6^2*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) + X5^2*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) - X5^2*l2^3*l3^2*m1*m2*m3^2*rt4*cos(X2 + 2*X3) + X6^2*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) - 24*I3zz*X5^2*l2^3*m1*m2*m3*rt1*cos(X2) + 24*I3zz*X5^2*l2^3*m1*m2*m3*rt4*cos(X2) - 16*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*sin(X2 + X3) - 16*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*sin(X2 + X3) - 8*I3zz*X5^2*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) + 2*I3zz*X5^2*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) - 8*I3zz*X6^2*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) + 2*I3zz*X6^2*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) + 8*I3zz*X5^2*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) - 2*I3zz*X5^2*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) + 8*I3zz*X6^2*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) - 2*I3zz*X6^2*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) - 32*I2zz*I3zz*X5*X6*l3*m3^2*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m3^2*rt4*cos(X2 + X3) - 16*I2zz*I3zz*X5^2*l3*m1*m3*rt1*cos(X2 + X3) - 16*I2zz*I3zz*X5^2*l3*m2*m3*rt1*cos(X2 + X3) - 16*I2zz*I3zz*X6^2*l3*m1*m3*rt1*cos(X2 + X3) - 16*I2zz*I3zz*X6^2*l3*m2*m3*rt1*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m1*m3*rt4*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m2*m3*rt4*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m1*m3*rt4*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m2*m3*rt4*cos(X2 + X3) - 4*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2) - 4*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 8*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*sin(X2 - X3) - 8*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*sin(X2 - X3) - 16*CoM3x*I2zz*I3zz*X5^2*l2*m1*m2*sin(X2) - 32*CoM3x*I2zz*I3zz*X5^2*l2*m1*m3*sin(X2) - 4*I2zz*X5^2*l2*l3^2*m1*m3^2*rt1*cos(X2) - 6*I2zz*X5^2*l2*l3^2*m2*m3^2*rt1*cos(X2) - 4*I2zz*X5^2*l2*l3^2*m2^2*m3*rt1*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m1*m3^2*rt4*cos(X2) + 6*I2zz*X5^2*l2*l3^2*m2*m3^2*rt4*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m2^2*m3*rt4*cos(X2) - 4*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*sin(X2 - X3) - 4*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*sin(X2 - X3) - 4*I2zz*X5^2*l2*l3^2*m1*m2*m3*rt1*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m1*m2*m3*rt4*cos(X2) - 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) - 8*I3zz*X5*X6*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) - 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) + 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) - 4*I3zz*X5^2*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) - 4*I3zz*X6^2*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) + 4*I3zz*X5^2*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) - 2*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) - 16*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*sin(X2 + X3) - 2*X5*X6*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) + 2*X5*X6*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) - 32*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*sin(X2 + X3) - 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) + 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) - 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) - 32*I2zz*I3zz*X5*X6*l3*m1*m3*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X5*X6*l3*m2*m3*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m1*m3*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m2*m3*rt4*cos(X2 + X3) - 4*CoM3x*I2zz*X5^2*l2*l3^2*m1*m2*m3*sin(X2) - 16*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*sin(X2 - X3) - 8*I3zz*X5*X6*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) - 8*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*sin(X2 - X3))/(16*I3zz*Tau2*l2*m2^2*sin(X2) - 32*I2zz*I3zz*g0*m2^2 - 32*I2zz*I3zz*g0*m3^2 - 32*I2zz*I3zz*g0*m1^2 + 32*I3zz*Tau2*l2*m3^2*sin(X2) - 16*I3zz*Tau3*l2*m2^2*sin(X2) - 32*I3zz*Tau3*l2*m3^2*sin(X2) - 8*I3zz*g0*l2^2*m1*m2^2 - 8*I3zz*g0*l2^2*m1^2*m2 - 8*I2zz*g0*l3^2*m1*m3^2 - 8*I2zz*g0*l3^2*m1^2*m3 - 32*I3zz*g0*l2^2*m1*m3^2 - 32*I3zz*g0*l2^2*m1^2*m3 - 8*I2zz*g0*l3^2*m2*m3^2 - 8*I2zz*g0*l3^2*m2^2*m3 - 8*I3zz*g0*l2^2*m2*m3^2 - 8*I3zz*g0*l2^2*m2^2*m3 - 64*I2zz*I3zz*g0*m1*m2 - 64*I2zz*I3zz*g0*m1*m3 - 64*I2zz*I3zz*g0*m2*m3 + 16*I2zz*Tau3*l3*m3^2*sin(X2 + X3) + 4*I3zz*Tau1*l2^2*m2^2*sin(2*X2) + 16*I3zz*Tau1*l2^2*m3^2*sin(2*X2) + 4*I2zz*Tau1*l3^2*m3^2*sin(2*X2 + 2*X3) - 4*g0*l2^2*l3^2*m1^2*m3^2 - g0*l2^2*l3^2*m2^2*m3^2 + (X5^2*l2^3*l3^2*m2^2*m3^2*cos(X2))/2 - 6*g0*l2^2*l3^2*m1*m2*m3^2 - 2*g0*l2^2*l3^2*m1*m2^2*m3 - 2*g0*l2^2*l3^2*m1^2*m2*m3 - 4*Tau2*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 8*Tau3*l2^2*l3*m1*m3^2*sin(X2 - X3) - 2*Tau2*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 4*Tau3*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 4*Tau3*l2^2*l3*m2*m3^2*sin(X2 - X3) - 2*Tau3*l2^2*l3*m2^2*m3*sin(X2 - X3) + 2*Tau3*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 16*I3zz*Tau2*l2*m1*m2*sin(X2) + 32*I3zz*Tau2*l2*m1*m3*sin(X2) - 16*I3zz*Tau3*l2*m1*m2*sin(X2) + 48*I3zz*Tau2*l2*m2*m3*sin(X2) - 32*I3zz*Tau3*l2*m1*m3*sin(X2) - 48*I3zz*Tau3*l2*m2*m3*sin(X2) + 4*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) + (X5^2*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 - (X5^2*l2^3*l3^2*m2^2*m3^2*cos(X2 + 2*X3))/2 + (X6^2*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 + 4*I3zz*X5^2*l2^3*m1*m2^2*cos(X2) + 32*I3zz*X5^2*l2^3*m1*m3^2*cos(X2) + 8*I3zz*X5^2*l2^3*m2*m3^2*cos(X2) + 4*I3zz*X5^2*l2^3*m2^2*m3*cos(X2) - 16*I2zz*g0*l3^2*m1*m2*m3 - 48*I3zz*g0*l2^2*m1*m2*m3 + 16*I2zz*I3zz*X5^2*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l2*m2^2*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m3^2*cos(X2) + 8*Tau3*l2^2*l3*m1*m3^2*sin(X2 + X3) - 2*Tau3*l2^2*l3*m2^2*m3*sin(X2 + X3) + 2*Tau1*l2^2*l3^2*m2*m3^2*sin(2*X2) + Tau1*l2^2*l3^2*m2^2*m3*sin(2*X2) - (X5^2*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 - (X6^2*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 + 16*I2zz*Tau3*l3*m1*m3*sin(X2 + X3) + 16*I2zz*Tau3*l3*m2*m3*sin(X2 + X3) - Tau1*l2^2*l3^2*m2*m3^2*sin(2*X2 + 2*X3) + 16*I3zz*Tau1*l2^2*m2*m3*sin(2*X2) + 4*I2zz*X5^2*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X5^2*l3^3*m2*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*l3^3*m2*m3^2*cos(X2 + X3) + 4*Tau2*l2*l3^2*m1*m3^2*sin(X2) + 6*Tau2*l2*l3^2*m2*m3^2*sin(X2) + 4*Tau2*l2*l3^2*m2^2*m3*sin(X2) - 4*Tau3*l2*l3^2*m1*m3^2*sin(X2) - 6*Tau3*l2*l3^2*m2*m3^2*sin(X2) - 4*Tau3*l2*l3^2*m2^2*m3*sin(X2) + 3*X5^2*l2^3*l3^2*m1*m2*m3^2*cos(X2) + X5^2*l2^3*l3^2*m1*m2^2*m3*cos(X2) + X5*X6*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) - 4*Tau3*l2^2*l3*m1*m2*m3*sin(X2 - X3) + 4*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - X5^2*l2^3*l3^2*m1*m2*m3^2*cos(X2 + 2*X3) + X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 24*I3zz*X5^2*l2^3*m1*m2*m3*cos(X2) + 8*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X5^2*l2^2*l3*m2^2*m3*cos(X2 + X3) + 8*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X6^2*l2^2*l3*m2^2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m2*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m2*m3*cos(X2 + X3) + 4*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(X2) + 6*I2zz*X5^2*l2*l3^2*m2*m3^2*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m2^2*m3*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 8*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X2 - X3) + 2*I2zz*X5^2*l2*l3^2*m2*m3^2*cos(X2 + 2*X3) + 4*I3zz*X5^2*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X5^2*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X6^2*l2^2*l3*m2^2*m3*cos(X2 - X3) + 16*I2zz*I3zz*X5^2*l2*m1*m2*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m1*m3*cos(X2) + 48*I2zz*I3zz*X5^2*l2*m2*m3*cos(X2) - X5*X6*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) + 8*I2zz*X5*X6*l3^3*m1*m3^2*cos(X2 + X3) + 8*I2zz*X5*X6*l3^3*m2*m3^2*cos(X2 + X3) + 4*Tau2*l2*l3^2*m1*m2*m3*sin(X2) - 4*Tau3*l2*l3^2*m1*m2*m3*sin(X2) + 2*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m2*m3*cos(X2 + X3) + 4*I2zz*X5^2*l2*l3^2*m1*m2*m3*cos(X2) + 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m2*m3^2*cos(X2 - X3) + 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*cos(X2 - X3) + 4*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X2 - X3));
% Mm1 = -(8*I3zz*Tau2*l2^2*m2^2 + 8*I2zz*Tau2*l3^2*m3^2 + 32*I3zz*Tau2*l2^2*m3^2 + 64*I2zz*I3zz*Tau2*m1 + 64*I2zz*I3zz*Tau2*m2 + 64*I2zz*I3zz*Tau2*m3 - 8*I3zz*Tau1*l2^2*m2^2*rw - 8*I2zz*Tau1*l3^2*m3^2*rw - 32*I3zz*Tau1*l2^2*m3^2*rw - 64*I2zz*I3zz*Tau1*hb*m1 - 64*I2zz*I3zz*Tau1*hb*m2 - 64*I2zz*I3zz*Tau1*hb*m3 - 64*I2zz*I3zz*Tau1*ht*m1 - 64*I2zz*I3zz*Tau1*ht*m2 - 64*I2zz*I3zz*Tau1*ht*m3 - 64*I2zz*I3zz*Tau1*m1*rw - 64*I2zz*I3zz*Tau1*m2*rw - 64*I2zz*I3zz*Tau1*m3*rw - 64*CoM3y*I2zz*I3zz*g0*m1^2 + 8*Tau2*l2^2*l3^2*m1*m3^2 + 6*Tau2*l2^2*l3^2*m2*m3^2 + 2*Tau2*l2^2*l3^2*m2^2*m3 - 32*I2zz*I3zz*db*g0*m1^2 - 32*I2zz*I3zz*db*g0*m2^2 - 32*I2zz*I3zz*db*g0*m3^2 - 64*I2zz*I3zz*g0*m1^2*rt1 - 64*I2zz*I3zz*g0*m2^2*rt1 - 64*I2zz*I3zz*g0*m3^2*rt1 + 64*I2zz*I3zz*g0*m1^2*rt4 + 64*I2zz*I3zz*g0*m2^2*rt4 + 64*I2zz*I3zz*g0*m3^2*rt4 + 16*I3zz*Tau2*l2^2*m1*m2 + 16*I2zz*Tau2*l3^2*m1*m3 + 64*I3zz*Tau2*l2^2*m1*m3 + 16*I2zz*Tau2*l3^2*m2*m3 + 48*I3zz*Tau2*l2^2*m2*m3 - 8*I3zz*Tau2*l2^2*m2^2*cos(2*X2) - 32*I3zz*Tau2*l2^2*m3^2*cos(2*X2) - 8*I2zz*Tau2*l3^2*m3^2*cos(2*X2 + 2*X3) - 64*CoM3x*I2zz*I3zz*Tau1*m1 - 8*I3zz*Tau1*hb*l2^2*m2^2 - 8*I2zz*Tau1*hb*l3^2*m3^2 - 32*I3zz*Tau1*hb*l2^2*m3^2 - 8*I3zz*Tau1*ht*l2^2*m2^2 - 8*I2zz*Tau1*ht*l3^2*m3^2 - 32*I3zz*Tau1*ht*l2^2*m3^2 - 16*I3zz*Tau1*hb*l2^2*m1*m2 - 16*I2zz*Tau1*hb*l3^2*m1*m3 - 64*I3zz*Tau1*hb*l2^2*m1*m3 - 16*I2zz*Tau1*hb*l3^2*m2*m3 - 48*I3zz*Tau1*hb*l2^2*m2*m3 - 16*I3zz*Tau1*ht*l2^2*m1*m2 - 16*I2zz*Tau1*ht*l3^2*m1*m3 - 64*I3zz*Tau1*ht*l2^2*m1*m3 - 16*I2zz*Tau1*ht*l3^2*m2*m3 - 48*I3zz*Tau1*ht*l2^2*m2*m3 - 16*I3zz*Tau1*l2^2*m1*m2*rw - 16*I2zz*Tau1*l3^2*m1*m3*rw - 64*I3zz*Tau1*l2^2*m1*m3*rw - 16*I2zz*Tau1*l3^2*m2*m3*rw - 48*I3zz*Tau1*l2^2*m2*m3*rw + 8*I3zz*Tau1*hb*l2^2*m2^2*cos(2*X2) + 32*I3zz*Tau1*hb*l2^2*m3^2*cos(2*X2) + 8*I3zz*Tau1*ht*l2^2*m2^2*cos(2*X2) + 32*I3zz*Tau1*ht*l2^2*m3^2*cos(2*X2) + 16*I2zz*Tau3*db*l3*m3^2*sin(X2 + X3) + 8*I3zz*Tau1*l2^2*m2^2*rw*cos(2*X2) + 32*I3zz*Tau1*l2^2*m3^2*rw*cos(2*X2) + 4*I3zz*Tau1*db*l2^2*m2^2*sin(2*X2) + 16*I3zz*Tau1*db*l2^2*m3^2*sin(2*X2) + 32*I2zz*Tau3*l3*m3^2*rt1*sin(X2 + X3) - 32*I2zz*Tau3*l3*m3^2*rt4*sin(X2 + X3) + 8*I2zz*Tau1*hb*l3^2*m3^2*cos(2*X2 + 2*X3) + 8*I2zz*Tau1*ht*l3^2*m3^2*cos(2*X2 + 2*X3) + 8*I3zz*Tau1*l2^2*m2^2*rt1*sin(2*X2) + 32*I3zz*Tau1*l2^2*m3^2*rt1*sin(2*X2) - 8*I3zz*Tau1*l2^2*m2^2*rt4*sin(2*X2) - 32*I3zz*Tau1*l2^2*m3^2*rt4*sin(2*X2) + 8*I2zz*Tau1*l3^2*m3^2*rw*cos(2*X2 + 2*X3) - 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 + 4*I2zz*Tau1*db*l3^2*m3^2*sin(2*X2 + 2*X3) + 8*I2zz*Tau1*l3^2*m3^2*rt1*sin(2*X2 + 2*X3) - 8*I2zz*Tau1*l3^2*m3^2*rt4*sin(2*X2 + 2*X3) - 8*CoM3y*I3zz*g0*l2^2*m1*m2^2 - 16*CoM3y*I3zz*g0*l2^2*m1^2*m2 - 8*CoM3y*I2zz*g0*l3^2*m1*m3^2 - 16*CoM3y*I2zz*g0*l3^2*m1^2*m3 - 32*CoM3y*I3zz*g0*l2^2*m1*m3^2 - 64*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m3^2 - db*g0*l2^2*l3^2*m2^2*m3^2 + 16*I3zz*Tau2*db*l2*m2^2*sin(X2) + 32*I3zz*Tau2*db*l2*m3^2*sin(X2) - 16*I3zz*Tau3*db*l2*m2^2*sin(X2) - 32*I3zz*Tau3*db*l2*m3^2*sin(X2) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt1 - 2*g0*l2^2*l3^2*m2^2*m3^2*rt1 + 8*g0*l2^2*l3^2*m1^2*m3^2*rt4 + 2*g0*l2^2*l3^2*m2^2*m3^2*rt4 + 32*I3zz*Tau2*l2*m2^2*rt1*sin(X2) + 64*I3zz*Tau2*l2*m3^2*rt1*sin(X2) - 32*I3zz*Tau3*l2*m2^2*rt1*sin(X2) - 64*I3zz*Tau3*l2*m3^2*rt1*sin(X2) - 32*I3zz*Tau2*l2*m2^2*rt4*sin(X2) - 64*I3zz*Tau2*l2*m3^2*rt4*sin(X2) + 32*I3zz*Tau3*l2*m2^2*rt4*sin(X2) + 64*I3zz*Tau3*l2*m3^2*rt4*sin(X2) - 64*CoM3y*I2zz*I3zz*g0*m1*m2 - 64*CoM3y*I2zz*I3zz*g0*m1*m3 - 8*I3zz*db*g0*l2^2*m1*m2^2 - 8*I3zz*db*g0*l2^2*m1^2*m2 - 8*I2zz*db*g0*l3^2*m1*m3^2 - 8*I2zz*db*g0*l3^2*m1^2*m3 - 32*I3zz*db*g0*l2^2*m1*m3^2 - 32*I3zz*db*g0*l2^2*m1^2*m3 - 8*I2zz*db*g0*l3^2*m2*m3^2 - 8*I2zz*db*g0*l3^2*m2^2*m3 - 8*I3zz*db*g0*l2^2*m2*m3^2 - 8*I3zz*db*g0*l2^2*m2^2*m3 - 16*I3zz*g0*l2^2*m1*m2^2*rt1 - 16*I3zz*g0*l2^2*m1^2*m2*rt1 - 16*I2zz*g0*l3^2*m1*m3^2*rt1 - 16*I2zz*g0*l3^2*m1^2*m3*rt1 - 64*I3zz*g0*l2^2*m1*m3^2*rt1 - 64*I3zz*g0*l2^2*m1^2*m3*rt1 - 16*I2zz*g0*l3^2*m2*m3^2*rt1 - 16*I2zz*g0*l3^2*m2^2*m3*rt1 - 16*I3zz*g0*l2^2*m2*m3^2*rt1 - 16*I3zz*g0*l2^2*m2^2*m3*rt1 + 16*I3zz*g0*l2^2*m1*m2^2*rt4 + 16*I3zz*g0*l2^2*m1^2*m2*rt4 + 16*I2zz*g0*l3^2*m1*m3^2*rt4 + 16*I2zz*g0*l3^2*m1^2*m3*rt4 + 64*I3zz*g0*l2^2*m1*m3^2*rt4 + 64*I3zz*g0*l2^2*m1^2*m3*rt4 + 16*I2zz*g0*l3^2*m2*m3^2*rt4 + 16*I2zz*g0*l3^2*m2^2*m3*rt4 + 16*I3zz*g0*l2^2*m2*m3^2*rt4 + 16*I3zz*g0*l2^2*m2^2*m3*rt4 + 4*Tau2*l2^2*l3^2*m1*m2*m3 - 64*I2zz*I3zz*db*g0*m1*m2 - 64*I2zz*I3zz*db*g0*m1*m3 - 64*I2zz*I3zz*db*g0*m2*m3 - 8*Tau2*l2^2*l3^2*m1*m3^2*cos(2*X3) - 4*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2) - 2*Tau2*l2^2*l3^2*m2^2*m3*cos(2*X2) - 4*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X3) - 128*I2zz*I3zz*g0*m1*m2*rt1 - 128*I2zz*I3zz*g0*m1*m3*rt1 - 128*I2zz*I3zz*g0*m2*m3*rt1 + 128*I2zz*I3zz*g0*m1*m2*rt4 + 128*I2zz*I3zz*g0*m1*m3*rt4 + 128*I2zz*I3zz*g0*m2*m3*rt4 + 2*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 32*I3zz*Tau2*l2^2*m2*m3*cos(2*X2) - 8*CoM3x*Tau1*l2^2*l3^2*m1*m3^2 - 16*CoM3x*I3zz*Tau1*l2^2*m1*m2 - 16*CoM3x*I2zz*Tau1*l3^2*m1*m3 - 64*CoM3x*I3zz*Tau1*l2^2*m1*m3 - 8*Tau1*hb*l2^2*l3^2*m1*m3^2 - 6*Tau1*hb*l2^2*l3^2*m2*m3^2 - 2*Tau1*hb*l2^2*l3^2*m2^2*m3 - 8*Tau1*ht*l2^2*l3^2*m1*m3^2 - 6*Tau1*ht*l2^2*l3^2*m2*m3^2 - 2*Tau1*ht*l2^2*l3^2*m2^2*m3 - 8*Tau1*l2^2*l3^2*m1*m3^2*rw - 6*Tau1*l2^2*l3^2*m2*m3^2*rw - 2*Tau1*l2^2*l3^2*m2^2*m3*rw + 16*I2zz*I3zz*X5^2*db*l2*m2^2*cos(X2) + 32*I2zz*I3zz*X5^2*db*l2*m3^2*cos(X2) - 4*Tau1*l2^2*l3^2*m1*m2*m3*rw + 8*Tau1*hb*l2^2*l3^2*m1*m3^2*cos(2*X3) + 4*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X2) + 2*Tau1*hb*l2^2*l3^2*m2^2*m3*cos(2*X2) + 4*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X3) + 8*Tau1*ht*l2^2*l3^2*m1*m3^2*cos(2*X3) + 4*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X2) + 2*Tau1*ht*l2^2*l3^2*m2^2*m3*cos(2*X2) + 4*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X3) + 8*Tau3*db*l2^2*l3*m1*m3^2*sin(X2 + X3) - 2*Tau3*db*l2^2*l3*m2^2*m3*sin(X2 + X3) + 32*I2zz*I3zz*X5^2*l2*m2^2*rt1*cos(X2) + 64*I2zz*I3zz*X5^2*l2*m3^2*rt1*cos(X2) - 32*I2zz*I3zz*X5^2*l2*m2^2*rt4*cos(X2) - 64*I2zz*I3zz*X5^2*l2*m3^2*rt4*cos(X2) + 8*Tau1*l2^2*l3^2*m1*m3^2*rw*cos(2*X3) + 4*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X2) + 2*Tau1*l2^2*l3^2*m2^2*m3*rw*cos(2*X2) + 4*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X3) + 2*Tau1*db*l2^2*l3^2*m2*m3^2*sin(2*X2) + Tau1*db*l2^2*l3^2*m2^2*m3*sin(2*X2) + 16*Tau3*l2^2*l3*m1*m3^2*rt1*sin(X2 + X3) - 4*Tau3*l2^2*l3*m2^2*m3*rt1*sin(X2 + X3) - 16*Tau3*l2^2*l3*m1*m3^2*rt4*sin(X2 + X3) + 4*Tau3*l2^2*l3*m2^2*m3*rt4*sin(X2 + X3) - (X5^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 - (X6^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 - 2*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 2*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) + 4*Tau1*l2^2*l3^2*m2*m3^2*rt1*sin(2*X2) + 2*Tau1*l2^2*l3^2*m2^2*m3*rt1*sin(2*X2) - 4*Tau1*l2^2*l3^2*m2*m3^2*rt4*sin(2*X2) - 2*Tau1*l2^2*l3^2*m2^2*m3*rt4*sin(2*X2) - 8*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2) + 8*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2) + 32*I3zz*Tau1*hb*l2^2*m2*m3*cos(2*X2) + 32*I3zz*Tau1*ht*l2^2*m2*m3*cos(2*X2) - 2*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X2 + 2*X3) + 16*I2zz*Tau3*db*l3*m1*m3*sin(X2 + X3) + 16*I2zz*Tau3*db*l3*m2*m3*sin(X2 + X3) - Tau1*db*l2^2*l3^2*m2*m3^2*sin(2*X2 + 2*X3) + 8*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*sin(X2 + X3) + 8*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*sin(X2 + X3) - X5^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) - X6^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) + X5^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) + X6^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) + 32*I3zz*Tau1*l2^2*m2*m3*rw*cos(2*X2) + 16*I3zz*Tau1*db*l2^2*m2*m3*sin(2*X2) + 32*I2zz*Tau3*l3*m1*m3*rt1*sin(X2 + X3) + 32*I2zz*Tau3*l3*m2*m3*rt1*sin(X2 + X3) - 32*I2zz*Tau3*l3*m1*m3*rt4*sin(X2 + X3) - 32*I2zz*Tau3*l3*m2*m3*rt4*sin(X2 + X3) - 2*Tau1*l2^2*l3^2*m2*m3^2*rt1*sin(2*X2 + 2*X3) + 2*Tau1*l2^2*l3^2*m2*m3^2*rt4*sin(2*X2 + 2*X3) + 8*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 16*CoM3x*Tau3*l2^2*l3*m1*m3^2*cos(X2 - X3) - 8*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 4*I2zz*X5^2*db*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X5^2*db*l3^3*m2*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*db*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*db*l3^3*m2*m3^2*cos(X2 + X3) + 32*I3zz*Tau1*l2^2*m2*m3*rt1*sin(2*X2) - 32*I3zz*Tau1*l2^2*m2*m3*rt4*sin(2*X2) - 32*CoM3x*I3zz*Tau2*l2*m1*m2*cos(X2) - 64*CoM3x*I3zz*Tau2*l2*m1*m3*cos(X2) + 32*CoM3x*I3zz*Tau3*l2*m1*m2*cos(X2) + 64*CoM3x*I3zz*Tau3*l2*m1*m3*cos(X2) - 6*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 - 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 - 4*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 8*I2zz*X5^2*l3^3*m1*m3^2*rt1*cos(X2 + X3) + 8*I2zz*X5^2*l3^3*m2*m3^2*rt1*cos(X2 + X3) + 8*I2zz*X6^2*l3^3*m1*m3^2*rt1*cos(X2 + X3) + 8*I2zz*X6^2*l3^3*m2*m3^2*rt1*cos(X2 + X3) - 8*I2zz*X5^2*l3^3*m1*m3^2*rt4*cos(X2 + X3) - 8*I2zz*X5^2*l3^3*m2*m3^2*rt4*cos(X2 + X3) - 8*I2zz*X6^2*l3^3*m1*m3^2*rt4*cos(X2 + X3) - 8*I2zz*X6^2*l3^3*m2*m3^2*rt4*cos(X2 + X3) + 4*Tau2*db*l2*l3^2*m1*m3^2*sin(X2) + 6*Tau2*db*l2*l3^2*m2*m3^2*sin(X2) + 4*Tau2*db*l2*l3^2*m2^2*m3*sin(X2) - 4*Tau3*db*l2*l3^2*m1*m3^2*sin(X2) - 6*Tau3*db*l2*l3^2*m2*m3^2*sin(X2) - 4*Tau3*db*l2*l3^2*m2^2*m3*sin(X2) + 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + 8*Tau2*l2*l3^2*m1*m3^2*rt1*sin(X2) + 12*Tau2*l2*l3^2*m2*m3^2*rt1*sin(X2) + 8*Tau2*l2*l3^2*m2^2*m3*rt1*sin(X2) - 8*Tau3*l2*l3^2*m1*m3^2*rt1*sin(X2) - 12*Tau3*l2*l3^2*m2*m3^2*rt1*sin(X2) - 8*Tau3*l2*l3^2*m2^2*m3*rt1*sin(X2) - 8*Tau2*l2*l3^2*m1*m3^2*rt4*sin(X2) - 12*Tau2*l2*l3^2*m2*m3^2*rt4*sin(X2) - 8*Tau2*l2*l3^2*m2^2*m3*rt4*sin(X2) + 8*Tau3*l2*l3^2*m1*m3^2*rt4*sin(X2) + 12*Tau3*l2*l3^2*m2*m3^2*rt4*sin(X2) + 8*Tau3*l2*l3^2*m2^2*m3*rt4*sin(X2) - 16*CoM3y*I2zz*g0*l3^2*m1*m2*m3 - 48*CoM3y*I3zz*g0*l2^2*m1*m2*m3 + (X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(X2))/2 - 6*db*g0*l2^2*l3^2*m1*m2*m3^2 - 2*db*g0*l2^2*l3^2*m1*m2^2*m3 - 2*db*g0*l2^2*l3^2*m1^2*m2*m3 - 4*Tau2*db*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 8*Tau3*db*l2^2*l3*m1*m3^2*sin(X2 - X3) - 2*Tau2*db*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 4*Tau3*db*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 4*Tau3*db*l2^2*l3*m2*m3^2*sin(X2 - X3) - 2*Tau3*db*l2^2*l3*m2^2*m3*sin(X2 - X3) + 2*Tau3*db*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 16*I3zz*Tau2*db*l2*m1*m2*sin(X2) + 32*I3zz*Tau2*db*l2*m1*m3*sin(X2) - 16*I3zz*Tau3*db*l2*m1*m2*sin(X2) + 48*I3zz*Tau2*db*l2*m2*m3*sin(X2) - 32*I3zz*Tau3*db*l2*m1*m3*sin(X2) - 48*I3zz*Tau3*db*l2*m2*m3*sin(X2) + 8*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*X2) + 32*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*X2) + 8*CoM3x*I3zz*X5^2*l2^3*m1*m2^2*sin(X2) + 64*CoM3x*I3zz*X5^2*l2^3*m1*m3^2*sin(X2) + X5^2*l2^3*l3^2*m2^2*m3^2*rt1*cos(X2) - X5^2*l2^3*l3^2*m2^2*m3^2*rt4*cos(X2) + 4*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) - 12*g0*l2^2*l3^2*m1*m2*m3^2*rt1 - 4*g0*l2^2*l3^2*m1*m2^2*m3*rt1 - 4*g0*l2^2*l3^2*m1^2*m2*m3*rt1 + 12*g0*l2^2*l3^2*m1*m2*m3^2*rt4 + 4*g0*l2^2*l3^2*m1*m2^2*m3*rt4 + 4*g0*l2^2*l3^2*m1^2*m2*m3*rt4 - 8*Tau2*l2*l3^2*m1*m3^2*rt1*sin(X2 + 2*X3) - 16*Tau3*l2^2*l3*m1*m3^2*rt1*sin(X2 - X3) - 4*Tau2*l2*l3^2*m2*m3^2*rt1*sin(X2 + 2*X3) + 8*Tau3*l2*l3^2*m1*m3^2*rt1*sin(X2 + 2*X3) - 8*Tau3*l2^2*l3*m2*m3^2*rt1*sin(X2 - X3) - 4*Tau3*l2^2*l3*m2^2*m3*rt1*sin(X2 - X3) + 4*Tau3*l2*l3^2*m2*m3^2*rt1*sin(X2 + 2*X3) + 8*Tau2*l2*l3^2*m1*m3^2*rt4*sin(X2 + 2*X3) + 16*Tau3*l2^2*l3*m1*m3^2*rt4*sin(X2 - X3) + 4*Tau2*l2*l3^2*m2*m3^2*rt4*sin(X2 + 2*X3) - 8*Tau3*l2*l3^2*m1*m3^2*rt4*sin(X2 + 2*X3) + 8*Tau3*l2^2*l3*m2*m3^2*rt4*sin(X2 - X3) + 4*Tau3*l2^2*l3*m2^2*m3*rt4*sin(X2 - X3) - 4*Tau3*l2*l3^2*m2*m3^2*rt4*sin(X2 + 2*X3) + (X5^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 - (X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(X2 + 2*X3))/2 + (X6^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 + 32*I3zz*Tau2*l2*m1*m2*rt1*sin(X2) + 64*I3zz*Tau2*l2*m1*m3*rt1*sin(X2) - 32*I3zz*Tau3*l2*m1*m2*rt1*sin(X2) + 96*I3zz*Tau2*l2*m2*m3*rt1*sin(X2) - 64*I3zz*Tau3*l2*m1*m3*rt1*sin(X2) - 32*I3zz*Tau2*l2*m1*m2*rt4*sin(X2) - 96*I3zz*Tau3*l2*m2*m3*rt1*sin(X2) - 64*I3zz*Tau2*l2*m1*m3*rt4*sin(X2) + 32*I3zz*Tau3*l2*m1*m2*rt4*sin(X2) - 96*I3zz*Tau2*l2*m2*m3*rt4*sin(X2) + 64*I3zz*Tau3*l2*m1*m3*rt4*sin(X2) + 96*I3zz*Tau3*l2*m2*m3*rt4*sin(X2) - 8*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*X2) - 32*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*X2) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*X3) + 2*g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*X3) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*X3) - 2*g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*X3) + 4*I3zz*X5^2*db*l2^3*m1*m2^2*cos(X2) + 32*I3zz*X5^2*db*l2^3*m1*m3^2*cos(X2) + 8*I3zz*X5^2*db*l2^3*m2*m3^2*cos(X2) + 4*I3zz*X5^2*db*l2^3*m2^2*m3*cos(X2) - 16*I2zz*db*g0*l3^2*m1*m2*m3 - 48*I3zz*db*g0*l2^2*m1*m2*m3 + 8*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*X2 + 2*X3) + X5^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) - X5^2*l2^3*l3^2*m2^2*m3^2*rt1*cos(X2 + 2*X3) + X6^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) - X5^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) + X5^2*l2^3*l3^2*m2^2*m3^2*rt4*cos(X2 + 2*X3) - X6^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) + 8*I3zz*X5^2*l2^3*m1*m2^2*rt1*cos(X2) + 64*I3zz*X5^2*l2^3*m1*m3^2*rt1*cos(X2) + 16*I3zz*X5^2*l2^3*m2*m3^2*rt1*cos(X2) + 8*I3zz*X5^2*l2^3*m2^2*m3*rt1*cos(X2) - 8*I3zz*X5^2*l2^3*m1*m2^2*rt4*cos(X2) - 64*I3zz*X5^2*l2^3*m1*m3^2*rt4*cos(X2) - 16*I3zz*X5^2*l2^3*m2*m3^2*rt4*cos(X2) - 8*I3zz*X5^2*l2^3*m2^2*m3*rt4*cos(X2) - 32*I2zz*g0*l3^2*m1*m2*m3*rt1 - 96*I3zz*g0*l2^2*m1*m2*m3*rt1 + 32*I2zz*g0*l3^2*m1*m2*m3*rt4 + 96*I3zz*g0*l2^2*m1*m2*m3*rt4 - 8*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*X2 + 2*X3) + 16*I2zz*I3zz*X5^2*db*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*db*l3*m3^2*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m3^2*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m3^2*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l3*m3^2*rt4*cos(X2 + X3) - 32*I2zz*I3zz*X6^2*l3*m3^2*rt4*cos(X2 + X3) - 4*CoM3x*Tau1*l2^2*l3^2*m1*m2*m3 - 16*CoM3x*Tau3*l2^2*l3*m1*m3^2*cos(X2 + X3) + 8*CoM3x*Tau1*l2^2*l3^2*m1*m3^2*cos(2*X3) - 32*CoM3x*I2zz*Tau3*l3*m1*m3*cos(X2 + X3) - 4*Tau1*hb*l2^2*l3^2*m1*m2*m3 - 4*Tau1*ht*l2^2*l3^2*m1*m2*m3 + 4*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 8*I3zz*X5^2*db*l2^2*l3*m1*m3^2*cos(X2 - X3) + 2*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(X2 + 2*X3) + 4*I3zz*X5^2*db*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X5^2*db*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m3^2*cos(X2 - X3) + 4*I3zz*X6^2*db*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X6^2*db*l2^2*l3*m2^2*m3*cos(X2 - X3) + 16*I2zz*I3zz*X5^2*db*l2*m1*m2*cos(X2) + 32*I2zz*I3zz*X5^2*db*l2*m1*m3*cos(X2) + 48*I2zz*I3zz*X5^2*db*l2*m2*m3*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt1*cos(X2 + 2*X3) + 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) + 4*I2zz*X5^2*l2*l3^2*m2*m3^2*rt1*cos(X2 + 2*X3) + 8*I3zz*X5^2*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) + 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) + 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) - 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt4*cos(X2 + 2*X3) - 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) - 4*I2zz*X5^2*l2*l3^2*m2*m3^2*rt4*cos(X2 + 2*X3) - 8*I3zz*X5^2*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) - 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) - 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) - 8*I3zz*X6^2*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) - 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) - X5*X6*db*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l2*m1*m2*rt1*cos(X2) + 64*I2zz*I3zz*X5^2*l2*m1*m3*rt1*cos(X2) + 96*I2zz*I3zz*X5^2*l2*m2*m3*rt1*cos(X2) - 32*I2zz*I3zz*X5^2*l2*m1*m2*rt4*cos(X2) - 64*I2zz*I3zz*X5^2*l2*m1*m3*rt4*cos(X2) - 96*I2zz*I3zz*X5^2*l2*m2*m3*rt4*cos(X2) + 16*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*sin(X2 + X3) - 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) + 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) - 8*CoM3x*Tau2*l2*l3^2*m1*m2*m3*cos(X2) + 8*CoM3x*Tau3*l2*l3^2*m1*m2*m3*cos(X2) + 8*I2zz*X5*X6*db*l3^3*m1*m3^2*cos(X2 + X3) + 8*I2zz*X5*X6*db*l3^3*m2*m3^2*cos(X2 + X3) + 16*I2zz*X5*X6*l3^3*m1*m3^2*rt1*cos(X2 + X3) + 16*I2zz*X5*X6*l3^3*m2*m3^2*rt1*cos(X2 + X3) - 16*I2zz*X5*X6*l3^3*m1*m3^2*rt4*cos(X2 + X3) - 16*I2zz*X5*X6*l3^3*m2*m3^2*rt4*cos(X2 + X3) + 8*CoM3x*Tau3*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 4*Tau2*db*l2*l3^2*m1*m2*m3*sin(X2) - 4*Tau3*db*l2*l3^2*m1*m2*m3*sin(X2) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2) + 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*X2) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + 6*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2) + 2*CoM3x*X5^2*l2^3*l3^2*m1*m2^2*m3*sin(X2) + 8*Tau2*l2*l3^2*m1*m2*m3*rt1*sin(X2) - 8*Tau3*l2*l3^2*m1*m2*m3*rt1*sin(X2) - 8*Tau2*l2*l3^2*m1*m2*m3*rt4*sin(X2) + 8*Tau3*l2*l3^2*m1*m2*m3*rt4*sin(X2) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2) - 2*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*X2) + 3*X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(X2) + X5^2*db*l2^3*l3^2*m1*m2^2*m3*cos(X2) + X5*X6*db*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) - 4*Tau3*db*l2^2*l3*m1*m2*m3*sin(X2 - X3) - 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2 + 2*X3) + 2*CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) - 2*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2 + 2*X3) + 2*CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) + 32*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*X2) + 48*CoM3x*I3zz*X5^2*l2^3*m1*m2*m3*sin(X2) + 6*X5^2*l2^3*l3^2*m1*m2*m3^2*rt1*cos(X2) + 2*X5^2*l2^3*l3^2*m1*m2^2*m3*rt1*cos(X2) - 6*X5^2*l2^3*l3^2*m1*m2*m3^2*rt4*cos(X2) - 2*X5^2*l2^3*l3^2*m1*m2^2*m3*rt4*cos(X2) + 4*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) - 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) - 8*Tau3*l2^2*l3*m1*m2*m3*rt1*sin(X2 - X3) + 8*Tau3*l2^2*l3*m1*m2*m3*rt4*sin(X2 - X3) + 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2 + 2*X3) + X5^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(X2 + 2*X3) + X6^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - 32*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*X2) + 8*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*X3) - 8*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*X3) + 24*I3zz*X5^2*db*l2^3*m1*m2*m3*cos(X2) + 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*sin(X2 + X3) + 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*sin(X2 + X3) + 2*X5^2*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) - 2*X5^2*l2^3*l3^2*m1*m2*m3^2*rt1*cos(X2 + 2*X3) + 2*X6^2*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) - 2*X5^2*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) + 2*X5^2*l2^3*l3^2*m1*m2*m3^2*rt4*cos(X2 + 2*X3) - 2*X6^2*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) + 48*I3zz*X5^2*l2^3*m1*m2*m3*rt1*cos(X2) - 48*I3zz*X5^2*l2^3*m1*m2*m3*rt4*cos(X2) + 8*I3zz*X5^2*db*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X5^2*db*l2^2*l3*m2^2*m3*cos(X2 + X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X6^2*db*l2^2*l3*m2^2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*db*l3*m3^2*cos(X2 + X3) + 32*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*sin(X2 + X3) + 32*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*sin(X2 + X3) + 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) - 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) + 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) - 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) - 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) + 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) - 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) + 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m3^2*rt1*cos(X2 + X3) - 64*I2zz*I3zz*X5*X6*l3*m3^2*rt4*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*db*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*db*l3*m2*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*db*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*db*l3*m2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m1*m3*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m2*m3*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m1*m3*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m2*m3*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l3*m1*m3*rt4*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l3*m2*m3*rt4*cos(X2 + X3) - 32*I2zz*I3zz*X6^2*l3*m1*m3*rt4*cos(X2 + X3) - 32*I2zz*I3zz*X6^2*l3*m2*m3*rt4*cos(X2 + X3) + 8*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2) + 4*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(X2) + 6*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(X2) + 4*I2zz*X5^2*db*l2*l3^2*m2^2*m3*cos(X2) + 8*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) + 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*sin(X2 - X3) + 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*sin(X2 - X3) + 32*CoM3x*I2zz*I3zz*X5^2*l2*m1*m2*sin(X2) + 64*CoM3x*I2zz*I3zz*X5^2*l2*m1*m3*sin(X2) + 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt1*cos(X2) + 12*I2zz*X5^2*l2*l3^2*m2*m3^2*rt1*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m2^2*m3*rt1*cos(X2) - 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt4*cos(X2) - 12*I2zz*X5^2*l2*l3^2*m2*m3^2*rt4*cos(X2) - 8*I2zz*X5^2*l2*l3^2*m2^2*m3*rt4*cos(X2) + 8*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*sin(X2 - X3) + 8*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*sin(X2 - X3) + 8*I2zz*X5^2*l2*l3^2*m1*m2*m3*rt1*cos(X2) - 8*I2zz*X5^2*l2*l3^2*m1*m2*m3*rt4*cos(X2) + 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) - 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) - 16*I3zz*X5*X6*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) - 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) + 4*I3zz*X5^2*db*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 4*I3zz*X6^2*db*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 8*I3zz*X5^2*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) - 8*I3zz*X5^2*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) - 8*I3zz*X6^2*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) + 4*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) + 2*X5*X6*db*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*sin(X2 + X3) + 4*X5*X6*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) - 4*X5*X6*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*I3zz*X5*X6*db*l2^2*l3*m2^2*m3*cos(X2 + X3) + 64*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*sin(X2 + X3) + 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) - 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) - 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) + 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*db*l3*m1*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*db*l3*m2*m3*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m1*m3*rt1*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m2*m3*rt1*cos(X2 + X3) - 64*I2zz*I3zz*X5*X6*l3*m1*m3*rt4*cos(X2 + X3) - 64*I2zz*I3zz*X5*X6*l3*m2*m3*rt4*cos(X2 + X3) + 8*CoM3x*I2zz*X5^2*l2*l3^2*m1*m2*m3*sin(X2) + 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*sin(X2 - X3) + 4*I2zz*X5^2*db*l2*l3^2*m1*m2*m3*cos(X2) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m3^2*cos(X2 - X3) + 8*I3zz*X5*X6*db*l2^2*l3*m2*m3^2*cos(X2 - X3) + 4*I3zz*X5*X6*db*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X5*X6*db*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) - 16*I3zz*X5*X6*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) + 16*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*sin(X2 - X3))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)));
% Mm2 = -(8*I3zz*Tau1*l2^2*m2^2*rw - 8*I2zz*Tau2*l3^2*m3^2 - 32*I3zz*Tau2*l2^2*m3^2 - 64*I2zz*I3zz*Tau2*m1 - 64*I2zz*I3zz*Tau2*m2 - 64*I2zz*I3zz*Tau2*m3 - 8*I3zz*Tau2*l2^2*m2^2 + 8*I2zz*Tau1*l3^2*m3^2*rw + 32*I3zz*Tau1*l2^2*m3^2*rw + 64*I2zz*I3zz*Tau1*hb*m1 + 64*I2zz*I3zz*Tau1*hb*m2 + 64*I2zz*I3zz*Tau1*hb*m3 + 64*I2zz*I3zz*Tau1*ht*m1 + 64*I2zz*I3zz*Tau1*ht*m2 + 64*I2zz*I3zz*Tau1*ht*m3 + 64*I2zz*I3zz*Tau1*m1*rw + 64*I2zz*I3zz*Tau1*m2*rw + 64*I2zz*I3zz*Tau1*m3*rw + 64*CoM3y*I2zz*I3zz*g0*m1^2 - 8*Tau2*l2^2*l3^2*m1*m3^2 - 6*Tau2*l2^2*l3^2*m2*m3^2 - 2*Tau2*l2^2*l3^2*m2^2*m3 - 32*I2zz*I3zz*db*g0*m1^2 - 32*I2zz*I3zz*db*g0*m2^2 - 32*I2zz*I3zz*db*g0*m3^2 + 64*I2zz*I3zz*g0*m1^2*rt1 + 64*I2zz*I3zz*g0*m2^2*rt1 + 64*I2zz*I3zz*g0*m3^2*rt1 - 64*I2zz*I3zz*g0*m1^2*rt4 - 64*I2zz*I3zz*g0*m2^2*rt4 - 64*I2zz*I3zz*g0*m3^2*rt4 - 16*I3zz*Tau2*l2^2*m1*m2 - 16*I2zz*Tau2*l3^2*m1*m3 - 64*I3zz*Tau2*l2^2*m1*m3 - 16*I2zz*Tau2*l3^2*m2*m3 - 48*I3zz*Tau2*l2^2*m2*m3 + 8*I3zz*Tau2*l2^2*m2^2*cos(2*X2) + 32*I3zz*Tau2*l2^2*m3^2*cos(2*X2) + 8*I2zz*Tau2*l3^2*m3^2*cos(2*X2 + 2*X3) + 64*CoM3x*I2zz*I3zz*Tau1*m1 + 8*I3zz*Tau1*hb*l2^2*m2^2 + 8*I2zz*Tau1*hb*l3^2*m3^2 + 32*I3zz*Tau1*hb*l2^2*m3^2 + 8*I3zz*Tau1*ht*l2^2*m2^2 + 8*I2zz*Tau1*ht*l3^2*m3^2 + 32*I3zz*Tau1*ht*l2^2*m3^2 + 16*I3zz*Tau1*hb*l2^2*m1*m2 + 16*I2zz*Tau1*hb*l3^2*m1*m3 + 64*I3zz*Tau1*hb*l2^2*m1*m3 + 16*I2zz*Tau1*hb*l3^2*m2*m3 + 48*I3zz*Tau1*hb*l2^2*m2*m3 + 16*I3zz*Tau1*ht*l2^2*m1*m2 + 16*I2zz*Tau1*ht*l3^2*m1*m3 + 64*I3zz*Tau1*ht*l2^2*m1*m3 + 16*I2zz*Tau1*ht*l3^2*m2*m3 + 48*I3zz*Tau1*ht*l2^2*m2*m3 + 16*I3zz*Tau1*l2^2*m1*m2*rw + 16*I2zz*Tau1*l3^2*m1*m3*rw + 64*I3zz*Tau1*l2^2*m1*m3*rw + 16*I2zz*Tau1*l3^2*m2*m3*rw + 48*I3zz*Tau1*l2^2*m2*m3*rw - 8*I3zz*Tau1*hb*l2^2*m2^2*cos(2*X2) - 32*I3zz*Tau1*hb*l2^2*m3^2*cos(2*X2) - 8*I3zz*Tau1*ht*l2^2*m2^2*cos(2*X2) - 32*I3zz*Tau1*ht*l2^2*m3^2*cos(2*X2) + 16*I2zz*Tau3*db*l3*m3^2*sin(X2 + X3) - 8*I3zz*Tau1*l2^2*m2^2*rw*cos(2*X2) - 32*I3zz*Tau1*l2^2*m3^2*rw*cos(2*X2) + 4*I3zz*Tau1*db*l2^2*m2^2*sin(2*X2) + 16*I3zz*Tau1*db*l2^2*m3^2*sin(2*X2) - 32*I2zz*Tau3*l3*m3^2*rt1*sin(X2 + X3) + 32*I2zz*Tau3*l3*m3^2*rt4*sin(X2 + X3) - 8*I2zz*Tau1*hb*l3^2*m3^2*cos(2*X2 + 2*X3) - 8*I2zz*Tau1*ht*l3^2*m3^2*cos(2*X2 + 2*X3) - 8*I3zz*Tau1*l2^2*m2^2*rt1*sin(2*X2) - 32*I3zz*Tau1*l2^2*m3^2*rt1*sin(2*X2) + 8*I3zz*Tau1*l2^2*m2^2*rt4*sin(2*X2) + 32*I3zz*Tau1*l2^2*m3^2*rt4*sin(2*X2) - 8*I2zz*Tau1*l3^2*m3^2*rw*cos(2*X2 + 2*X3) + 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 + 4*I2zz*Tau1*db*l3^2*m3^2*sin(2*X2 + 2*X3) - 8*I2zz*Tau1*l3^2*m3^2*rt1*sin(2*X2 + 2*X3) + 8*I2zz*Tau1*l3^2*m3^2*rt4*sin(2*X2 + 2*X3) + 8*CoM3y*I3zz*g0*l2^2*m1*m2^2 + 16*CoM3y*I3zz*g0*l2^2*m1^2*m2 + 8*CoM3y*I2zz*g0*l3^2*m1*m3^2 + 16*CoM3y*I2zz*g0*l3^2*m1^2*m3 + 32*CoM3y*I3zz*g0*l2^2*m1*m3^2 + 64*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m3^2 - db*g0*l2^2*l3^2*m2^2*m3^2 + 16*I3zz*Tau2*db*l2*m2^2*sin(X2) + 32*I3zz*Tau2*db*l2*m3^2*sin(X2) - 16*I3zz*Tau3*db*l2*m2^2*sin(X2) - 32*I3zz*Tau3*db*l2*m3^2*sin(X2) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt1 + 2*g0*l2^2*l3^2*m2^2*m3^2*rt1 - 8*g0*l2^2*l3^2*m1^2*m3^2*rt4 - 2*g0*l2^2*l3^2*m2^2*m3^2*rt4 - 32*I3zz*Tau2*l2*m2^2*rt1*sin(X2) - 64*I3zz*Tau2*l2*m3^2*rt1*sin(X2) + 32*I3zz*Tau3*l2*m2^2*rt1*sin(X2) + 64*I3zz*Tau3*l2*m3^2*rt1*sin(X2) + 32*I3zz*Tau2*l2*m2^2*rt4*sin(X2) + 64*I3zz*Tau2*l2*m3^2*rt4*sin(X2) - 32*I3zz*Tau3*l2*m2^2*rt4*sin(X2) - 64*I3zz*Tau3*l2*m3^2*rt4*sin(X2) + 64*CoM3y*I2zz*I3zz*g0*m1*m2 + 64*CoM3y*I2zz*I3zz*g0*m1*m3 - 8*I3zz*db*g0*l2^2*m1*m2^2 - 8*I3zz*db*g0*l2^2*m1^2*m2 - 8*I2zz*db*g0*l3^2*m1*m3^2 - 8*I2zz*db*g0*l3^2*m1^2*m3 - 32*I3zz*db*g0*l2^2*m1*m3^2 - 32*I3zz*db*g0*l2^2*m1^2*m3 - 8*I2zz*db*g0*l3^2*m2*m3^2 - 8*I2zz*db*g0*l3^2*m2^2*m3 - 8*I3zz*db*g0*l2^2*m2*m3^2 - 8*I3zz*db*g0*l2^2*m2^2*m3 + 16*I3zz*g0*l2^2*m1*m2^2*rt1 + 16*I3zz*g0*l2^2*m1^2*m2*rt1 + 16*I2zz*g0*l3^2*m1*m3^2*rt1 + 16*I2zz*g0*l3^2*m1^2*m3*rt1 + 64*I3zz*g0*l2^2*m1*m3^2*rt1 + 64*I3zz*g0*l2^2*m1^2*m3*rt1 + 16*I2zz*g0*l3^2*m2*m3^2*rt1 + 16*I2zz*g0*l3^2*m2^2*m3*rt1 + 16*I3zz*g0*l2^2*m2*m3^2*rt1 + 16*I3zz*g0*l2^2*m2^2*m3*rt1 - 16*I3zz*g0*l2^2*m1*m2^2*rt4 - 16*I3zz*g0*l2^2*m1^2*m2*rt4 - 16*I2zz*g0*l3^2*m1*m3^2*rt4 - 16*I2zz*g0*l3^2*m1^2*m3*rt4 - 64*I3zz*g0*l2^2*m1*m3^2*rt4 - 64*I3zz*g0*l2^2*m1^2*m3*rt4 - 16*I2zz*g0*l3^2*m2*m3^2*rt4 - 16*I2zz*g0*l3^2*m2^2*m3*rt4 - 16*I3zz*g0*l2^2*m2*m3^2*rt4 - 16*I3zz*g0*l2^2*m2^2*m3*rt4 - 4*Tau2*l2^2*l3^2*m1*m2*m3 - 64*I2zz*I3zz*db*g0*m1*m2 - 64*I2zz*I3zz*db*g0*m1*m3 - 64*I2zz*I3zz*db*g0*m2*m3 + 8*Tau2*l2^2*l3^2*m1*m3^2*cos(2*X3) + 4*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2) + 2*Tau2*l2^2*l3^2*m2^2*m3*cos(2*X2) + 4*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X3) + 128*I2zz*I3zz*g0*m1*m2*rt1 + 128*I2zz*I3zz*g0*m1*m3*rt1 + 128*I2zz*I3zz*g0*m2*m3*rt1 - 128*I2zz*I3zz*g0*m1*m2*rt4 - 128*I2zz*I3zz*g0*m1*m3*rt4 - 128*I2zz*I3zz*g0*m2*m3*rt4 - 2*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) + 32*I3zz*Tau2*l2^2*m2*m3*cos(2*X2) + 8*CoM3x*Tau1*l2^2*l3^2*m1*m3^2 + 16*CoM3x*I3zz*Tau1*l2^2*m1*m2 + 16*CoM3x*I2zz*Tau1*l3^2*m1*m3 + 64*CoM3x*I3zz*Tau1*l2^2*m1*m3 + 8*Tau1*hb*l2^2*l3^2*m1*m3^2 + 6*Tau1*hb*l2^2*l3^2*m2*m3^2 + 2*Tau1*hb*l2^2*l3^2*m2^2*m3 + 8*Tau1*ht*l2^2*l3^2*m1*m3^2 + 6*Tau1*ht*l2^2*l3^2*m2*m3^2 + 2*Tau1*ht*l2^2*l3^2*m2^2*m3 + 8*Tau1*l2^2*l3^2*m1*m3^2*rw + 6*Tau1*l2^2*l3^2*m2*m3^2*rw + 2*Tau1*l2^2*l3^2*m2^2*m3*rw + 16*I2zz*I3zz*X5^2*db*l2*m2^2*cos(X2) + 32*I2zz*I3zz*X5^2*db*l2*m3^2*cos(X2) + 4*Tau1*l2^2*l3^2*m1*m2*m3*rw - 8*Tau1*hb*l2^2*l3^2*m1*m3^2*cos(2*X3) - 4*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X2) - 2*Tau1*hb*l2^2*l3^2*m2^2*m3*cos(2*X2) - 4*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X3) - 8*Tau1*ht*l2^2*l3^2*m1*m3^2*cos(2*X3) - 4*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X2) - 2*Tau1*ht*l2^2*l3^2*m2^2*m3*cos(2*X2) - 4*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X3) + 8*Tau3*db*l2^2*l3*m1*m3^2*sin(X2 + X3) - 2*Tau3*db*l2^2*l3*m2^2*m3*sin(X2 + X3) - 32*I2zz*I3zz*X5^2*l2*m2^2*rt1*cos(X2) - 64*I2zz*I3zz*X5^2*l2*m3^2*rt1*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m2^2*rt4*cos(X2) + 64*I2zz*I3zz*X5^2*l2*m3^2*rt4*cos(X2) - 8*Tau1*l2^2*l3^2*m1*m3^2*rw*cos(2*X3) - 4*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X2) - 2*Tau1*l2^2*l3^2*m2^2*m3*rw*cos(2*X2) - 4*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X3) + 2*Tau1*db*l2^2*l3^2*m2*m3^2*sin(2*X2) + Tau1*db*l2^2*l3^2*m2^2*m3*sin(2*X2) - 16*Tau3*l2^2*l3*m1*m3^2*rt1*sin(X2 + X3) + 4*Tau3*l2^2*l3*m2^2*m3*rt1*sin(X2 + X3) + 16*Tau3*l2^2*l3*m1*m3^2*rt4*sin(X2 + X3) - 4*Tau3*l2^2*l3*m2^2*m3*rt4*sin(X2 + X3) - (X5^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 - (X6^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 + 2*Tau1*hb*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) + 2*Tau1*ht*l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 4*Tau1*l2^2*l3^2*m2*m3^2*rt1*sin(2*X2) - 2*Tau1*l2^2*l3^2*m2^2*m3*rt1*sin(2*X2) + 4*Tau1*l2^2*l3^2*m2*m3^2*rt4*sin(2*X2) + 2*Tau1*l2^2*l3^2*m2^2*m3*rt4*sin(2*X2) + 8*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2) - 8*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2) - 32*I3zz*Tau1*hb*l2^2*m2*m3*cos(2*X2) - 32*I3zz*Tau1*ht*l2^2*m2*m3*cos(2*X2) + 2*Tau1*l2^2*l3^2*m2*m3^2*rw*cos(2*X2 + 2*X3) + 16*I2zz*Tau3*db*l3*m1*m3*sin(X2 + X3) + 16*I2zz*Tau3*db*l3*m2*m3*sin(X2 + X3) - Tau1*db*l2^2*l3^2*m2*m3^2*sin(2*X2 + 2*X3) - 8*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*sin(X2 + X3) - 8*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*sin(X2 + X3) + X5^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) + X6^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) - X5^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) - X6^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) - 32*I3zz*Tau1*l2^2*m2*m3*rw*cos(2*X2) + 16*I3zz*Tau1*db*l2^2*m2*m3*sin(2*X2) - 32*I2zz*Tau3*l3*m1*m3*rt1*sin(X2 + X3) - 32*I2zz*Tau3*l3*m2*m3*rt1*sin(X2 + X3) + 32*I2zz*Tau3*l3*m1*m3*rt4*sin(X2 + X3) + 32*I2zz*Tau3*l3*m2*m3*rt4*sin(X2 + X3) + 2*Tau1*l2^2*l3^2*m2*m3^2*rt1*sin(2*X2 + 2*X3) - 2*Tau1*l2^2*l3^2*m2*m3^2*rt4*sin(2*X2 + 2*X3) - 8*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) - 16*CoM3x*Tau3*l2^2*l3*m1*m3^2*cos(X2 - X3) + 8*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 4*I2zz*X5^2*db*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X5^2*db*l3^3*m2*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*db*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*db*l3^3*m2*m3^2*cos(X2 + X3) - 32*I3zz*Tau1*l2^2*m2*m3*rt1*sin(2*X2) + 32*I3zz*Tau1*l2^2*m2*m3*rt4*sin(2*X2) + 32*CoM3x*I3zz*Tau2*l2*m1*m2*cos(X2) + 64*CoM3x*I3zz*Tau2*l2*m1*m3*cos(X2) - 32*CoM3x*I3zz*Tau3*l2*m1*m2*cos(X2) - 64*CoM3x*I3zz*Tau3*l2*m1*m3*cos(X2) + 6*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 + 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 + 4*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 - 8*I2zz*X5^2*l3^3*m1*m3^2*rt1*cos(X2 + X3) - 8*I2zz*X5^2*l3^3*m2*m3^2*rt1*cos(X2 + X3) - 8*I2zz*X6^2*l3^3*m1*m3^2*rt1*cos(X2 + X3) - 8*I2zz*X6^2*l3^3*m2*m3^2*rt1*cos(X2 + X3) + 8*I2zz*X5^2*l3^3*m1*m3^2*rt4*cos(X2 + X3) + 8*I2zz*X5^2*l3^3*m2*m3^2*rt4*cos(X2 + X3) + 8*I2zz*X6^2*l3^3*m1*m3^2*rt4*cos(X2 + X3) + 8*I2zz*X6^2*l3^3*m2*m3^2*rt4*cos(X2 + X3) + 4*Tau2*db*l2*l3^2*m1*m3^2*sin(X2) + 6*Tau2*db*l2*l3^2*m2*m3^2*sin(X2) + 4*Tau2*db*l2*l3^2*m2^2*m3*sin(X2) - 4*Tau3*db*l2*l3^2*m1*m3^2*sin(X2) - 6*Tau3*db*l2*l3^2*m2*m3^2*sin(X2) - 4*Tau3*db*l2*l3^2*m2^2*m3*sin(X2) - 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) - 8*Tau2*l2*l3^2*m1*m3^2*rt1*sin(X2) - 12*Tau2*l2*l3^2*m2*m3^2*rt1*sin(X2) - 8*Tau2*l2*l3^2*m2^2*m3*rt1*sin(X2) + 8*Tau3*l2*l3^2*m1*m3^2*rt1*sin(X2) + 12*Tau3*l2*l3^2*m2*m3^2*rt1*sin(X2) + 8*Tau3*l2*l3^2*m2^2*m3*rt1*sin(X2) + 8*Tau2*l2*l3^2*m1*m3^2*rt4*sin(X2) + 12*Tau2*l2*l3^2*m2*m3^2*rt4*sin(X2) + 8*Tau2*l2*l3^2*m2^2*m3*rt4*sin(X2) - 8*Tau3*l2*l3^2*m1*m3^2*rt4*sin(X2) - 12*Tau3*l2*l3^2*m2*m3^2*rt4*sin(X2) - 8*Tau3*l2*l3^2*m2^2*m3*rt4*sin(X2) + 16*CoM3y*I2zz*g0*l3^2*m1*m2*m3 + 48*CoM3y*I3zz*g0*l2^2*m1*m2*m3 + (X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(X2))/2 - 6*db*g0*l2^2*l3^2*m1*m2*m3^2 - 2*db*g0*l2^2*l3^2*m1*m2^2*m3 - 2*db*g0*l2^2*l3^2*m1^2*m2*m3 - 4*Tau2*db*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 8*Tau3*db*l2^2*l3*m1*m3^2*sin(X2 - X3) - 2*Tau2*db*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 4*Tau3*db*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 4*Tau3*db*l2^2*l3*m2*m3^2*sin(X2 - X3) - 2*Tau3*db*l2^2*l3*m2^2*m3*sin(X2 - X3) + 2*Tau3*db*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 16*I3zz*Tau2*db*l2*m1*m2*sin(X2) + 32*I3zz*Tau2*db*l2*m1*m3*sin(X2) - 16*I3zz*Tau3*db*l2*m1*m2*sin(X2) + 48*I3zz*Tau2*db*l2*m2*m3*sin(X2) - 32*I3zz*Tau3*db*l2*m1*m3*sin(X2) - 48*I3zz*Tau3*db*l2*m2*m3*sin(X2) - 8*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*X2) - 32*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*X2) - 8*CoM3x*I3zz*X5^2*l2^3*m1*m2^2*sin(X2) - 64*CoM3x*I3zz*X5^2*l2^3*m1*m3^2*sin(X2) - X5^2*l2^3*l3^2*m2^2*m3^2*rt1*cos(X2) + X5^2*l2^3*l3^2*m2^2*m3^2*rt4*cos(X2) + 4*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) + 12*g0*l2^2*l3^2*m1*m2*m3^2*rt1 + 4*g0*l2^2*l3^2*m1*m2^2*m3*rt1 + 4*g0*l2^2*l3^2*m1^2*m2*m3*rt1 - 12*g0*l2^2*l3^2*m1*m2*m3^2*rt4 - 4*g0*l2^2*l3^2*m1*m2^2*m3*rt4 - 4*g0*l2^2*l3^2*m1^2*m2*m3*rt4 + 8*Tau2*l2*l3^2*m1*m3^2*rt1*sin(X2 + 2*X3) + 16*Tau3*l2^2*l3*m1*m3^2*rt1*sin(X2 - X3) + 4*Tau2*l2*l3^2*m2*m3^2*rt1*sin(X2 + 2*X3) - 8*Tau3*l2*l3^2*m1*m3^2*rt1*sin(X2 + 2*X3) + 8*Tau3*l2^2*l3*m2*m3^2*rt1*sin(X2 - X3) + 4*Tau3*l2^2*l3*m2^2*m3*rt1*sin(X2 - X3) - 4*Tau3*l2*l3^2*m2*m3^2*rt1*sin(X2 + 2*X3) - 8*Tau2*l2*l3^2*m1*m3^2*rt4*sin(X2 + 2*X3) - 16*Tau3*l2^2*l3*m1*m3^2*rt4*sin(X2 - X3) - 4*Tau2*l2*l3^2*m2*m3^2*rt4*sin(X2 + 2*X3) + 8*Tau3*l2*l3^2*m1*m3^2*rt4*sin(X2 + 2*X3) - 8*Tau3*l2^2*l3*m2*m3^2*rt4*sin(X2 - X3) - 4*Tau3*l2^2*l3*m2^2*m3*rt4*sin(X2 - X3) + 4*Tau3*l2*l3^2*m2*m3^2*rt4*sin(X2 + 2*X3) + (X5^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 - (X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(X2 + 2*X3))/2 + (X6^2*db*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 - 32*I3zz*Tau2*l2*m1*m2*rt1*sin(X2) - 64*I3zz*Tau2*l2*m1*m3*rt1*sin(X2) + 32*I3zz*Tau3*l2*m1*m2*rt1*sin(X2) - 96*I3zz*Tau2*l2*m2*m3*rt1*sin(X2) + 64*I3zz*Tau3*l2*m1*m3*rt1*sin(X2) + 32*I3zz*Tau2*l2*m1*m2*rt4*sin(X2) + 96*I3zz*Tau3*l2*m2*m3*rt1*sin(X2) + 64*I3zz*Tau2*l2*m1*m3*rt4*sin(X2) - 32*I3zz*Tau3*l2*m1*m2*rt4*sin(X2) + 96*I3zz*Tau2*l2*m2*m3*rt4*sin(X2) - 64*I3zz*Tau3*l2*m1*m3*rt4*sin(X2) - 96*I3zz*Tau3*l2*m2*m3*rt4*sin(X2) + 8*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*X2) + 32*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*X2) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*X3) - 2*g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*X3) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*X3) + 2*g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*X3) + 4*I3zz*X5^2*db*l2^3*m1*m2^2*cos(X2) + 32*I3zz*X5^2*db*l2^3*m1*m3^2*cos(X2) + 8*I3zz*X5^2*db*l2^3*m2*m3^2*cos(X2) + 4*I3zz*X5^2*db*l2^3*m2^2*m3*cos(X2) - 16*I2zz*db*g0*l3^2*m1*m2*m3 - 48*I3zz*db*g0*l2^2*m1*m2*m3 - 8*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*X2 + 2*X3) - X5^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) + X5^2*l2^3*l3^2*m2^2*m3^2*rt1*cos(X2 + 2*X3) - X6^2*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) + X5^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) - X5^2*l2^3*l3^2*m2^2*m3^2*rt4*cos(X2 + 2*X3) + X6^2*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) - 8*I3zz*X5^2*l2^3*m1*m2^2*rt1*cos(X2) - 64*I3zz*X5^2*l2^3*m1*m3^2*rt1*cos(X2) - 16*I3zz*X5^2*l2^3*m2*m3^2*rt1*cos(X2) - 8*I3zz*X5^2*l2^3*m2^2*m3*rt1*cos(X2) + 8*I3zz*X5^2*l2^3*m1*m2^2*rt4*cos(X2) + 64*I3zz*X5^2*l2^3*m1*m3^2*rt4*cos(X2) + 16*I3zz*X5^2*l2^3*m2*m3^2*rt4*cos(X2) + 8*I3zz*X5^2*l2^3*m2^2*m3*rt4*cos(X2) + 32*I2zz*g0*l3^2*m1*m2*m3*rt1 + 96*I3zz*g0*l2^2*m1*m2*m3*rt1 - 32*I2zz*g0*l3^2*m1*m2*m3*rt4 - 96*I3zz*g0*l2^2*m1*m2*m3*rt4 + 8*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*X2 + 2*X3) + 16*I2zz*I3zz*X5^2*db*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*db*l3*m3^2*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l3*m3^2*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X6^2*l3*m3^2*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m3^2*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m3^2*rt4*cos(X2 + X3) + 4*CoM3x*Tau1*l2^2*l3^2*m1*m2*m3 + 16*CoM3x*Tau3*l2^2*l3*m1*m3^2*cos(X2 + X3) - 8*CoM3x*Tau1*l2^2*l3^2*m1*m3^2*cos(2*X3) + 32*CoM3x*I2zz*Tau3*l3*m1*m3*cos(X2 + X3) + 4*Tau1*hb*l2^2*l3^2*m1*m2*m3 + 4*Tau1*ht*l2^2*l3^2*m1*m2*m3 + 4*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 8*I3zz*X5^2*db*l2^2*l3*m1*m3^2*cos(X2 - X3) + 2*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(X2 + 2*X3) + 4*I3zz*X5^2*db*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X5^2*db*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m3^2*cos(X2 - X3) + 4*I3zz*X6^2*db*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X6^2*db*l2^2*l3*m2^2*m3*cos(X2 - X3) + 16*I2zz*I3zz*X5^2*db*l2*m1*m2*cos(X2) + 32*I2zz*I3zz*X5^2*db*l2*m1*m3*cos(X2) + 48*I2zz*I3zz*X5^2*db*l2*m2*m3*cos(X2) - 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt1*cos(X2 + 2*X3) - 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) - 4*I2zz*X5^2*l2*l3^2*m2*m3^2*rt1*cos(X2 + 2*X3) - 8*I3zz*X5^2*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) - 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) - 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) - 8*I3zz*X6^2*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) - 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) + 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt4*cos(X2 + 2*X3) + 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) + 4*I2zz*X5^2*l2*l3^2*m2*m3^2*rt4*cos(X2 + 2*X3) + 8*I3zz*X5^2*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) + 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) + 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) - X5*X6*db*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l2*m1*m2*rt1*cos(X2) - 64*I2zz*I3zz*X5^2*l2*m1*m3*rt1*cos(X2) - 96*I2zz*I3zz*X5^2*l2*m2*m3*rt1*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m1*m2*rt4*cos(X2) + 64*I2zz*I3zz*X5^2*l2*m1*m3*rt4*cos(X2) + 96*I2zz*I3zz*X5^2*l2*m2*m3*rt4*cos(X2) - 16*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*sin(X2 + X3) + 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 + X3) - 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 + X3) + 8*CoM3x*Tau2*l2*l3^2*m1*m2*m3*cos(X2) - 8*CoM3x*Tau3*l2*l3^2*m1*m2*m3*cos(X2) + 8*I2zz*X5*X6*db*l3^3*m1*m3^2*cos(X2 + X3) + 8*I2zz*X5*X6*db*l3^3*m2*m3^2*cos(X2 + X3) - 16*I2zz*X5*X6*l3^3*m1*m3^2*rt1*cos(X2 + X3) - 16*I2zz*X5*X6*l3^3*m2*m3^2*rt1*cos(X2 + X3) + 16*I2zz*X5*X6*l3^3*m1*m3^2*rt4*cos(X2 + X3) + 16*I2zz*X5*X6*l3^3*m2*m3^2*rt4*cos(X2 + X3) - 8*CoM3x*Tau3*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 4*Tau2*db*l2*l3^2*m1*m2*m3*sin(X2) - 4*Tau3*db*l2*l3^2*m1*m2*m3*sin(X2) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2) - 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*X2) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) - 6*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2) - 2*CoM3x*X5^2*l2^3*l3^2*m1*m2^2*m3*sin(X2) - 8*Tau2*l2*l3^2*m1*m2*m3*rt1*sin(X2) + 8*Tau3*l2*l3^2*m1*m2*m3*rt1*sin(X2) + 8*Tau2*l2*l3^2*m1*m2*m3*rt4*sin(X2) - 8*Tau3*l2*l3^2*m1*m2*m3*rt4*sin(X2) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2) + 2*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*X2) + 3*X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(X2) + X5^2*db*l2^3*l3^2*m1*m2^2*m3*cos(X2) + X5*X6*db*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) - 4*Tau3*db*l2^2*l3*m1*m2*m3*sin(X2 - X3) + 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2 + 2*X3) - 2*CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) + 2*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2 + 2*X3) - 2*CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) - 32*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*X2) - 48*CoM3x*I3zz*X5^2*l2^3*m1*m2*m3*sin(X2) - 6*X5^2*l2^3*l3^2*m1*m2*m3^2*rt1*cos(X2) - 2*X5^2*l2^3*l3^2*m1*m2^2*m3*rt1*cos(X2) + 6*X5^2*l2^3*l3^2*m1*m2*m3^2*rt4*cos(X2) + 2*X5^2*l2^3*l3^2*m1*m2^2*m3*rt4*cos(X2) + 4*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) - 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt1*cos(X2 - X3) + 2*X5*X6*l2^2*l3^3*m2^2*m3^2*rt4*cos(X2 - X3) + 8*Tau3*l2^2*l3*m1*m2*m3*rt1*sin(X2 - X3) - 8*Tau3*l2^2*l3*m1*m2*m3*rt4*sin(X2 - X3) - 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2 + 2*X3) + X5^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(X2 + 2*X3) + X6^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 32*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*X2) - 8*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*X3) + 8*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*X3) + 24*I3zz*X5^2*db*l2^3*m1*m2*m3*cos(X2) - 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*sin(X2 + X3) - 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*sin(X2 + X3) - 2*X5^2*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) + 2*X5^2*l2^3*l3^2*m1*m2*m3^2*rt1*cos(X2 + 2*X3) - 2*X6^2*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) + 2*X5^2*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) - 2*X5^2*l2^3*l3^2*m1*m2*m3^2*rt4*cos(X2 + 2*X3) + 2*X6^2*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) - 48*I3zz*X5^2*l2^3*m1*m2*m3*rt1*cos(X2) + 48*I3zz*X5^2*l2^3*m1*m2*m3*rt4*cos(X2) + 8*I3zz*X5^2*db*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X5^2*db*l2^2*l3*m2^2*m3*cos(X2 + X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X6^2*db*l2^2*l3*m2^2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*db*l3*m3^2*cos(X2 + X3) - 32*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*sin(X2 + X3) - 32*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*sin(X2 + X3) - 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) + 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) - 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) + 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) + 16*I3zz*X5^2*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) - 4*I3zz*X5^2*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) + 16*I3zz*X6^2*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) - 4*I3zz*X6^2*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) - 64*I2zz*I3zz*X5*X6*l3*m3^2*rt1*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m3^2*rt4*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*db*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*db*l3*m2*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*db*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*db*l3*m2*m3*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l3*m1*m3*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X5^2*l3*m2*m3*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X6^2*l3*m1*m3*rt1*cos(X2 + X3) - 32*I2zz*I3zz*X6^2*l3*m2*m3*rt1*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m1*m3*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m2*m3*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m1*m3*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m2*m3*rt4*cos(X2 + X3) - 8*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2) + 4*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(X2) + 6*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(X2) + 4*I2zz*X5^2*db*l2*l3^2*m2^2*m3*cos(X2) - 8*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*sin(X2 - X3) - 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*sin(X2 - X3) - 32*CoM3x*I2zz*I3zz*X5^2*l2*m1*m2*sin(X2) - 64*CoM3x*I2zz*I3zz*X5^2*l2*m1*m3*sin(X2) - 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt1*cos(X2) - 12*I2zz*X5^2*l2*l3^2*m2*m3^2*rt1*cos(X2) - 8*I2zz*X5^2*l2*l3^2*m2^2*m3*rt1*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m1*m3^2*rt4*cos(X2) + 12*I2zz*X5^2*l2*l3^2*m2*m3^2*rt4*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m2^2*m3*rt4*cos(X2) - 8*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*sin(X2 - X3) - 8*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*sin(X2 - X3) - 8*I2zz*X5^2*l2*l3^2*m1*m2*m3*rt1*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m1*m2*m3*rt4*cos(X2) - 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt1*cos(X2 - X3) - 16*I3zz*X5*X6*l2^2*l3*m2*m3^2*rt1*cos(X2 - X3) - 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt1*cos(X2 - X3) + 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt4*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m2*m3^2*rt4*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt4*cos(X2 - X3) + 4*I3zz*X5^2*db*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 4*I3zz*X6^2*db*l2^2*l3*m1*m2*m3*cos(X2 - X3) - 8*I3zz*X5^2*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) - 8*I3zz*X6^2*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) + 8*I3zz*X5^2*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) - 4*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*sin(X2 - X3) + 2*X5*X6*db*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*sin(X2 + X3) - 4*X5*X6*l2^2*l3^3*m1*m2*m3^2*rt1*cos(X2 - X3) + 4*X5*X6*l2^2*l3^3*m1*m2*m3^2*rt4*cos(X2 - X3) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*I3zz*X5*X6*db*l2^2*l3*m2^2*m3*cos(X2 + X3) - 64*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*sin(X2 + X3) - 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt1*cos(X2 + X3) + 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt1*cos(X2 + X3) + 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*rt4*cos(X2 + X3) - 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*rt4*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*db*l3*m1*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*db*l3*m2*m3*cos(X2 + X3) - 64*I2zz*I3zz*X5*X6*l3*m1*m3*rt1*cos(X2 + X3) - 64*I2zz*I3zz*X5*X6*l3*m2*m3*rt1*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m1*m3*rt4*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m2*m3*rt4*cos(X2 + X3) - 8*CoM3x*I2zz*X5^2*l2*l3^2*m1*m2*m3*sin(X2) - 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*sin(X2 - X3) + 4*I2zz*X5^2*db*l2*l3^2*m1*m2*m3*cos(X2) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m3^2*cos(X2 - X3) + 8*I3zz*X5*X6*db*l2^2*l3*m2*m3^2*cos(X2 - X3) + 4*I3zz*X5*X6*db*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X5*X6*db*l2^2*l3*m1*m2*m3*cos(X2 - X3) - 16*I3zz*X5*X6*l2^2*l3*m1*m2*m3*rt1*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m2*m3*rt4*cos(X2 - X3) - 16*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*sin(X2 - X3))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)));

% not shifted
% zmp = (2*(g0*m3*((l3*sin(X2 + X3))/2 + l2*sin(X2) - p_module*cos(p_angle)) - (((X5^2*l3*m3*sin(X2 + X3))/2 - Tau1 + (X6^2*l3*m3*sin(X2 + X3))/2 + (X5^2*l2*m2*sin(X2))/2 + X5^2*l2*m3*sin(X2) + X5*X6*l3*m3*sin(X2 + X3))*(32*CoM3x*I2zz*I3zz*m1 + 4*I3zz*l2^2*m2^2*p_module*sin(2*X2 - p_angle) + 16*I3zz*l2^2*m3^2*p_module*sin(2*X2 - p_angle) + 4*CoM3x*l2^2*l3^2*m1*m3^2 + 8*CoM3x*I3zz*l2^2*m1*m2 + 8*CoM3x*I2zz*l3^2*m1*m3 + 32*CoM3x*I3zz*l2^2*m1*m3 + 4*I3zz*l2^2*m2^2*p_module*sin(p_angle) + 4*I2zz*l3^2*m3^2*p_module*sin(p_angle) + 16*I3zz*l2^2*m3^2*p_module*sin(p_angle) + 32*I2zz*I3zz*m1*p_module*sin(p_angle) + 32*I2zz*I3zz*m2*p_module*sin(p_angle) + 32*I2zz*I3zz*m3*p_module*sin(p_angle) + 4*I2zz*l3^2*m3^2*p_module*sin(2*X2 + 2*X3 - p_angle) + 16*I3zz*l2^2*m2*m3*p_module*sin(2*X2 - p_angle) + 2*CoM3x*l2^2*l3^2*m1*m2*m3 + 4*l2^2*l3^2*m1*m3^2*p_module*sin(p_angle) + 3*l2^2*l3^2*m2*m3^2*p_module*sin(p_angle) + l2^2*l3^2*m2^2*m3*p_module*sin(p_angle) - 4*CoM3x*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m1*m3^2*p_module*sin(2*X3 + p_angle) - l2^2*l3^2*m2*m3^2*p_module*sin(2*X3 + p_angle) + 8*I3zz*l2^2*m1*m2*p_module*sin(p_angle) + 8*I2zz*l3^2*m1*m3*p_module*sin(p_angle) + 32*I3zz*l2^2*m1*m3*p_module*sin(p_angle) + 8*I2zz*l3^2*m2*m3*p_module*sin(p_angle) + 24*I3zz*l2^2*m2*m3*p_module*sin(p_angle) - l2^2*l3^2*m2*m3^2*p_module*sin(2*X2 + 2*X3 - p_angle) + 2*l2^2*l3^2*m1*m3^2*p_module*sin(2*X3 - p_angle) + 2*l2^2*l3^2*m2*m3^2*p_module*sin(2*X2 - p_angle) + l2^2*l3^2*m2^2*m3*p_module*sin(2*X2 - p_angle) + l2^2*l3^2*m2*m3^2*p_module*sin(2*X3 - p_angle) + 2*l2^2*l3^2*m1*m2*m3*p_module*sin(p_angle)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)) + g0*m1*(CoM3y - p_module*cos(p_angle)) + g0*m2*((l2*sin(X2))/2 - p_module*cos(p_angle)) + (((l2*l3*m3*sin(X3)*X6^2)/2 + X5*l2*l3*m3*sin(X3)*X6 + Tau2 + (g0*l3*m3*sin(X2 + X3))/2 + (g0*l2*m2*sin(X2))/2 + g0*l2*m3*sin(X2))*(4*I3zz*l2^2*m2^2*cos(2*X2) - 4*I2zz*l3^2*m3^2 - 16*I3zz*l2^2*m3^2 - 32*I2zz*I3zz*m1 - 32*I2zz*I3zz*m2 - 32*I2zz*I3zz*m3 - 4*l2^2*l3^2*m1*m3^2 - 3*l2^2*l3^2*m2*m3^2 - l2^2*l3^2*m2^2*m3 - 8*I3zz*l2^2*m1*m2 - 8*I2zz*l3^2*m1*m3 - 32*I3zz*l2^2*m1*m3 - 8*I2zz*l3^2*m2*m3 - 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2 + 16*I3zz*l2^2*m3^2*cos(2*X2) - 2*l2^2*l3^2*m1*m2*m3 + 4*l2^2*l3^2*m1*m3^2*cos(2*X3) + 2*l2^2*l3^2*m2*m3^2*cos(2*X2) + l2^2*l3^2*m2^2*m3*cos(2*X2) + 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + 16*I3zz*l2^2*m2*m3*cos(2*X2) + 4*I2zz*l3^2*m3^2*cos(2*X2)*cos(2*X3) - 4*I2zz*l3^2*m3^2*sin(2*X2)*sin(2*X3) - l2^2*l3^2*m2*m3^2*cos(2*X2)*cos(2*X3) + l2^2*l3^2*m2*m3^2*sin(2*X2)*sin(2*X3) + 4*CoM3x*l2*l3^2*m1*m3^2*cos(X2) + 16*CoM3x*I3zz*l2*m1*m2*cos(X2) + 32*CoM3x*I3zz*l2*m1*m3*cos(X2) + 16*I3zz*l2*m2^2*p_module*sin(X2)*cos(p_angle) + 32*I3zz*l2*m3^2*p_module*sin(X2)*cos(p_angle) + 4*CoM3x*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) + 4*CoM3x*l2*l3^2*m1*m2*m3*cos(X2) + 4*l2*l3^2*m1*m3^2*p_module*sin(X2)*cos(p_angle) + 6*l2*l3^2*m2*m3^2*p_module*sin(X2)*cos(p_angle) + 4*l2*l3^2*m2^2*m3*p_module*sin(X2)*cos(p_angle) - 4*CoM3x*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) + 16*I3zz*l2*m1*m2*p_module*sin(X2)*cos(p_angle) + 32*I3zz*l2*m1*m3*p_module*sin(X2)*cos(p_angle) + 48*I3zz*l2*m2*m3*p_module*sin(X2)*cos(p_angle) + 4*l2*l3^2*m1*m2*m3*p_module*sin(X2)*cos(p_angle) - 4*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 4*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) - 2*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 2*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)) - ((Tau3 + (g0*l3*m3*sin(X2 + X3))/2 - (X5^2*l2*l3*m3*sin(X3))/2)*(4*CoM3x*l2*l3^2*m1*m3^2*cos(X2) + 16*CoM3x*I3zz*l2*m1*m2*cos(X2) + 32*CoM3x*I3zz*l2*m1*m3*cos(X2) + 16*I3zz*l2*m2^2*p_module*sin(X2)*cos(p_angle) + 32*I3zz*l2*m3^2*p_module*sin(X2)*cos(p_angle) + 4*CoM3x*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) - 16*CoM3x*I2zz*l3*m1*m3*cos(X2)*cos(X3) + 16*CoM3x*l2^2*l3*m1*m3^2*sin(X2)*sin(X3) - 16*I2zz*l3*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) - 16*I2zz*l3*m3^2*p_module*cos(X3)*sin(X2)*cos(p_angle) + 16*CoM3x*I2zz*l3*m1*m3*sin(X2)*sin(X3) + 4*CoM3x*l2*l3^2*m1*m2*m3*cos(X2) + 4*l2*l3^2*m1*m3^2*p_module*sin(X2)*cos(p_angle) + 6*l2*l3^2*m2*m3^2*p_module*sin(X2)*cos(p_angle) + 4*l2*l3^2*m2^2*m3*p_module*sin(X2)*cos(p_angle) - 4*CoM3x*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) + 16*I3zz*l2*m1*m2*p_module*sin(X2)*cos(p_angle) + 32*I3zz*l2*m1*m3*p_module*sin(X2)*cos(p_angle) + 48*I3zz*l2*m2*m3*p_module*sin(X2)*cos(p_angle) + 4*CoM3x*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) - 16*l2^2*l3*m1*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) - 4*l2^2*l3*m2*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) + 4*l2^2*l3*m2*m3^2*p_module*cos(X3)*sin(X2)*cos(p_angle) + 4*l2^2*l3*m2^2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) + 4*CoM3x*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) - 16*I2zz*l3*m1*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) - 16*I2zz*l3*m1*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) - 16*I2zz*l3*m2*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) - 16*I2zz*l3*m2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) + 4*l2*l3^2*m1*m2*m3*p_module*sin(X2)*cos(p_angle) - 4*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 4*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) - 2*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 2*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) - 4*l2^2*l3*m1*m2*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) + 4*l2^2*l3*m1*m2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)) + (X6^2*l2*l3*m3*sin(X3))/2 + (X5^2*l2*m2*p_module*cos(X2 - p_angle))/2 + X5^2*l2*m3*p_module*cos(X2 - p_angle) + (X5^2*l3*m3*p_module*cos(X2 + X3 - p_angle))/2 + (X6^2*l3*m3*p_module*cos(X2 + X3 - p_angle))/2 + X5*X6*l2*l3*m3*sin(X3) + X5*X6*l3*m3*p_module*cos(X2 + X3 - p_angle))*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)))/(32*I3zz*Tau2*l2*m2^2*sin(X2) - 64*I2zz*I3zz*g0*m2^2 - 64*I2zz*I3zz*g0*m3^2 - 64*I2zz*I3zz*g0*m1^2 + 64*I3zz*Tau2*l2*m3^2*sin(X2) - 32*I3zz*Tau3*l2*m2^2*sin(X2) - 64*I3zz*Tau3*l2*m3^2*sin(X2) - 16*I3zz*g0*l2^2*m1*m2^2 - 16*I3zz*g0*l2^2*m1^2*m2 - 16*I2zz*g0*l3^2*m1*m3^2 - 16*I2zz*g0*l3^2*m1^2*m3 - 64*I3zz*g0*l2^2*m1*m3^2 - 64*I3zz*g0*l2^2*m1^2*m3 - 16*I2zz*g0*l3^2*m2*m3^2 - 16*I2zz*g0*l3^2*m2^2*m3 - 16*I3zz*g0*l2^2*m2*m3^2 - 16*I3zz*g0*l2^2*m2^2*m3 - 128*I2zz*I3zz*g0*m1*m2 - 128*I2zz*I3zz*g0*m1*m3 - 128*I2zz*I3zz*g0*m2*m3 + 32*I2zz*Tau3*l3*m3^2*sin(X2 + X3) + 8*I3zz*Tau1*l2^2*m2^2*sin(2*X2) + 32*I3zz*Tau1*l2^2*m3^2*sin(2*X2) + 8*I2zz*Tau1*l3^2*m3^2*sin(2*X2 + 2*X3) - 8*g0*l2^2*l3^2*m1^2*m3^2 - 2*g0*l2^2*l3^2*m2^2*m3^2 + X5^2*l2^3*l3^2*m2^2*m3^2*cos(X2) - 12*g0*l2^2*l3^2*m1*m2*m3^2 - 4*g0*l2^2*l3^2*m1*m2^2*m3 - 4*g0*l2^2*l3^2*m1^2*m2*m3 - 8*Tau2*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 16*Tau3*l2^2*l3*m1*m3^2*sin(X2 - X3) - 4*Tau2*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 8*Tau3*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 8*Tau3*l2^2*l3*m2*m3^2*sin(X2 - X3) - 4*Tau3*l2^2*l3*m2^2*m3*sin(X2 - X3) + 4*Tau3*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 32*I3zz*Tau2*l2*m1*m2*sin(X2) + 64*I3zz*Tau2*l2*m1*m3*sin(X2) - 32*I3zz*Tau3*l2*m1*m2*sin(X2) + 96*I3zz*Tau2*l2*m2*m3*sin(X2) - 64*I3zz*Tau3*l2*m1*m3*sin(X2) - 96*I3zz*Tau3*l2*m2*m3*sin(X2) + 8*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + 2*g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) + X5^2*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) - X5^2*l2^3*l3^2*m2^2*m3^2*cos(X2 + 2*X3) + X6^2*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) + 8*I3zz*X5^2*l2^3*m1*m2^2*cos(X2) + 64*I3zz*X5^2*l2^3*m1*m3^2*cos(X2) + 16*I3zz*X5^2*l2^3*m2*m3^2*cos(X2) + 8*I3zz*X5^2*l2^3*m2^2*m3*cos(X2) - 32*I2zz*g0*l3^2*m1*m2*m3 - 96*I3zz*g0*l2^2*m1*m2*m3 + 32*I2zz*I3zz*X5^2*l3*m3^2*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m3^2*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l2*m2^2*cos(X2) + 64*I2zz*I3zz*X5^2*l2*m3^2*cos(X2) + 16*Tau3*l2^2*l3*m1*m3^2*sin(X2 + X3) - 4*Tau3*l2^2*l3*m2^2*m3*sin(X2 + X3) + 4*Tau1*l2^2*l3^2*m2*m3^2*sin(2*X2) + 2*Tau1*l2^2*l3^2*m2^2*m3*sin(2*X2) - X5^2*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) - X6^2*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) + 32*I2zz*Tau3*l3*m1*m3*sin(X2 + X3) + 32*I2zz*Tau3*l3*m2*m3*sin(X2 + X3) - 2*Tau1*l2^2*l3^2*m2*m3^2*sin(2*X2 + 2*X3) + 32*I3zz*Tau1*l2^2*m2*m3*sin(2*X2) + 8*I2zz*X5^2*l3^3*m1*m3^2*cos(X2 + X3) + 8*I2zz*X5^2*l3^3*m2*m3^2*cos(X2 + X3) + 8*I2zz*X6^2*l3^3*m1*m3^2*cos(X2 + X3) + 8*I2zz*X6^2*l3^3*m2*m3^2*cos(X2 + X3) + 8*Tau2*l2*l3^2*m1*m3^2*sin(X2) + 12*Tau2*l2*l3^2*m2*m3^2*sin(X2) + 8*Tau2*l2*l3^2*m2^2*m3*sin(X2) - 8*Tau3*l2*l3^2*m1*m3^2*sin(X2) - 12*Tau3*l2*l3^2*m2*m3^2*sin(X2) - 8*Tau3*l2*l3^2*m2^2*m3*sin(X2) + 6*X5^2*l2^3*l3^2*m1*m2*m3^2*cos(X2) + 2*X5^2*l2^3*l3^2*m1*m2^2*m3*cos(X2) + 2*X5*X6*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) - 8*Tau3*l2^2*l3*m1*m2*m3*sin(X2 - X3) + 8*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + 2*X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - 2*X5^2*l2^3*l3^2*m1*m2*m3^2*cos(X2 + 2*X3) + 2*X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 48*I3zz*X5^2*l2^3*m1*m2*m3*cos(X2) + 16*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*I3zz*X5^2*l2^2*l3*m2^2*m3*cos(X2 + X3) + 16*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*I3zz*X6^2*l2^2*l3*m2^2*m3*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m3^2*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m1*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5^2*l3*m2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m1*m3*cos(X2 + X3) + 32*I2zz*I3zz*X6^2*l3*m2*m3*cos(X2 + X3) + 8*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(X2) + 12*I2zz*X5^2*l2*l3^2*m2*m3^2*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m2^2*m3*cos(X2) + 8*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 16*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X2 - X3) + 4*I2zz*X5^2*l2*l3^2*m2*m3^2*cos(X2 + 2*X3) + 8*I3zz*X5^2*l2^2*l3*m2*m3^2*cos(X2 - X3) + 4*I3zz*X5^2*l2^2*l3*m2^2*m3*cos(X2 - X3) + 16*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m2*m3^2*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m2^2*m3*cos(X2 - X3) + 32*I2zz*I3zz*X5^2*l2*m1*m2*cos(X2) + 64*I2zz*I3zz*X5^2*l2*m1*m3*cos(X2) + 96*I2zz*I3zz*X5^2*l2*m2*m3*cos(X2) - 2*X5*X6*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) + 16*I2zz*X5*X6*l3^3*m1*m3^2*cos(X2 + X3) + 16*I2zz*X5*X6*l3^3*m2*m3^2*cos(X2 + X3) + 8*Tau2*l2*l3^2*m1*m2*m3*sin(X2) - 8*Tau3*l2*l3^2*m1*m2*m3*sin(X2) + 4*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X2 + X3) - 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X2 + X3) + 64*I2zz*I3zz*X5*X6*l3*m2*m3*cos(X2 + X3) + 8*I2zz*X5^2*l2*l3^2*m1*m2*m3*cos(X2) + 32*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m2*m3^2*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X2 - X3));
% Mm1 = -(16*I3zz*Tau2*l2^2*m2^2 + 16*I2zz*Tau2*l3^2*m3^2 + 64*I3zz*Tau2*l2^2*m3^2 + 128*I2zz*I3zz*Tau2*m1 + 128*I2zz*I3zz*Tau2*m2 + 128*I2zz*I3zz*Tau2*m3 - 128*CoM3y*I2zz*I3zz*g0*m1^2 + 16*Tau2*l2^2*l3^2*m1*m3^2 + 12*Tau2*l2^2*l3^2*m2*m3^2 + 4*Tau2*l2^2*l3^2*m2^2*m3 - 64*I2zz*I3zz*db*g0*m1^2 - 64*I2zz*I3zz*db*g0*m2^2 - 64*I2zz*I3zz*db*g0*m3^2 + 32*I3zz*Tau2*l2^2*m1*m2 + 32*I2zz*Tau2*l3^2*m1*m3 + 128*I3zz*Tau2*l2^2*m1*m3 + 32*I2zz*Tau2*l3^2*m2*m3 + 96*I3zz*Tau2*l2^2*m2*m3 - 16*I3zz*Tau2*l2^2*m2^2*cos(2*X2) - 64*I3zz*Tau2*l2^2*m3^2*cos(2*X2) - 128*CoM3x*I2zz*I3zz*Tau1*m1 - 128*I2zz*I3zz*Tau1*m1*p_module*sin(p_angle) - 128*I2zz*I3zz*Tau1*m2*p_module*sin(p_angle) - 128*I2zz*I3zz*Tau1*m3*p_module*sin(p_angle) + 8*I3zz*Tau1*db*l2^2*m2^2*sin(2*X2) + 32*I3zz*Tau1*db*l2^2*m3^2*sin(2*X2) - 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 - 16*CoM3y*I3zz*g0*l2^2*m1*m2^2 - 32*CoM3y*I3zz*g0*l2^2*m1^2*m2 - 16*CoM3y*I2zz*g0*l3^2*m1*m3^2 - 32*CoM3y*I2zz*g0*l3^2*m1^2*m3 - 64*CoM3y*I3zz*g0*l2^2*m1*m3^2 - 128*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 8*db*g0*l2^2*l3^2*m1^2*m3^2 - 2*db*g0*l2^2*l3^2*m2^2*m3^2 + 32*I3zz*Tau2*db*l2*m2^2*sin(X2) + 64*I3zz*Tau2*db*l2*m3^2*sin(X2) - 32*I3zz*Tau3*db*l2*m2^2*sin(X2) - 64*I3zz*Tau3*db*l2*m3^2*sin(X2) + 128*I2zz*I3zz*g0*m1^2*p_module*cos(p_angle) + 128*I2zz*I3zz*g0*m2^2*p_module*cos(p_angle) + 128*I2zz*I3zz*g0*m3^2*p_module*cos(p_angle) - 128*CoM3y*I2zz*I3zz*g0*m1*m2 - 128*CoM3y*I2zz*I3zz*g0*m1*m3 - 16*I3zz*db*g0*l2^2*m1*m2^2 - 16*I3zz*db*g0*l2^2*m1^2*m2 - 16*I2zz*db*g0*l3^2*m1*m3^2 - 16*I2zz*db*g0*l3^2*m1^2*m3 - 64*I3zz*db*g0*l2^2*m1*m3^2 - 64*I3zz*db*g0*l2^2*m1^2*m3 - 16*I2zz*db*g0*l3^2*m2*m3^2 - 16*I2zz*db*g0*l3^2*m2^2*m3 - 16*I3zz*db*g0*l2^2*m2*m3^2 - 16*I3zz*db*g0*l2^2*m2^2*m3 + 8*Tau2*l2^2*l3^2*m1*m2*m3 - 128*I2zz*I3zz*db*g0*m1*m2 - 128*I2zz*I3zz*db*g0*m1*m3 - 128*I2zz*I3zz*db*g0*m2*m3 - 16*Tau2*l2^2*l3^2*m1*m3^2*cos(2*X3) - 8*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2) - 4*Tau2*l2^2*l3^2*m2^2*m3*cos(2*X2) - 8*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X3) - 64*I3zz*Tau2*l2^2*m2*m3*cos(2*X2) - 16*CoM3x*Tau1*l2^2*l3^2*m1*m3^2 - 16*I2zz*Tau2*l3^2*m3^2*cos(2*X2)*cos(2*X3) - 32*CoM3x*I3zz*Tau1*l2^2*m1*m2 - 32*CoM3x*I2zz*Tau1*l3^2*m1*m3 - 128*CoM3x*I3zz*Tau1*l2^2*m1*m3 - 16*I3zz*Tau1*l2^2*m2^2*p_module*sin(p_angle) - 16*I2zz*Tau1*l3^2*m3^2*p_module*sin(p_angle) - 64*I3zz*Tau1*l2^2*m3^2*p_module*sin(p_angle) + 16*I2zz*Tau2*l3^2*m3^2*sin(2*X2)*sin(2*X3) + 32*I2zz*I3zz*X5^2*db*l2*m2^2*cos(X2) + 64*I2zz*I3zz*X5^2*db*l2*m3^2*cos(X2) + 16*I3zz*Tau1*l2^2*m2^2*p_module*cos(2*X2)*sin(p_angle) - 16*I3zz*Tau1*l2^2*m2^2*p_module*sin(2*X2)*cos(p_angle) + 64*I3zz*Tau1*l2^2*m3^2*p_module*cos(2*X2)*sin(p_angle) - 64*I3zz*Tau1*l2^2*m3^2*p_module*sin(2*X2)*cos(p_angle) + 4*Tau1*db*l2^2*l3^2*m2*m3^2*sin(2*X2) + 2*Tau1*db*l2^2*l3^2*m2^2*m3*sin(2*X2) + 32*I2zz*Tau3*db*l3*m3^2*cos(X2)*sin(X3) + 32*I2zz*Tau3*db*l3*m3^2*cos(X3)*sin(X2) - 16*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2) + 16*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2) + 32*I3zz*Tau1*db*l2^2*m2*m3*sin(2*X2) + 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(p_angle) + 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(p_angle) + 8*I2zz*Tau1*db*l3^2*m3^2*cos(2*X2)*sin(2*X3) + 8*I2zz*Tau1*db*l3^2*m3^2*cos(2*X3)*sin(2*X2) - 64*CoM3x*I3zz*Tau2*l2*m1*m2*cos(X2) - 128*CoM3x*I3zz*Tau2*l2*m1*m3*cos(X2) + 64*CoM3x*I3zz*Tau3*l2*m1*m2*cos(X2) + 128*CoM3x*I3zz*Tau3*l2*m1*m3*cos(X2) - 64*I3zz*Tau2*l2*m2^2*p_module*sin(X2)*cos(p_angle) - 128*I3zz*Tau2*l2*m3^2*p_module*sin(X2)*cos(p_angle) + 64*I3zz*Tau3*l2*m2^2*p_module*sin(X2)*cos(p_angle) + 128*I3zz*Tau3*l2*m3^2*p_module*sin(X2)*cos(p_angle) - 12*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 - 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 - 8*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 8*Tau2*db*l2*l3^2*m1*m3^2*sin(X2) + 12*Tau2*db*l2*l3^2*m2*m3^2*sin(X2) + 8*Tau2*db*l2*l3^2*m2^2*m3*sin(X2) - 8*Tau3*db*l2*l3^2*m1*m3^2*sin(X2) - 12*Tau3*db*l2*l3^2*m2*m3^2*sin(X2) - 8*Tau3*db*l2*l3^2*m2^2*m3*sin(X2) + 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + 32*I3zz*g0*l2^2*m1*m2^2*p_module*cos(p_angle) + 32*I3zz*g0*l2^2*m1^2*m2*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m1*m3^2*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m1^2*m3*p_module*cos(p_angle) + 128*I3zz*g0*l2^2*m1*m3^2*p_module*cos(p_angle) + 128*I3zz*g0*l2^2*m1^2*m3*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m2*m3^2*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m2^2*m3*p_module*cos(p_angle) + 32*I3zz*g0*l2^2*m2*m3^2*p_module*cos(p_angle) + 32*I3zz*g0*l2^2*m2^2*m3*p_module*cos(p_angle) - 32*CoM3y*I2zz*g0*l3^2*m1*m2*m3 - 96*CoM3y*I3zz*g0*l2^2*m1*m2*m3 + X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(X2) - 12*db*g0*l2^2*l3^2*m1*m2*m3^2 - 4*db*g0*l2^2*l3^2*m1*m2^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m2*m3 + 32*I3zz*Tau2*db*l2*m1*m2*sin(X2) + 64*I3zz*Tau2*db*l2*m1*m3*sin(X2) - 32*I3zz*Tau3*db*l2*m1*m2*sin(X2) + 96*I3zz*Tau2*db*l2*m2*m3*sin(X2) - 64*I3zz*Tau3*db*l2*m1*m3*sin(X2) - 96*I3zz*Tau3*db*l2*m2*m3*sin(X2) + 16*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*X2) + 64*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*X2) + 16*CoM3x*I3zz*X5^2*l2^3*m1*m2^2*sin(X2) + 128*CoM3x*I3zz*X5^2*l2^3*m1*m3^2*sin(X2) + 8*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + 2*db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) + 256*I2zz*I3zz*g0*m1*m2*p_module*cos(p_angle) + 256*I2zz*I3zz*g0*m1*m3*p_module*cos(p_angle) + 256*I2zz*I3zz*g0*m2*m3*p_module*cos(p_angle) - 16*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*X2) - 64*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*X2) + 8*I3zz*X5^2*db*l2^3*m1*m2^2*cos(X2) + 64*I3zz*X5^2*db*l2^3*m1*m3^2*cos(X2) + 16*I3zz*X5^2*db*l2^3*m2*m3^2*cos(X2) + 8*I3zz*X5^2*db*l2^3*m2^2*m3*cos(X2) - 32*I2zz*db*g0*l3^2*m1*m2*m3 - 96*I3zz*db*g0*l2^2*m1*m2*m3 + 4*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2)*cos(2*X3) - 8*CoM3x*Tau1*l2^2*l3^2*m1*m2*m3 - 16*Tau1*l2^2*l3^2*m1*m3^2*p_module*sin(p_angle) - 12*Tau1*l2^2*l3^2*m2*m3^2*p_module*sin(p_angle) - 4*Tau1*l2^2*l3^2*m2^2*m3*p_module*sin(p_angle) - 4*Tau2*l2^2*l3^2*m2*m3^2*sin(2*X2)*sin(2*X3) + 16*CoM3x*Tau1*l2^2*l3^2*m1*m3^2*cos(2*X3) - 32*I3zz*Tau1*l2^2*m1*m2*p_module*sin(p_angle) - 32*I2zz*Tau1*l3^2*m1*m3*p_module*sin(p_angle) - 128*I3zz*Tau1*l2^2*m1*m3*p_module*sin(p_angle) - 32*I2zz*Tau1*l3^2*m2*m3*p_module*sin(p_angle) - 96*I3zz*Tau1*l2^2*m2*m3*p_module*sin(p_angle) - 64*I2zz*Tau3*l3*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) - 64*I2zz*Tau3*l3*m3^2*p_module*cos(X3)*sin(X2)*cos(p_angle) + 32*I2zz*I3zz*X5^2*db*l2*m1*m2*cos(X2) + 64*I2zz*I3zz*X5^2*db*l2*m1*m3*cos(X2) + 96*I2zz*I3zz*X5^2*db*l2*m2*m3*cos(X2) + 32*Tau3*db*l2^2*l3*m1*m3^2*cos(X2)*sin(X3) + 8*Tau3*db*l2^2*l3*m2*m3^2*cos(X2)*sin(X3) - 8*Tau3*db*l2^2*l3*m2*m3^2*cos(X3)*sin(X2) - 8*Tau3*db*l2^2*l3*m2^2*m3*cos(X3)*sin(X2) + 64*I3zz*Tau1*l2^2*m2*m3*p_module*cos(2*X2)*sin(p_angle) - 64*I3zz*Tau1*l2^2*m2*m3*p_module*sin(2*X2)*cos(p_angle) + 64*CoM3x*I2zz*Tau3*l3*m1*m3*sin(X2)*sin(X3) + 16*I2zz*Tau1*l3^2*m3^2*p_module*cos(2*X2)*cos(2*X3)*sin(p_angle) - 16*I2zz*Tau1*l3^2*m3^2*p_module*cos(2*X2)*sin(2*X3)*cos(p_angle) - 16*I2zz*Tau1*l3^2*m3^2*p_module*cos(2*X3)*sin(2*X2)*cos(p_angle) + 32*I2zz*Tau3*db*l3*m1*m3*cos(X2)*sin(X3) + 32*I2zz*Tau3*db*l3*m1*m3*cos(X3)*sin(X2) + 32*I2zz*Tau3*db*l3*m2*m3*cos(X2)*sin(X3) + 32*I2zz*Tau3*db*l3*m2*m3*cos(X3)*sin(X2) - 2*Tau1*db*l2^2*l3^2*m2*m3^2*cos(2*X2)*sin(2*X3) - 2*Tau1*db*l2^2*l3^2*m2*m3^2*cos(2*X3)*sin(2*X2) + 16*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*cos(X2)*sin(X3) + 16*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*cos(X3)*sin(X2) + 16*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*cos(X2)*sin(X3) + 16*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*cos(X3)*sin(X2) - 16*CoM3x*Tau2*l2*l3^2*m1*m2*m3*cos(X2) + 16*CoM3x*Tau3*l2*l3^2*m1*m2*m3*cos(X2) - 16*Tau2*l2*l3^2*m1*m3^2*p_module*sin(X2)*cos(p_angle) - 24*Tau2*l2*l3^2*m2*m3^2*p_module*sin(X2)*cos(p_angle) - 16*Tau2*l2*l3^2*m2^2*m3*p_module*sin(X2)*cos(p_angle) + 16*Tau3*l2*l3^2*m1*m3^2*p_module*sin(X2)*cos(p_angle) + 24*Tau3*l2*l3^2*m2*m3^2*p_module*sin(X2)*cos(p_angle) + 16*Tau3*l2*l3^2*m2^2*m3*p_module*sin(X2)*cos(p_angle) + 16*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) - 16*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) - 16*I2zz*Tau1*l3^2*m3^2*p_module*sin(2*X2)*sin(2*X3)*sin(p_angle) + 8*I2zz*X5^2*db*l3^3*m1*m3^2*cos(X2)*cos(X3) + 8*I2zz*X5^2*db*l3^3*m2*m3^2*cos(X2)*cos(X3) + 8*I2zz*X6^2*db*l3^3*m1*m3^2*cos(X2)*cos(X3) + 8*I2zz*X6^2*db*l3^3*m2*m3^2*cos(X2)*cos(X3) + 2*X5^2*db*l2^2*l3^3*m2^2*m3^2*sin(X2)*sin(X3) + 2*X6^2*db*l2^2*l3^3*m2^2*m3^2*sin(X2)*sin(X3) - 2*X5^2*l2^3*l3^2*m2^2*m3^2*p_module*cos(X2)*cos(p_angle) + 24*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(p_angle) + 8*g0*l2^2*l3^2*m1*m2^2*m3*p_module*cos(p_angle) + 8*g0*l2^2*l3^2*m1^2*m2*m3*p_module*cos(p_angle) - 64*I3zz*Tau2*l2*m1*m2*p_module*sin(X2)*cos(p_angle) - 128*I3zz*Tau2*l2*m1*m3*p_module*sin(X2)*cos(p_angle) + 64*I3zz*Tau3*l2*m1*m2*p_module*sin(X2)*cos(p_angle) - 192*I3zz*Tau2*l2*m2*m3*p_module*sin(X2)*cos(p_angle) + 128*I3zz*Tau3*l2*m1*m3*p_module*sin(X2)*cos(p_angle) + 192*I3zz*Tau3*l2*m2*m3*p_module*sin(X2)*cos(p_angle) - 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(2*X3)*cos(p_angle) - 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(2*X3)*cos(p_angle) - 16*CoM3x*Tau2*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) + 16*CoM3x*Tau3*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) - 8*I2zz*X5^2*db*l3^3*m1*m3^2*sin(X2)*sin(X3) - 8*I2zz*X5^2*db*l3^3*m2*m3^2*sin(X2)*sin(X3) - 8*I2zz*X6^2*db*l3^3*m1*m3^2*sin(X2)*sin(X3) - 8*I2zz*X6^2*db*l3^3*m2*m3^2*sin(X2)*sin(X3) + 8*Tau2*db*l2*l3^2*m1*m2*m3*sin(X2) - 8*Tau3*db*l2*l3^2*m1*m2*m3*sin(X2) + 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2) + 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*X2) + 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + 12*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2) + 4*CoM3x*X5^2*l2^3*l3^2*m1*m2^2*m3*sin(X2) - 16*I3zz*X5^2*l2^3*m1*m2^2*p_module*cos(X2)*cos(p_angle) - 128*I3zz*X5^2*l2^3*m1*m3^2*p_module*cos(X2)*cos(p_angle) - 32*I3zz*X5^2*l2^3*m2*m3^2*p_module*cos(X2)*cos(p_angle) - 16*I3zz*X5^2*l2^3*m2^2*m3*p_module*cos(X2)*cos(p_angle) + 64*I2zz*g0*l3^2*m1*m2*m3*p_module*cos(p_angle) + 192*I3zz*g0*l2^2*m1*m2*m3*p_module*cos(p_angle) - 8*Tau2*db*l2*l3^2*m1*m3^2*cos(2*X3)*sin(X2) - 8*Tau2*db*l2*l3^2*m1*m3^2*sin(2*X3)*cos(X2) - 4*Tau2*db*l2*l3^2*m2*m3^2*cos(2*X3)*sin(X2) - 4*Tau2*db*l2*l3^2*m2*m3^2*sin(2*X3)*cos(X2) + 8*Tau3*db*l2*l3^2*m1*m3^2*cos(2*X3)*sin(X2) + 8*Tau3*db*l2*l3^2*m1*m3^2*sin(2*X3)*cos(X2) + 4*Tau3*db*l2*l3^2*m2*m3^2*cos(2*X3)*sin(X2) + 4*Tau3*db*l2*l3^2*m2*m3^2*sin(2*X3)*cos(X2) - 8*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2) - 4*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*X2) + 6*X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(X2) + 2*X5^2*db*l2^3*l3^2*m1*m2^2*m3*cos(X2) + 64*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*X2) + 96*CoM3x*I3zz*X5^2*l2^3*m1*m2*m3*sin(X2) - X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(2*X3)*cos(X2) + 8*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*X2)*cos(2*X3) - 64*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*X2) + 48*I3zz*X5^2*db*l2^3*m1*m2*m3*cos(X2) - 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*X2)*sin(2*X3) - 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*X3)*sin(2*X2) + X5^2*db*l2^3*l3^2*m2^2*m3^2*sin(2*X3)*sin(X2) - 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*sin(2*X2)*sin(2*X3) + 32*I2zz*I3zz*X5^2*db*l3*m3^2*cos(X2)*cos(X3) + 32*I2zz*I3zz*X6^2*db*l3*m3^2*cos(X2)*cos(X3) - 32*I2zz*I3zz*X5^2*db*l3*m3^2*sin(X2)*sin(X3) - 32*I2zz*I3zz*X6^2*db*l3*m3^2*sin(X2)*sin(X3) + 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2) - 64*I2zz*I3zz*X5^2*l2*m2^2*p_module*cos(X2)*cos(p_angle) - 128*I2zz*I3zz*X5^2*l2*m3^2*p_module*cos(X2)*cos(p_angle) - 8*Tau1*l2^2*l3^2*m1*m2*m3*p_module*sin(p_angle) + 8*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(X2) + 12*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(X2) + 8*I2zz*X5^2*db*l2*l3^2*m2^2*m3*cos(X2) + 16*Tau1*l2^2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(p_angle) + 8*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X2)*sin(p_angle) - 8*Tau1*l2^2*l3^2*m2*m3^2*p_module*sin(2*X2)*cos(p_angle) + 4*Tau1*l2^2*l3^2*m2^2*m3*p_module*cos(2*X2)*sin(p_angle) - 4*Tau1*l2^2*l3^2*m2^2*m3*p_module*sin(2*X2)*cos(p_angle) + 8*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(p_angle) - 64*CoM3x*I2zz*Tau3*l3*m1*m3*cos(X2)*cos(X3) + 64*CoM3x*I2zz*I3zz*X5^2*l2*m1*m2*sin(X2) + 128*CoM3x*I2zz*I3zz*X5^2*l2*m1*m3*sin(X2) + 64*CoM3x*Tau3*l2^2*l3*m1*m3^2*sin(X2)*sin(X3) + 8*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) + 4*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(2*X3)*cos(X2) + 16*CoM3x*Tau3*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) - 64*I2zz*Tau3*l3*m1*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) - 64*I2zz*Tau3*l3*m1*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) - 64*I2zz*Tau3*l3*m2*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) - 64*I2zz*Tau3*l3*m2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) - 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X2)*cos(2*X3)*sin(p_angle) + 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X2)*sin(2*X3)*cos(p_angle) + 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(2*X2)*cos(p_angle) + 8*Tau3*db*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) - 8*Tau3*db*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) - 4*CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X2)*sin(X3) + 4*CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X3)*sin(X2) - 4*CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X2)*sin(X3) + 4*CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X3)*sin(X2) - 16*I2zz*X5^2*l3^3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I2zz*X5^2*l3^3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I2zz*X6^2*l3^3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I2zz*X6^2*l3^3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 4*X5^2*l2^2*l3^3*m2^2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 4*X6^2*l2^2*l3^3*m2^2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 32*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*cos(X2)*sin(X3) + 32*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*cos(X3)*sin(X2) - 8*I2zz*X5^2*db*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) - 4*I2zz*X5^2*db*l2*l3^2*m2*m3^2*sin(2*X3)*sin(X2) + 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*sin(2*X2)*sin(2*X3)*sin(p_angle) + 2*X5^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2)*cos(X3) + 2*X6^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2)*cos(X3) + 16*I2zz*X5*X6*db*l3^3*m1*m3^2*cos(X2)*cos(X3) + 16*I2zz*X5*X6*db*l3^3*m2*m3^2*cos(X2)*cos(X3) + 4*X5*X6*db*l2^2*l3^3*m2^2*m3^2*sin(X2)*sin(X3) + 16*I2zz*X5^2*l3^3*m1*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I2zz*X5^2*l3^3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I2zz*X6^2*l3^3*m1*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I2zz*X6^2*l3^3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*Tau2*l2*l3^2*m1*m2*m3*p_module*sin(X2)*cos(p_angle) + 16*Tau3*l2*l3^2*m1*m2*m3*p_module*sin(X2)*cos(p_angle) + 16*Tau2*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) + 16*Tau2*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) + 8*Tau2*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) + 8*Tau2*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) - 16*Tau3*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 16*Tau3*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) - 8*Tau3*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 8*Tau3*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) + 2*X5^2*db*l2^2*l3^3*m1*m2*m3^2*sin(X2)*sin(X3) + 2*X6^2*db*l2^2*l3^3*m1*m2*m3^2*sin(X2)*sin(X3) - 12*X5^2*l2^3*l3^2*m1*m2*m3^2*p_module*cos(X2)*cos(p_angle) - 4*X5^2*l2^3*l3^2*m1*m2^2*m3*p_module*cos(X2)*cos(p_angle) - 16*I2zz*X5*X6*db*l3^3*m1*m3^2*sin(X2)*sin(X3) - 16*I2zz*X5*X6*db*l3^3*m2*m3^2*sin(X2)*sin(X3) + 2*X5^2*l2^3*l3^2*m2^2*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) - 16*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(2*X3)*cos(p_angle) - 96*I3zz*X5^2*l2^3*m1*m2*m3*p_module*cos(X2)*cos(p_angle) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2)*cos(2*X3) - 4*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*cos(2*X3)*sin(X2) - 4*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(2*X3)*cos(X2) - 2*X5^2*l2^3*l3^2*m2^2*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2)*sin(2*X3) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3)*sin(2*X2) - 2*X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(2*X3)*cos(X2) + 64*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X3)*sin(X2) + 64*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X3)*sin(X2) - 64*I2zz*I3zz*X5^2*l3*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 64*I2zz*I3zz*X6^2*l3*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2)*sin(2*X3) + 32*I3zz*X5^2*db*l2^2*l3*m1*m3^2*cos(X2)*cos(X3) + 8*I3zz*X5^2*db*l2^2*l3*m2*m3^2*cos(X2)*cos(X3) + 32*I3zz*X6^2*db*l2^2*l3*m1*m3^2*cos(X2)*cos(X3) + 8*I3zz*X6^2*db*l2^2*l3*m2*m3^2*cos(X2)*cos(X3) + 2*X5^2*db*l2^3*l3^2*m1*m2*m3^2*sin(2*X3)*sin(X2) + 64*I2zz*I3zz*X5*X6*db*l3*m3^2*cos(X2)*cos(X3) + 64*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*cos(X2)*sin(X3) + 64*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*cos(X3)*sin(X2) + 64*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*cos(X2)*sin(X3) + 64*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*cos(X3)*sin(X2) + 64*I2zz*I3zz*X5^2*l3*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 64*I2zz*I3zz*X6^2*l3*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 32*I2zz*I3zz*X5^2*db*l3*m1*m3*cos(X2)*cos(X3) + 32*I2zz*I3zz*X5^2*db*l3*m2*m3*cos(X2)*cos(X3) + 32*I2zz*I3zz*X6^2*db*l3*m1*m3*cos(X2)*cos(X3) + 32*I2zz*I3zz*X6^2*db*l3*m2*m3*cos(X2)*cos(X3) + 8*I3zz*X5^2*db*l2^2*l3*m2*m3^2*sin(X2)*sin(X3) + 8*I3zz*X5^2*db*l2^2*l3*m2^2*m3*sin(X2)*sin(X3) + 8*I3zz*X6^2*db*l2^2*l3*m2*m3^2*sin(X2)*sin(X3) + 8*I3zz*X6^2*db*l2^2*l3*m2^2*m3*sin(X2)*sin(X3) - 16*I2zz*X5^2*l2*l3^2*m1*m3^2*p_module*cos(X2)*cos(p_angle) - 24*I2zz*X5^2*l2*l3^2*m2*m3^2*p_module*cos(X2)*cos(p_angle) - 16*I2zz*X5^2*l2*l3^2*m2^2*m3*p_module*cos(X2)*cos(p_angle) - 64*I2zz*I3zz*X5*X6*db*l3*m3^2*sin(X2)*sin(X3) - 32*I2zz*I3zz*X5^2*db*l3*m1*m3*sin(X2)*sin(X3) - 32*I2zz*I3zz*X5^2*db*l3*m2*m3*sin(X2)*sin(X3) - 32*I2zz*I3zz*X6^2*db*l3*m1*m3*sin(X2)*sin(X3) - 32*I2zz*I3zz*X6^2*db*l3*m2*m3*sin(X2)*sin(X3) + 16*CoM3x*Tau3*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) + 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m2*m3*sin(X2) - 64*I2zz*I3zz*X5^2*l2*m1*m2*p_module*cos(X2)*cos(p_angle) - 128*I2zz*I3zz*X5^2*l2*m1*m3*p_module*cos(X2)*cos(p_angle) - 192*I2zz*I3zz*X5^2*l2*m2*m3*p_module*cos(X2)*cos(p_angle) - 64*Tau3*l2^2*l3*m1*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) - 16*Tau3*l2^2*l3*m2*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) + 16*Tau3*l2^2*l3*m2*m3^2*p_module*cos(X3)*sin(X2)*cos(p_angle) + 16*Tau3*l2^2*l3*m2^2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) + 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(2*X3)*sin(X2) + 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(2*X3)*cos(X2) + 8*I2zz*X5^2*db*l2*l3^2*m1*m2*m3*cos(X2) + 16*I2zz*X5^2*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) + 8*I2zz*X5^2*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) - 4*X5^2*l2^2*l3^3*m1*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 4*X6^2*l2^2*l3^3*m1*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 8*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X2)*sin(X3) + 8*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X3)*sin(X2) - 32*I2zz*X5*X6*l3^3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 32*I2zz*X5*X6*l3^3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 8*X5*X6*l2^2*l3^3*m2^2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 4*X5*X6*db*l2^2*l3^3*m1*m2*m3^2*cos(X2)*cos(X3) - 4*X5^2*l2^2*l3^3*m1*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 4*X6^2*l2^2*l3^3*m1*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 32*I2zz*X5*X6*l3^3*m1*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 32*I2zz*X5*X6*l3^3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 4*X5*X6*db*l2^2*l3^3*m1*m2*m3^2*sin(X2)*sin(X3) + 4*X5^2*l2^3*l3^2*m1*m2*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) - 64*I3zz*X5^2*l2^2*l3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I3zz*X5^2*l2^2*l3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 64*I3zz*X6^2*l2^2*l3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I3zz*X6^2*l2^2*l3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 4*X5^2*l2^3*l3^2*m1*m2*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) + 128*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X3)*sin(X2) - 128*I2zz*I3zz*X5*X6*l3*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I3zz*X5*X6*db*l2^2*l3*m1*m3^2*cos(X2)*cos(X3) + 16*I3zz*X5*X6*db*l2^2*l3*m2*m3^2*cos(X2)*cos(X3) - 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) + 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) - 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) + 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) - 64*I2zz*I3zz*X5^2*l3*m1*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 64*I2zz*I3zz*X5^2*l3*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 64*I2zz*I3zz*X6^2*l3*m1*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 64*I2zz*I3zz*X6^2*l3*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I3zz*X5^2*l2^2*l3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I3zz*X5^2*l2^2*l3*m2^2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I3zz*X6^2*l2^2*l3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I3zz*X6^2*l2^2*l3*m2^2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 128*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X2)*sin(X3) + 128*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X3)*sin(X2) + 128*I2zz*I3zz*X5*X6*l3*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 8*I3zz*X5^2*db*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) + 64*I2zz*I3zz*X5*X6*db*l3*m1*m3*cos(X2)*cos(X3) + 64*I2zz*I3zz*X5*X6*db*l3*m2*m3*cos(X2)*cos(X3) + 16*I3zz*X5*X6*db*l2^2*l3*m2*m3^2*sin(X2)*sin(X3) + 16*I3zz*X5*X6*db*l2^2*l3*m2^2*m3*sin(X2)*sin(X3) + 64*I2zz*I3zz*X5^2*l3*m1*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 64*I2zz*I3zz*X5^2*l3*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 64*I2zz*I3zz*X6^2*l3*m1*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 64*I2zz*I3zz*X6^2*l3*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 8*I3zz*X5^2*db*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) - 16*I2zz*X5^2*l2*l3^2*m1*m2*m3*p_module*cos(X2)*cos(p_angle) - 64*I2zz*I3zz*X5*X6*db*l3*m1*m3*sin(X2)*sin(X3) - 64*I2zz*I3zz*X5*X6*db*l3*m2*m3*sin(X2)*sin(X3) - 16*I2zz*X5^2*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) - 8*I2zz*X5^2*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) - 16*Tau3*l2^2*l3*m1*m2*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) + 16*Tau3*l2^2*l3*m1*m2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) - 8*X5*X6*l2^2*l3^3*m1*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 8*X5*X6*l2^2*l3^3*m1*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 128*I3zz*X5*X6*l2^2*l3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 32*I3zz*X5*X6*l2^2*l3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I3zz*X5^2*l2^2*l3*m1*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 16*I3zz*X6^2*l2^2*l3*m1*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) + 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) - 128*I2zz*I3zz*X5*X6*l3*m1*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 128*I2zz*I3zz*X5*X6*l3*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 32*I3zz*X5*X6*l2^2*l3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 32*I3zz*X5*X6*l2^2*l3*m2^2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) - 16*I3zz*X5^2*l2^2*l3*m1*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I3zz*X6^2*l2^2*l3*m1*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 128*I2zz*I3zz*X5*X6*l3*m1*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 128*I2zz*I3zz*X5*X6*l3*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) - 32*I3zz*X5*X6*l2^2*l3*m1*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) - 32*I3zz*X5*X6*l2^2*l3*m1*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle))/(4*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)));
% Mm2 = -(128*CoM3y*I2zz*I3zz*g0*m1^2 - 16*I2zz*Tau2*l3^2*m3^2 - 64*I3zz*Tau2*l2^2*m3^2 - 128*I2zz*I3zz*Tau2*m1 - 128*I2zz*I3zz*Tau2*m2 - 128*I2zz*I3zz*Tau2*m3 - 16*I3zz*Tau2*l2^2*m2^2 - 16*Tau2*l2^2*l3^2*m1*m3^2 - 12*Tau2*l2^2*l3^2*m2*m3^2 - 4*Tau2*l2^2*l3^2*m2^2*m3 - 64*I2zz*I3zz*db*g0*m1^2 - 64*I2zz*I3zz*db*g0*m2^2 - 64*I2zz*I3zz*db*g0*m3^2 - 32*I3zz*Tau2*l2^2*m1*m2 - 32*I2zz*Tau2*l3^2*m1*m3 - 128*I3zz*Tau2*l2^2*m1*m3 - 32*I2zz*Tau2*l3^2*m2*m3 - 96*I3zz*Tau2*l2^2*m2*m3 + 16*I3zz*Tau2*l2^2*m2^2*cos(2*X2) + 64*I3zz*Tau2*l2^2*m3^2*cos(2*X2) + 128*CoM3x*I2zz*I3zz*Tau1*m1 + 128*I2zz*I3zz*Tau1*m1*p_module*sin(p_angle) + 128*I2zz*I3zz*Tau1*m2*p_module*sin(p_angle) + 128*I2zz*I3zz*Tau1*m3*p_module*sin(p_angle) + 8*I3zz*Tau1*db*l2^2*m2^2*sin(2*X2) + 32*I3zz*Tau1*db*l2^2*m3^2*sin(2*X2) + 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 + 16*CoM3y*I3zz*g0*l2^2*m1*m2^2 + 32*CoM3y*I3zz*g0*l2^2*m1^2*m2 + 16*CoM3y*I2zz*g0*l3^2*m1*m3^2 + 32*CoM3y*I2zz*g0*l3^2*m1^2*m3 + 64*CoM3y*I3zz*g0*l2^2*m1*m3^2 + 128*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 8*db*g0*l2^2*l3^2*m1^2*m3^2 - 2*db*g0*l2^2*l3^2*m2^2*m3^2 + 32*I3zz*Tau2*db*l2*m2^2*sin(X2) + 64*I3zz*Tau2*db*l2*m3^2*sin(X2) - 32*I3zz*Tau3*db*l2*m2^2*sin(X2) - 64*I3zz*Tau3*db*l2*m3^2*sin(X2) - 128*I2zz*I3zz*g0*m1^2*p_module*cos(p_angle) - 128*I2zz*I3zz*g0*m2^2*p_module*cos(p_angle) - 128*I2zz*I3zz*g0*m3^2*p_module*cos(p_angle) + 128*CoM3y*I2zz*I3zz*g0*m1*m2 + 128*CoM3y*I2zz*I3zz*g0*m1*m3 - 16*I3zz*db*g0*l2^2*m1*m2^2 - 16*I3zz*db*g0*l2^2*m1^2*m2 - 16*I2zz*db*g0*l3^2*m1*m3^2 - 16*I2zz*db*g0*l3^2*m1^2*m3 - 64*I3zz*db*g0*l2^2*m1*m3^2 - 64*I3zz*db*g0*l2^2*m1^2*m3 - 16*I2zz*db*g0*l3^2*m2*m3^2 - 16*I2zz*db*g0*l3^2*m2^2*m3 - 16*I3zz*db*g0*l2^2*m2*m3^2 - 16*I3zz*db*g0*l2^2*m2^2*m3 - 8*Tau2*l2^2*l3^2*m1*m2*m3 - 128*I2zz*I3zz*db*g0*m1*m2 - 128*I2zz*I3zz*db*g0*m1*m3 - 128*I2zz*I3zz*db*g0*m2*m3 + 16*Tau2*l2^2*l3^2*m1*m3^2*cos(2*X3) + 8*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2) + 4*Tau2*l2^2*l3^2*m2^2*m3*cos(2*X2) + 8*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X3) + 64*I3zz*Tau2*l2^2*m2*m3*cos(2*X2) + 16*CoM3x*Tau1*l2^2*l3^2*m1*m3^2 + 16*I2zz*Tau2*l3^2*m3^2*cos(2*X2)*cos(2*X3) + 32*CoM3x*I3zz*Tau1*l2^2*m1*m2 + 32*CoM3x*I2zz*Tau1*l3^2*m1*m3 + 128*CoM3x*I3zz*Tau1*l2^2*m1*m3 + 16*I3zz*Tau1*l2^2*m2^2*p_module*sin(p_angle) + 16*I2zz*Tau1*l3^2*m3^2*p_module*sin(p_angle) + 64*I3zz*Tau1*l2^2*m3^2*p_module*sin(p_angle) - 16*I2zz*Tau2*l3^2*m3^2*sin(2*X2)*sin(2*X3) + 32*I2zz*I3zz*X5^2*db*l2*m2^2*cos(X2) + 64*I2zz*I3zz*X5^2*db*l2*m3^2*cos(X2) - 16*I3zz*Tau1*l2^2*m2^2*p_module*cos(2*X2)*sin(p_angle) + 16*I3zz*Tau1*l2^2*m2^2*p_module*sin(2*X2)*cos(p_angle) - 64*I3zz*Tau1*l2^2*m3^2*p_module*cos(2*X2)*sin(p_angle) + 64*I3zz*Tau1*l2^2*m3^2*p_module*sin(2*X2)*cos(p_angle) + 4*Tau1*db*l2^2*l3^2*m2*m3^2*sin(2*X2) + 2*Tau1*db*l2^2*l3^2*m2^2*m3*sin(2*X2) + 32*I2zz*Tau3*db*l3*m3^2*cos(X2)*sin(X3) + 32*I2zz*Tau3*db*l3*m3^2*cos(X3)*sin(X2) + 16*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(X2) - 16*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(X2) + 32*I3zz*Tau1*db*l2^2*m2*m3*sin(2*X2) - 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(p_angle) - 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(p_angle) + 8*I2zz*Tau1*db*l3^2*m3^2*cos(2*X2)*sin(2*X3) + 8*I2zz*Tau1*db*l3^2*m3^2*cos(2*X3)*sin(2*X2) + 64*CoM3x*I3zz*Tau2*l2*m1*m2*cos(X2) + 128*CoM3x*I3zz*Tau2*l2*m1*m3*cos(X2) - 64*CoM3x*I3zz*Tau3*l2*m1*m2*cos(X2) - 128*CoM3x*I3zz*Tau3*l2*m1*m3*cos(X2) + 64*I3zz*Tau2*l2*m2^2*p_module*sin(X2)*cos(p_angle) + 128*I3zz*Tau2*l2*m3^2*p_module*sin(X2)*cos(p_angle) - 64*I3zz*Tau3*l2*m2^2*p_module*sin(X2)*cos(p_angle) - 128*I3zz*Tau3*l2*m3^2*p_module*sin(X2)*cos(p_angle) + 12*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 + 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 + 8*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 8*Tau2*db*l2*l3^2*m1*m3^2*sin(X2) + 12*Tau2*db*l2*l3^2*m2*m3^2*sin(X2) + 8*Tau2*db*l2*l3^2*m2^2*m3*sin(X2) - 8*Tau3*db*l2*l3^2*m1*m3^2*sin(X2) - 12*Tau3*db*l2*l3^2*m2*m3^2*sin(X2) - 8*Tau3*db*l2*l3^2*m2^2*m3*sin(X2) - 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) - 32*I3zz*g0*l2^2*m1*m2^2*p_module*cos(p_angle) - 32*I3zz*g0*l2^2*m1^2*m2*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m1*m3^2*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m1^2*m3*p_module*cos(p_angle) - 128*I3zz*g0*l2^2*m1*m3^2*p_module*cos(p_angle) - 128*I3zz*g0*l2^2*m1^2*m3*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m2*m3^2*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m2^2*m3*p_module*cos(p_angle) - 32*I3zz*g0*l2^2*m2*m3^2*p_module*cos(p_angle) - 32*I3zz*g0*l2^2*m2^2*m3*p_module*cos(p_angle) + 32*CoM3y*I2zz*g0*l3^2*m1*m2*m3 + 96*CoM3y*I3zz*g0*l2^2*m1*m2*m3 + X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(X2) - 12*db*g0*l2^2*l3^2*m1*m2*m3^2 - 4*db*g0*l2^2*l3^2*m1*m2^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m2*m3 + 32*I3zz*Tau2*db*l2*m1*m2*sin(X2) + 64*I3zz*Tau2*db*l2*m1*m3*sin(X2) - 32*I3zz*Tau3*db*l2*m1*m2*sin(X2) + 96*I3zz*Tau2*db*l2*m2*m3*sin(X2) - 64*I3zz*Tau3*db*l2*m1*m3*sin(X2) - 96*I3zz*Tau3*db*l2*m2*m3*sin(X2) - 16*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*X2) - 64*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*X2) - 16*CoM3x*I3zz*X5^2*l2^3*m1*m2^2*sin(X2) - 128*CoM3x*I3zz*X5^2*l2^3*m1*m3^2*sin(X2) + 8*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + 2*db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) - 256*I2zz*I3zz*g0*m1*m2*p_module*cos(p_angle) - 256*I2zz*I3zz*g0*m1*m3*p_module*cos(p_angle) - 256*I2zz*I3zz*g0*m2*m3*p_module*cos(p_angle) + 16*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*X2) + 64*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*X2) + 8*I3zz*X5^2*db*l2^3*m1*m2^2*cos(X2) + 64*I3zz*X5^2*db*l2^3*m1*m3^2*cos(X2) + 16*I3zz*X5^2*db*l2^3*m2*m3^2*cos(X2) + 8*I3zz*X5^2*db*l2^3*m2^2*m3*cos(X2) - 32*I2zz*db*g0*l3^2*m1*m2*m3 - 96*I3zz*db*g0*l2^2*m1*m2*m3 - 4*Tau2*l2^2*l3^2*m2*m3^2*cos(2*X2)*cos(2*X3) + 8*CoM3x*Tau1*l2^2*l3^2*m1*m2*m3 + 16*Tau1*l2^2*l3^2*m1*m3^2*p_module*sin(p_angle) + 12*Tau1*l2^2*l3^2*m2*m3^2*p_module*sin(p_angle) + 4*Tau1*l2^2*l3^2*m2^2*m3*p_module*sin(p_angle) + 4*Tau2*l2^2*l3^2*m2*m3^2*sin(2*X2)*sin(2*X3) - 16*CoM3x*Tau1*l2^2*l3^2*m1*m3^2*cos(2*X3) + 32*I3zz*Tau1*l2^2*m1*m2*p_module*sin(p_angle) + 32*I2zz*Tau1*l3^2*m1*m3*p_module*sin(p_angle) + 128*I3zz*Tau1*l2^2*m1*m3*p_module*sin(p_angle) + 32*I2zz*Tau1*l3^2*m2*m3*p_module*sin(p_angle) + 96*I3zz*Tau1*l2^2*m2*m3*p_module*sin(p_angle) + 64*I2zz*Tau3*l3*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) + 64*I2zz*Tau3*l3*m3^2*p_module*cos(X3)*sin(X2)*cos(p_angle) + 32*I2zz*I3zz*X5^2*db*l2*m1*m2*cos(X2) + 64*I2zz*I3zz*X5^2*db*l2*m1*m3*cos(X2) + 96*I2zz*I3zz*X5^2*db*l2*m2*m3*cos(X2) + 32*Tau3*db*l2^2*l3*m1*m3^2*cos(X2)*sin(X3) + 8*Tau3*db*l2^2*l3*m2*m3^2*cos(X2)*sin(X3) - 8*Tau3*db*l2^2*l3*m2*m3^2*cos(X3)*sin(X2) - 8*Tau3*db*l2^2*l3*m2^2*m3*cos(X3)*sin(X2) - 64*I3zz*Tau1*l2^2*m2*m3*p_module*cos(2*X2)*sin(p_angle) + 64*I3zz*Tau1*l2^2*m2*m3*p_module*sin(2*X2)*cos(p_angle) - 64*CoM3x*I2zz*Tau3*l3*m1*m3*sin(X2)*sin(X3) - 16*I2zz*Tau1*l3^2*m3^2*p_module*cos(2*X2)*cos(2*X3)*sin(p_angle) + 16*I2zz*Tau1*l3^2*m3^2*p_module*cos(2*X2)*sin(2*X3)*cos(p_angle) + 16*I2zz*Tau1*l3^2*m3^2*p_module*cos(2*X3)*sin(2*X2)*cos(p_angle) + 32*I2zz*Tau3*db*l3*m1*m3*cos(X2)*sin(X3) + 32*I2zz*Tau3*db*l3*m1*m3*cos(X3)*sin(X2) + 32*I2zz*Tau3*db*l3*m2*m3*cos(X2)*sin(X3) + 32*I2zz*Tau3*db*l3*m2*m3*cos(X3)*sin(X2) - 2*Tau1*db*l2^2*l3^2*m2*m3^2*cos(2*X2)*sin(2*X3) - 2*Tau1*db*l2^2*l3^2*m2*m3^2*cos(2*X3)*sin(2*X2) - 16*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*cos(X2)*sin(X3) - 16*CoM3x*I2zz*X5^2*l3^3*m1*m3^2*cos(X3)*sin(X2) - 16*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*cos(X2)*sin(X3) - 16*CoM3x*I2zz*X6^2*l3^3*m1*m3^2*cos(X3)*sin(X2) + 16*CoM3x*Tau2*l2*l3^2*m1*m2*m3*cos(X2) - 16*CoM3x*Tau3*l2*l3^2*m1*m2*m3*cos(X2) + 16*Tau2*l2*l3^2*m1*m3^2*p_module*sin(X2)*cos(p_angle) + 24*Tau2*l2*l3^2*m2*m3^2*p_module*sin(X2)*cos(p_angle) + 16*Tau2*l2*l3^2*m2^2*m3*p_module*sin(X2)*cos(p_angle) - 16*Tau3*l2*l3^2*m1*m3^2*p_module*sin(X2)*cos(p_angle) - 24*Tau3*l2*l3^2*m2*m3^2*p_module*sin(X2)*cos(p_angle) - 16*Tau3*l2*l3^2*m2^2*m3*p_module*sin(X2)*cos(p_angle) - 16*CoM3x*Tau2*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) + 16*CoM3x*Tau3*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) + 16*I2zz*Tau1*l3^2*m3^2*p_module*sin(2*X2)*sin(2*X3)*sin(p_angle) + 8*I2zz*X5^2*db*l3^3*m1*m3^2*cos(X2)*cos(X3) + 8*I2zz*X5^2*db*l3^3*m2*m3^2*cos(X2)*cos(X3) + 8*I2zz*X6^2*db*l3^3*m1*m3^2*cos(X2)*cos(X3) + 8*I2zz*X6^2*db*l3^3*m2*m3^2*cos(X2)*cos(X3) + 2*X5^2*db*l2^2*l3^3*m2^2*m3^2*sin(X2)*sin(X3) + 2*X6^2*db*l2^2*l3^3*m2^2*m3^2*sin(X2)*sin(X3) + 2*X5^2*l2^3*l3^2*m2^2*m3^2*p_module*cos(X2)*cos(p_angle) - 24*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(p_angle) - 8*g0*l2^2*l3^2*m1*m2^2*m3*p_module*cos(p_angle) - 8*g0*l2^2*l3^2*m1^2*m2*m3*p_module*cos(p_angle) + 64*I3zz*Tau2*l2*m1*m2*p_module*sin(X2)*cos(p_angle) + 128*I3zz*Tau2*l2*m1*m3*p_module*sin(X2)*cos(p_angle) - 64*I3zz*Tau3*l2*m1*m2*p_module*sin(X2)*cos(p_angle) + 192*I3zz*Tau2*l2*m2*m3*p_module*sin(X2)*cos(p_angle) - 128*I3zz*Tau3*l2*m1*m3*p_module*sin(X2)*cos(p_angle) - 192*I3zz*Tau3*l2*m2*m3*p_module*sin(X2)*cos(p_angle) + 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(2*X3)*cos(p_angle) + 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(2*X3)*cos(p_angle) + 16*CoM3x*Tau2*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) - 16*CoM3x*Tau3*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) - 8*I2zz*X5^2*db*l3^3*m1*m3^2*sin(X2)*sin(X3) - 8*I2zz*X5^2*db*l3^3*m2*m3^2*sin(X2)*sin(X3) - 8*I2zz*X6^2*db*l3^3*m1*m3^2*sin(X2)*sin(X3) - 8*I2zz*X6^2*db*l3^3*m2*m3^2*sin(X2)*sin(X3) + 8*Tau2*db*l2*l3^2*m1*m2*m3*sin(X2) - 8*Tau3*db*l2*l3^2*m1*m2*m3*sin(X2) - 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2) - 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*X2) - 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) - 12*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(X2) - 4*CoM3x*X5^2*l2^3*l3^2*m1*m2^2*m3*sin(X2) + 16*I3zz*X5^2*l2^3*m1*m2^2*p_module*cos(X2)*cos(p_angle) + 128*I3zz*X5^2*l2^3*m1*m3^2*p_module*cos(X2)*cos(p_angle) + 32*I3zz*X5^2*l2^3*m2*m3^2*p_module*cos(X2)*cos(p_angle) + 16*I3zz*X5^2*l2^3*m2^2*m3*p_module*cos(X2)*cos(p_angle) - 64*I2zz*g0*l3^2*m1*m2*m3*p_module*cos(p_angle) - 192*I3zz*g0*l2^2*m1*m2*m3*p_module*cos(p_angle) - 8*Tau2*db*l2*l3^2*m1*m3^2*cos(2*X3)*sin(X2) - 8*Tau2*db*l2*l3^2*m1*m3^2*sin(2*X3)*cos(X2) - 4*Tau2*db*l2*l3^2*m2*m3^2*cos(2*X3)*sin(X2) - 4*Tau2*db*l2*l3^2*m2*m3^2*sin(2*X3)*cos(X2) + 8*Tau3*db*l2*l3^2*m1*m3^2*cos(2*X3)*sin(X2) + 8*Tau3*db*l2*l3^2*m1*m3^2*sin(2*X3)*cos(X2) + 4*Tau3*db*l2*l3^2*m2*m3^2*cos(2*X3)*sin(X2) + 4*Tau3*db*l2*l3^2*m2*m3^2*sin(2*X3)*cos(X2) + 8*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2) + 4*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*X2) + 6*X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(X2) + 2*X5^2*db*l2^3*l3^2*m1*m2^2*m3*cos(X2) - 64*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*X2) - 96*CoM3x*I3zz*X5^2*l2^3*m1*m2*m3*sin(X2) - X5^2*db*l2^3*l3^2*m2^2*m3^2*cos(2*X3)*cos(X2) + 8*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) - 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*X2)*cos(2*X3) + 64*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*X2) + 48*I3zz*X5^2*db*l2^3*m1*m2*m3*cos(X2) + 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*X2)*sin(2*X3) + 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*X3)*sin(2*X2) + X5^2*db*l2^3*l3^2*m2^2*m3^2*sin(2*X3)*sin(X2) + 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*sin(2*X2)*sin(2*X3) + 32*I2zz*I3zz*X5^2*db*l3*m3^2*cos(X2)*cos(X3) + 32*I2zz*I3zz*X6^2*db*l3*m3^2*cos(X2)*cos(X3) - 32*I2zz*I3zz*X5^2*db*l3*m3^2*sin(X2)*sin(X3) - 32*I2zz*I3zz*X6^2*db*l3*m3^2*sin(X2)*sin(X3) - 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(X2) + 64*I2zz*I3zz*X5^2*l2*m2^2*p_module*cos(X2)*cos(p_angle) + 128*I2zz*I3zz*X5^2*l2*m3^2*p_module*cos(X2)*cos(p_angle) + 8*Tau1*l2^2*l3^2*m1*m2*m3*p_module*sin(p_angle) + 8*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(X2) + 12*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(X2) + 8*I2zz*X5^2*db*l2*l3^2*m2^2*m3*cos(X2) - 16*Tau1*l2^2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(p_angle) - 8*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X2)*sin(p_angle) + 8*Tau1*l2^2*l3^2*m2*m3^2*p_module*sin(2*X2)*cos(p_angle) - 4*Tau1*l2^2*l3^2*m2^2*m3*p_module*cos(2*X2)*sin(p_angle) + 4*Tau1*l2^2*l3^2*m2^2*m3*p_module*sin(2*X2)*cos(p_angle) - 8*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(p_angle) + 64*CoM3x*I2zz*Tau3*l3*m1*m3*cos(X2)*cos(X3) - 64*CoM3x*I2zz*I3zz*X5^2*l2*m1*m2*sin(X2) - 128*CoM3x*I2zz*I3zz*X5^2*l2*m1*m3*sin(X2) - 64*CoM3x*Tau3*l2^2*l3*m1*m3^2*sin(X2)*sin(X3) + 8*I2zz*X5^2*db*l2*l3^2*m1*m3^2*cos(2*X3)*cos(X2) + 4*I2zz*X5^2*db*l2*l3^2*m2*m3^2*cos(2*X3)*cos(X2) - 16*CoM3x*Tau3*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) + 64*I2zz*Tau3*l3*m1*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) + 64*I2zz*Tau3*l3*m1*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) + 64*I2zz*Tau3*l3*m2*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) + 64*I2zz*Tau3*l3*m2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) + 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X2)*cos(2*X3)*sin(p_angle) - 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X2)*sin(2*X3)*cos(p_angle) - 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(2*X2)*cos(p_angle) + 8*Tau3*db*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) - 8*Tau3*db*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) + 4*CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X2)*sin(X3) - 4*CoM3x*X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X3)*sin(X2) + 4*CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X2)*sin(X3) - 4*CoM3x*X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X3)*sin(X2) + 16*I2zz*X5^2*l3^3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I2zz*X5^2*l3^3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I2zz*X6^2*l3^3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I2zz*X6^2*l3^3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 4*X5^2*l2^2*l3^3*m2^2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 4*X6^2*l2^2*l3^3*m2^2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 32*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*cos(X2)*sin(X3) - 32*CoM3x*I2zz*X5*X6*l3^3*m1*m3^2*cos(X3)*sin(X2) - 8*I2zz*X5^2*db*l2*l3^2*m1*m3^2*sin(2*X3)*sin(X2) - 4*I2zz*X5^2*db*l2*l3^2*m2*m3^2*sin(2*X3)*sin(X2) - 4*Tau1*l2^2*l3^2*m2*m3^2*p_module*sin(2*X2)*sin(2*X3)*sin(p_angle) + 2*X5^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2)*cos(X3) + 2*X6^2*db*l2^2*l3^3*m1*m2*m3^2*cos(X2)*cos(X3) + 16*I2zz*X5*X6*db*l3^3*m1*m3^2*cos(X2)*cos(X3) + 16*I2zz*X5*X6*db*l3^3*m2*m3^2*cos(X2)*cos(X3) + 4*X5*X6*db*l2^2*l3^3*m2^2*m3^2*sin(X2)*sin(X3) - 16*I2zz*X5^2*l3^3*m1*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I2zz*X5^2*l3^3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I2zz*X6^2*l3^3*m1*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 16*I2zz*X6^2*l3^3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*Tau2*l2*l3^2*m1*m2*m3*p_module*sin(X2)*cos(p_angle) - 16*Tau3*l2*l3^2*m1*m2*m3*p_module*sin(X2)*cos(p_angle) - 16*Tau2*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 16*Tau2*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) - 8*Tau2*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) - 8*Tau2*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) + 16*Tau3*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) + 16*Tau3*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) + 8*Tau3*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*sin(X2)*cos(p_angle) + 8*Tau3*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*cos(X2)*cos(p_angle) + 2*X5^2*db*l2^2*l3^3*m1*m2*m3^2*sin(X2)*sin(X3) + 2*X6^2*db*l2^2*l3^3*m1*m2*m3^2*sin(X2)*sin(X3) + 12*X5^2*l2^3*l3^2*m1*m2*m3^2*p_module*cos(X2)*cos(p_angle) + 4*X5^2*l2^3*l3^2*m1*m2^2*m3*p_module*cos(X2)*cos(p_angle) - 16*I2zz*X5*X6*db*l3^3*m1*m3^2*sin(X2)*sin(X3) - 16*I2zz*X5*X6*db*l3^3*m2*m3^2*sin(X2)*sin(X3) - 2*X5^2*l2^3*l3^2*m2^2*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) + 16*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(2*X3)*cos(p_angle) + 96*I3zz*X5^2*l2^3*m1*m2*m3*p_module*cos(X2)*cos(p_angle) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2)*cos(2*X3) + 4*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*cos(2*X3)*sin(X2) + 4*CoM3x*X5^2*l2^3*l3^2*m1*m2*m3^2*sin(2*X3)*cos(X2) + 2*X5^2*l2^3*l3^2*m2^2*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X2)*sin(2*X3) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3)*sin(2*X2) - 2*X5^2*db*l2^3*l3^2*m1*m2*m3^2*cos(2*X3)*cos(X2) - 64*CoM3x*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X3)*sin(X2) - 64*CoM3x*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X3)*sin(X2) + 64*I2zz*I3zz*X5^2*l3*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I2zz*I3zz*X6^2*l3*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*X2)*sin(2*X3) + 32*I3zz*X5^2*db*l2^2*l3*m1*m3^2*cos(X2)*cos(X3) + 8*I3zz*X5^2*db*l2^2*l3*m2*m3^2*cos(X2)*cos(X3) + 32*I3zz*X6^2*db*l2^2*l3*m1*m3^2*cos(X2)*cos(X3) + 8*I3zz*X6^2*db*l2^2*l3*m2*m3^2*cos(X2)*cos(X3) + 2*X5^2*db*l2^3*l3^2*m1*m2*m3^2*sin(2*X3)*sin(X2) + 64*I2zz*I3zz*X5*X6*db*l3*m3^2*cos(X2)*cos(X3) - 64*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*cos(X2)*sin(X3) - 64*CoM3x*I2zz*I3zz*X5^2*l3*m1*m3*cos(X3)*sin(X2) - 64*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*cos(X2)*sin(X3) - 64*CoM3x*I2zz*I3zz*X6^2*l3*m1*m3*cos(X3)*sin(X2) - 64*I2zz*I3zz*X5^2*l3*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 64*I2zz*I3zz*X6^2*l3*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 32*I2zz*I3zz*X5^2*db*l3*m1*m3*cos(X2)*cos(X3) + 32*I2zz*I3zz*X5^2*db*l3*m2*m3*cos(X2)*cos(X3) + 32*I2zz*I3zz*X6^2*db*l3*m1*m3*cos(X2)*cos(X3) + 32*I2zz*I3zz*X6^2*db*l3*m2*m3*cos(X2)*cos(X3) + 8*I3zz*X5^2*db*l2^2*l3*m2*m3^2*sin(X2)*sin(X3) + 8*I3zz*X5^2*db*l2^2*l3*m2^2*m3*sin(X2)*sin(X3) + 8*I3zz*X6^2*db*l2^2*l3*m2*m3^2*sin(X2)*sin(X3) + 8*I3zz*X6^2*db*l2^2*l3*m2^2*m3*sin(X2)*sin(X3) + 16*I2zz*X5^2*l2*l3^2*m1*m3^2*p_module*cos(X2)*cos(p_angle) + 24*I2zz*X5^2*l2*l3^2*m2*m3^2*p_module*cos(X2)*cos(p_angle) + 16*I2zz*X5^2*l2*l3^2*m2^2*m3*p_module*cos(X2)*cos(p_angle) - 64*I2zz*I3zz*X5*X6*db*l3*m3^2*sin(X2)*sin(X3) - 32*I2zz*I3zz*X5^2*db*l3*m1*m3*sin(X2)*sin(X3) - 32*I2zz*I3zz*X5^2*db*l3*m2*m3*sin(X2)*sin(X3) - 32*I2zz*I3zz*X6^2*db*l3*m1*m3*sin(X2)*sin(X3) - 32*I2zz*I3zz*X6^2*db*l3*m2*m3*sin(X2)*sin(X3) - 16*CoM3x*Tau3*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) - 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m2*m3*sin(X2) + 64*I2zz*I3zz*X5^2*l2*m1*m2*p_module*cos(X2)*cos(p_angle) + 128*I2zz*I3zz*X5^2*l2*m1*m3*p_module*cos(X2)*cos(p_angle) + 192*I2zz*I3zz*X5^2*l2*m2*m3*p_module*cos(X2)*cos(p_angle) + 64*Tau3*l2^2*l3*m1*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) + 16*Tau3*l2^2*l3*m2*m3^2*p_module*cos(X2)*sin(X3)*cos(p_angle) - 16*Tau3*l2^2*l3*m2*m3^2*p_module*cos(X3)*sin(X2)*cos(p_angle) - 16*Tau3*l2^2*l3*m2^2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) - 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(2*X3)*sin(X2) - 16*CoM3x*I2zz*X5^2*l2*l3^2*m1*m3^2*sin(2*X3)*cos(X2) + 8*I2zz*X5^2*db*l2*l3^2*m1*m2*m3*cos(X2) - 16*I2zz*X5^2*l2*l3^2*m1*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) - 8*I2zz*X5^2*l2*l3^2*m2*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) + 4*X5^2*l2^2*l3^3*m1*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 4*X6^2*l2^2*l3^3*m1*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 8*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X2)*sin(X3) - 8*CoM3x*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X3)*sin(X2) + 32*I2zz*X5*X6*l3^3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 32*I2zz*X5*X6*l3^3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 8*X5*X6*l2^2*l3^3*m2^2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 4*X5*X6*db*l2^2*l3^3*m1*m2*m3^2*cos(X2)*cos(X3) + 4*X5^2*l2^2*l3^3*m1*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 4*X6^2*l2^2*l3^3*m1*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 32*I2zz*X5*X6*l3^3*m1*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) - 32*I2zz*X5*X6*l3^3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 4*X5*X6*db*l2^2*l3^3*m1*m2*m3^2*sin(X2)*sin(X3) - 4*X5^2*l2^3*l3^2*m1*m2*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) + 64*I3zz*X5^2*l2^2*l3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I3zz*X5^2*l2^2*l3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I3zz*X6^2*l2^2*l3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I3zz*X6^2*l2^2*l3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 4*X5^2*l2^3*l3^2*m1*m2*m3^2*p_module*sin(2*X3)*sin(X2)*cos(p_angle) - 128*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X3)*sin(X2) + 128*I2zz*I3zz*X5*X6*l3*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I3zz*X5*X6*db*l2^2*l3*m1*m3^2*cos(X2)*cos(X3) + 16*I3zz*X5*X6*db*l2^2*l3*m2*m3^2*cos(X2)*cos(X3) + 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) - 16*CoM3x*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) + 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) - 16*CoM3x*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) + 64*I2zz*I3zz*X5^2*l3*m1*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I2zz*I3zz*X5^2*l3*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I2zz*I3zz*X6^2*l3*m1*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 64*I2zz*I3zz*X6^2*l3*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I3zz*X5^2*l2^2*l3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X5^2*l2^2*l3*m2^2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X6^2*l2^2*l3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X6^2*l2^2*l3*m2^2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 128*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X2)*sin(X3) - 128*CoM3x*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X3)*sin(X2) - 128*I2zz*I3zz*X5*X6*l3*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 8*I3zz*X5^2*db*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) + 64*I2zz*I3zz*X5*X6*db*l3*m1*m3*cos(X2)*cos(X3) + 64*I2zz*I3zz*X5*X6*db*l3*m2*m3*cos(X2)*cos(X3) + 16*I3zz*X5*X6*db*l2^2*l3*m2*m3^2*sin(X2)*sin(X3) + 16*I3zz*X5*X6*db*l2^2*l3*m2^2*m3*sin(X2)*sin(X3) - 64*I2zz*I3zz*X5^2*l3*m1*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 64*I2zz*I3zz*X5^2*l3*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 64*I2zz*I3zz*X6^2*l3*m1*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 64*I2zz*I3zz*X6^2*l3*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 8*I3zz*X5^2*db*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) + 8*I3zz*X6^2*db*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) + 16*I2zz*X5^2*l2*l3^2*m1*m2*m3*p_module*cos(X2)*cos(p_angle) - 64*I2zz*I3zz*X5*X6*db*l3*m1*m3*sin(X2)*sin(X3) - 64*I2zz*I3zz*X5*X6*db*l3*m2*m3*sin(X2)*sin(X3) + 16*I2zz*X5^2*l2*l3^2*m1*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) + 8*I2zz*X5^2*l2*l3^2*m2*m3^2*p_module*cos(2*X3)*cos(X2)*cos(p_angle) + 16*Tau3*l2^2*l3*m1*m2*m3*p_module*cos(X2)*sin(X3)*cos(p_angle) - 16*Tau3*l2^2*l3*m1*m2*m3*p_module*cos(X3)*sin(X2)*cos(p_angle) + 8*X5*X6*l2^2*l3^3*m1*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 8*X5*X6*l2^2*l3^3*m1*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 128*I3zz*X5*X6*l2^2*l3*m1*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 32*I3zz*X5*X6*l2^2*l3*m2*m3^2*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I3zz*X5^2*l2^2*l3*m1*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 16*I3zz*X6^2*l2^2*l3*m1*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X2)*sin(X3) - 32*CoM3x*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X3)*sin(X2) + 128*I2zz*I3zz*X5*X6*l3*m1*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 128*I2zz*I3zz*X5*X6*l3*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 32*I3zz*X5*X6*l2^2*l3*m2*m3^2*p_module*sin(X2)*sin(X3)*cos(p_angle) + 32*I3zz*X5*X6*l2^2*l3*m2^2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m2*m3*cos(X2)*cos(X3) + 16*I3zz*X5^2*l2^2*l3*m1*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X6^2*l2^2*l3*m1*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 128*I2zz*I3zz*X5*X6*l3*m1*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) - 128*I2zz*I3zz*X5*X6*l3*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle) + 16*I3zz*X5*X6*db*l2^2*l3*m1*m2*m3*sin(X2)*sin(X3) + 32*I3zz*X5*X6*l2^2*l3*m1*m2*m3*p_module*cos(X2)*cos(X3)*cos(p_angle) + 32*I3zz*X5*X6*l2^2*l3*m1*m2*m3*p_module*sin(X2)*sin(X3)*cos(p_angle))/(4*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)));
% mu3 = g0*m3*((l3*sin(X2 + X3))/2 + l2*sin(X2) - p_module*cos(p_angle)) - (((X5^2*l3*m3*sin(X2 + X3))/2 - Tau1 + (X6^2*l3*m3*sin(X2 + X3))/2 + (X5^2*l2*m2*sin(X2))/2 + X5^2*l2*m3*sin(X2) + X5*X6*l3*m3*sin(X2 + X3))*(32*CoM3x*I2zz*I3zz*m1 + 4*I3zz*l2^2*m2^2*p_module*sin(2*X2 - p_angle) + 16*I3zz*l2^2*m3^2*p_module*sin(2*X2 - p_angle) + 4*CoM3x*l2^2*l3^2*m1*m3^2 + 8*CoM3x*I3zz*l2^2*m1*m2 + 8*CoM3x*I2zz*l3^2*m1*m3 + 32*CoM3x*I3zz*l2^2*m1*m3 + 4*I3zz*l2^2*m2^2*p_module*sin(p_angle) + 4*I2zz*l3^2*m3^2*p_module*sin(p_angle) + 16*I3zz*l2^2*m3^2*p_module*sin(p_angle) + 32*I2zz*I3zz*m1*p_module*sin(p_angle) + 32*I2zz*I3zz*m2*p_module*sin(p_angle) + 32*I2zz*I3zz*m3*p_module*sin(p_angle) + 4*I2zz*l3^2*m3^2*p_module*sin(2*X2 + 2*X3 - p_angle) + 16*I3zz*l2^2*m2*m3*p_module*sin(2*X2 - p_angle) + 2*CoM3x*l2^2*l3^2*m1*m2*m3 + 4*l2^2*l3^2*m1*m3^2*p_module*sin(p_angle) + 3*l2^2*l3^2*m2*m3^2*p_module*sin(p_angle) + l2^2*l3^2*m2^2*m3*p_module*sin(p_angle) - 4*CoM3x*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m1*m3^2*p_module*sin(2*X3 + p_angle) - l2^2*l3^2*m2*m3^2*p_module*sin(2*X3 + p_angle) + 8*I3zz*l2^2*m1*m2*p_module*sin(p_angle) + 8*I2zz*l3^2*m1*m3*p_module*sin(p_angle) + 32*I3zz*l2^2*m1*m3*p_module*sin(p_angle) + 8*I2zz*l3^2*m2*m3*p_module*sin(p_angle) + 24*I3zz*l2^2*m2*m3*p_module*sin(p_angle) - l2^2*l3^2*m2*m3^2*p_module*sin(2*X2 + 2*X3 - p_angle) + 2*l2^2*l3^2*m1*m3^2*p_module*sin(2*X3 - p_angle) + 2*l2^2*l3^2*m2*m3^2*p_module*sin(2*X2 - p_angle) + l2^2*l3^2*m2^2*m3*p_module*sin(2*X2 - p_angle) + l2^2*l3^2*m2*m3^2*p_module*sin(2*X3 - p_angle) + 2*l2^2*l3^2*m1*m2*m3*p_module*sin(p_angle)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)) - ((Tau3 + (g0*l3*m3*sin(X2 + X3))/2 - (X5^2*l2*l3*m3*sin(X3))/2)*(8*I3zz*l2*m2^2*p_module*sin(X2 - p_angle) - 8*I2zz*l3*m3^2*p_module*sin(X2 + X3 + p_angle) + 16*I3zz*l2*m3^2*p_module*sin(X2 - p_angle) - 8*I2zz*l3*m3^2*p_module*sin(X2 + X3 - p_angle) + 8*I3zz*l2*m2^2*p_module*sin(X2 + p_angle) + 16*I3zz*l2*m3^2*p_module*sin(X2 + p_angle) - 4*l2^2*l3*m1*m3^2*p_module*sin(X2 + X3 + p_angle) + l2^2*l3*m2^2*m3*p_module*sin(X2 + X3 + p_angle) + 2*l2*l3^2*m1*m3^2*p_module*sin(X2 - p_angle) + 3*l2*l3^2*m2*m3^2*p_module*sin(X2 - p_angle) + 2*l2*l3^2*m2^2*m3*p_module*sin(X2 - p_angle) - 8*I2zz*l3*m1*m3*p_module*sin(X2 + X3 + p_angle) - 8*I2zz*l3*m2*m3*p_module*sin(X2 + X3 + p_angle) + 8*I3zz*l2*m1*m2*p_module*sin(X2 - p_angle) + 16*I3zz*l2*m1*m3*p_module*sin(X2 - p_angle) + 24*I3zz*l2*m2*m3*p_module*sin(X2 - p_angle) - 8*CoM3x*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*l2^2*l3*m1*m3^2*p_module*sin(X2 + X3 - p_angle) + 4*l2^2*l3*m1*m3^2*p_module*sin(X2 - X3 + p_angle) - 4*l2^2*l3*m1*m3^2*p_module*sin(X3 - X2 + p_angle) - 2*l2*l3^2*m1*m3^2*p_module*sin(X2 + 2*X3 + p_angle) + 2*l2^2*l3*m2*m3^2*p_module*sin(X2 - X3 + p_angle) - 2*l2^2*l3*m2*m3^2*p_module*sin(X3 - X2 + p_angle) + l2^2*l3*m2^2*m3*p_module*sin(X2 + X3 - p_angle) + l2^2*l3*m2^2*m3*p_module*sin(X2 - X3 + p_angle) - l2^2*l3*m2^2*m3*p_module*sin(X3 - X2 + p_angle) - l2*l3^2*m2*m3^2*p_module*sin(X2 + 2*X3 + p_angle) - 16*CoM3x*I2zz*l3*m1*m3*cos(X2 + X3) - 8*I2zz*l3*m1*m3*p_module*sin(X2 + X3 - p_angle) - 8*I2zz*l3*m2*m3*p_module*sin(X2 + X3 - p_angle) + 4*CoM3x*l2*l3^2*m1*m3^2*cos(X2) + 2*l2*l3^2*m1*m3^2*p_module*sin(X2 + p_angle) + 3*l2*l3^2*m2*m3^2*p_module*sin(X2 + p_angle) + 2*l2*l3^2*m2^2*m3*p_module*sin(X2 + p_angle) + 8*CoM3x*l2^2*l3*m1*m3^2*cos(X2 - X3) - 4*CoM3x*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 16*CoM3x*I3zz*l2*m1*m2*cos(X2) + 32*CoM3x*I3zz*l2*m1*m3*cos(X2) - 2*l2*l3^2*m1*m3^2*p_module*sin(X2 + 2*X3 - p_angle) - l2*l3^2*m2*m3^2*p_module*sin(X2 + 2*X3 - p_angle) + 8*I3zz*l2*m1*m2*p_module*sin(X2 + p_angle) + 16*I3zz*l2*m1*m3*p_module*sin(X2 + p_angle) + 24*I3zz*l2*m2*m3*p_module*sin(X2 + p_angle) + 2*l2*l3^2*m1*m2*m3*p_module*sin(X2 - p_angle) + 2*l2^2*l3*m1*m2*m3*p_module*sin(X2 - X3 + p_angle) - 2*l2^2*l3*m1*m2*m3*p_module*sin(X3 - X2 + p_angle) + 4*CoM3x*l2*l3^2*m1*m2*m3*cos(X2) + 2*l2*l3^2*m1*m2*m3*p_module*sin(X2 + p_angle) + 4*CoM3x*l2^2*l3*m1*m2*m3*cos(X2 - X3)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)) + (((l2*l3*m3*sin(X3)*X6^2)/2 + X5*l2*l3*m3*sin(X3)*X6 + Tau2 + (g0*l3*m3*sin(X2 + X3))/2 + (g0*l2*m2*sin(X2))/2 + g0*l2*m3*sin(X2))*(4*I3zz*l2^2*m2^2*cos(2*X2) - 4*I2zz*l3^2*m3^2 - 16*I3zz*l2^2*m3^2 - 32*I2zz*I3zz*m1 - 32*I2zz*I3zz*m2 - 32*I2zz*I3zz*m3 - 4*l2^2*l3^2*m1*m3^2 - 3*l2^2*l3^2*m2*m3^2 - l2^2*l3^2*m2^2*m3 - 8*I3zz*l2^2*m1*m2 - 8*I2zz*l3^2*m1*m3 - 32*I3zz*l2^2*m1*m3 - 8*I2zz*l3^2*m2*m3 - 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2 + 16*I3zz*l2^2*m3^2*cos(2*X2) + 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) - 2*l2^2*l3^2*m1*m2*m3 + 4*l2^2*l3^2*m1*m3^2*cos(2*X3) + 2*l2^2*l3^2*m2*m3^2*cos(2*X2) + l2^2*l3^2*m2^2*m3*cos(2*X2) + 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + 8*I3zz*l2*m2^2*p_module*sin(X2 - p_angle) + 16*I3zz*l2*m3^2*p_module*sin(X2 - p_angle) - l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) + 16*I3zz*l2^2*m2*m3*cos(2*X2) + 8*I3zz*l2*m2^2*p_module*sin(X2 + p_angle) + 16*I3zz*l2*m3^2*p_module*sin(X2 + p_angle) + 2*l2*l3^2*m1*m3^2*p_module*sin(X2 - p_angle) + 3*l2*l3^2*m2*m3^2*p_module*sin(X2 - p_angle) + 2*l2*l3^2*m2^2*m3*p_module*sin(X2 - p_angle) + 8*I3zz*l2*m1*m2*p_module*sin(X2 - p_angle) + 16*I3zz*l2*m1*m3*p_module*sin(X2 - p_angle) + 24*I3zz*l2*m2*m3*p_module*sin(X2 - p_angle) - 2*l2*l3^2*m1*m3^2*p_module*sin(X2 + 2*X3 + p_angle) - l2*l3^2*m2*m3^2*p_module*sin(X2 + 2*X3 + p_angle) + 4*CoM3x*l2*l3^2*m1*m3^2*cos(X2) + 2*l2*l3^2*m1*m3^2*p_module*sin(X2 + p_angle) + 3*l2*l3^2*m2*m3^2*p_module*sin(X2 + p_angle) + 2*l2*l3^2*m2^2*m3*p_module*sin(X2 + p_angle) - 4*CoM3x*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 16*CoM3x*I3zz*l2*m1*m2*cos(X2) + 32*CoM3x*I3zz*l2*m1*m3*cos(X2) - 2*l2*l3^2*m1*m3^2*p_module*sin(X2 + 2*X3 - p_angle) - l2*l3^2*m2*m3^2*p_module*sin(X2 + 2*X3 - p_angle) + 8*I3zz*l2*m1*m2*p_module*sin(X2 + p_angle) + 16*I3zz*l2*m1*m3*p_module*sin(X2 + p_angle) + 24*I3zz*l2*m2*m3*p_module*sin(X2 + p_angle) + 2*l2*l3^2*m1*m2*m3*p_module*sin(X2 - p_angle) + 4*CoM3x*l2*l3^2*m1*m2*m3*cos(X2) + 2*l2*l3^2*m1*m2*m3*p_module*sin(X2 + p_angle)))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2)) + g0*m1*(CoM3y - p_module*cos(p_angle)) + g0*m2*((l2*sin(X2))/2 - p_module*cos(p_angle)) + (X6^2*l2*l3*m3*sin(X3))/2 + (X5^2*l2*m2*p_module*cos(X2 - p_angle))/2 + X5^2*l2*m3*p_module*cos(X2 - p_angle) + (X5^2*l3*m3*p_module*cos(X2 + X3 - p_angle))/2 + (X6^2*l3*m3*p_module*cos(X2 + X3 - p_angle))/2 + X5*X6*l2*l3*m3*sin(X3) + X5*X6*l3*m3*p_module*cos(X2 + X3 - p_angle);
% f2 = (16*I3zz*Tau2*l2*m2^2*sin(X2) - 32*I2zz*I3zz*g0*m2^2 - 32*I2zz*I3zz*g0*m3^2 - 32*I2zz*I3zz*g0*m1^2 + 32*I3zz*Tau2*l2*m3^2*sin(X2) - 16*I3zz*Tau3*l2*m2^2*sin(X2) - 32*I3zz*Tau3*l2*m3^2*sin(X2) - 8*I3zz*g0*l2^2*m1*m2^2 - 8*I3zz*g0*l2^2*m1^2*m2 - 8*I2zz*g0*l3^2*m1*m3^2 - 8*I2zz*g0*l3^2*m1^2*m3 - 32*I3zz*g0*l2^2*m1*m3^2 - 32*I3zz*g0*l2^2*m1^2*m3 - 8*I2zz*g0*l3^2*m2*m3^2 - 8*I2zz*g0*l3^2*m2^2*m3 - 8*I3zz*g0*l2^2*m2*m3^2 - 8*I3zz*g0*l2^2*m2^2*m3 - 64*I2zz*I3zz*g0*m1*m2 - 64*I2zz*I3zz*g0*m1*m3 - 64*I2zz*I3zz*g0*m2*m3 + 16*I2zz*Tau3*l3*m3^2*sin(X2 + X3) + 4*I3zz*Tau1*l2^2*m2^2*sin(2*X2) + 16*I3zz*Tau1*l2^2*m3^2*sin(2*X2) + 4*I2zz*Tau1*l3^2*m3^2*sin(2*X2 + 2*X3) - 4*g0*l2^2*l3^2*m1^2*m3^2 - g0*l2^2*l3^2*m2^2*m3^2 + (X5^2*l2^3*l3^2*m2^2*m3^2*cos(X2))/2 - 6*g0*l2^2*l3^2*m1*m2*m3^2 - 2*g0*l2^2*l3^2*m1*m2^2*m3 - 2*g0*l2^2*l3^2*m1^2*m2*m3 - 4*Tau2*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 8*Tau3*l2^2*l3*m1*m3^2*sin(X2 - X3) - 2*Tau2*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 4*Tau3*l2*l3^2*m1*m3^2*sin(X2 + 2*X3) - 4*Tau3*l2^2*l3*m2*m3^2*sin(X2 - X3) - 2*Tau3*l2^2*l3*m2^2*m3*sin(X2 - X3) + 2*Tau3*l2*l3^2*m2*m3^2*sin(X2 + 2*X3) + 16*I3zz*Tau2*l2*m1*m2*sin(X2) + 32*I3zz*Tau2*l2*m1*m3*sin(X2) - 16*I3zz*Tau3*l2*m1*m2*sin(X2) + 48*I3zz*Tau2*l2*m2*m3*sin(X2) - 32*I3zz*Tau3*l2*m1*m3*sin(X2) - 48*I3zz*Tau3*l2*m2*m3*sin(X2) + 4*g0*l2^2*l3^2*m1^2*m3^2*cos(2*X3) + g0*l2^2*l3^2*m2^2*m3^2*cos(2*X3) + (X5^2*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 - (X5^2*l2^3*l3^2*m2^2*m3^2*cos(X2 + 2*X3))/2 + (X6^2*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3))/2 + 4*I3zz*X5^2*l2^3*m1*m2^2*cos(X2) + 32*I3zz*X5^2*l2^3*m1*m3^2*cos(X2) + 8*I3zz*X5^2*l2^3*m2*m3^2*cos(X2) + 4*I3zz*X5^2*l2^3*m2^2*m3*cos(X2) - 16*I2zz*g0*l3^2*m1*m2*m3 - 48*I3zz*g0*l2^2*m1*m2*m3 + 16*I2zz*I3zz*X5^2*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l2*m2^2*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m3^2*cos(X2) + 8*Tau3*l2^2*l3*m1*m3^2*sin(X2 + X3) - 2*Tau3*l2^2*l3*m2^2*m3*sin(X2 + X3) + 2*Tau1*l2^2*l3^2*m2*m3^2*sin(2*X2) + Tau1*l2^2*l3^2*m2^2*m3*sin(2*X2) - (X5^2*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 - (X6^2*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3))/2 + 16*I2zz*Tau3*l3*m1*m3*sin(X2 + X3) + 16*I2zz*Tau3*l3*m2*m3*sin(X2 + X3) - Tau1*l2^2*l3^2*m2*m3^2*sin(2*X2 + 2*X3) + 16*I3zz*Tau1*l2^2*m2*m3*sin(2*X2) + 4*I2zz*X5^2*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X5^2*l3^3*m2*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*l3^3*m1*m3^2*cos(X2 + X3) + 4*I2zz*X6^2*l3^3*m2*m3^2*cos(X2 + X3) + 4*Tau2*l2*l3^2*m1*m3^2*sin(X2) + 6*Tau2*l2*l3^2*m2*m3^2*sin(X2) + 4*Tau2*l2*l3^2*m2^2*m3*sin(X2) - 4*Tau3*l2*l3^2*m1*m3^2*sin(X2) - 6*Tau3*l2*l3^2*m2*m3^2*sin(X2) - 4*Tau3*l2*l3^2*m2^2*m3*sin(X2) + 3*X5^2*l2^3*l3^2*m1*m2*m3^2*cos(X2) + X5^2*l2^3*l3^2*m1*m2^2*m3*cos(X2) + X5*X6*l2^2*l3^3*m2^2*m3^2*cos(X2 - X3) - 4*Tau3*l2^2*l3*m1*m2*m3*sin(X2 - X3) + 4*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*X3) + X5^2*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) - X5^2*l2^3*l3^2*m1*m2*m3^2*cos(X2 + 2*X3) + X6^2*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 24*I3zz*X5^2*l2^3*m1*m2*m3*cos(X2) + 8*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X5^2*l2^2*l3*m2^2*m3*cos(X2 + X3) + 8*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X2 + X3) - 2*I3zz*X6^2*l2^2*l3*m2^2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m3^2*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X5^2*l3*m2*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m1*m3*cos(X2 + X3) + 16*I2zz*I3zz*X6^2*l3*m2*m3*cos(X2 + X3) + 4*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(X2) + 6*I2zz*X5^2*l2*l3^2*m2*m3^2*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m2^2*m3*cos(X2) + 4*I2zz*X5^2*l2*l3^2*m1*m3^2*cos(X2 + 2*X3) + 8*I3zz*X5^2*l2^2*l3*m1*m3^2*cos(X2 - X3) + 2*I2zz*X5^2*l2*l3^2*m2*m3^2*cos(X2 + 2*X3) + 4*I3zz*X5^2*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X5^2*l2^2*l3*m2^2*m3*cos(X2 - X3) + 8*I3zz*X6^2*l2^2*l3*m1*m3^2*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m2*m3^2*cos(X2 - X3) + 2*I3zz*X6^2*l2^2*l3*m2^2*m3*cos(X2 - X3) + 16*I2zz*I3zz*X5^2*l2*m1*m2*cos(X2) + 32*I2zz*I3zz*X5^2*l2*m1*m3*cos(X2) + 48*I2zz*I3zz*X5^2*l2*m2*m3*cos(X2) - X5*X6*l2^2*l3^3*m2^2*m3^2*cos(X2 + X3) + 8*I2zz*X5*X6*l3^3*m1*m3^2*cos(X2 + X3) + 8*I2zz*X5*X6*l3^3*m2*m3^2*cos(X2 + X3) + 4*Tau2*l2*l3^2*m1*m2*m3*sin(X2) - 4*Tau3*l2*l3^2*m1*m2*m3*sin(X2) + 2*X5*X6*l2^2*l3^3*m1*m2*m3^2*cos(X2 - X3) + 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X2 + X3) - 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m1*m3*cos(X2 + X3) + 32*I2zz*I3zz*X5*X6*l3*m2*m3*cos(X2 + X3) + 4*I2zz*X5^2*l2*l3^2*m1*m2*m3*cos(X2) + 16*I3zz*X5*X6*l2^2*l3*m1*m3^2*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m2*m3^2*cos(X2 - X3) + 4*I3zz*X5*X6*l2^2*l3*m2^2*m3*cos(X2 - X3) + 4*I3zz*X5^2*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 4*I3zz*X6^2*l2^2*l3*m1*m2*m3*cos(X2 - X3) + 8*I3zz*X5*X6*l2^2*l3*m1*m2*m3*cos(X2 - X3))/(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*X2) - 16*I3zz*l2^2*m3^2*cos(2*X2) - 4*I2zz*l3^2*m3^2*cos(2*X2 + 2*X3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*X3) - 2*l2^2*l3^2*m2*m3^2*cos(2*X2) - l2^2*l3^2*m2^2*m3*cos(2*X2) - 2*l2^2*l3^2*m2*m3^2*cos(2*X3) + l2^2*l3^2*m2*m3^2*cos(2*X2 + 2*X3) - 16*I3zz*l2^2*m2*m3*cos(2*X2));

[d, dot_d, ddot_d, d0]=SimplifiedDistanceNDerivatives4Robot(zeros(6,1));

%% SIMexport
acadoSet('problemname', 'sim');

numSteps = 5;

sim = acado.SIMexport( Ts );

sim.setModel(f);  % set the ODE to be integrated


% set some option for the integration
% sim.set( 'INTEGRATOR_TYPE',             'INT_IRK_RIIA5' );
sim.set( 'INTEGRATOR_TYPE',             'INT_IRK_GL4' );
sim.set( 'NUM_INTEGRATOR_STEPS',        numSteps        );

if EXPORT
    sim.exportCode( 'export_SIM' );
    
    cd export_SIM
    make_acado_integrator('../integrate_tiago')
    cd ..
end

%% MPCexport
acadoSet('problemname', 'mpc');

N = 25;
ocp = acado.OCP( 0.0, N*Ts, N );

% set eye matrices to default values: real values will be set before
% simulation
% W_mat = eye(10,10);
W_mat = eye(12,12);
W = acado.BMatrix(W_mat);
WN_mat = eye(7,7);
WN = acado.BMatrix(WN_mat);

ocp.minimizeLSQ( W, h );   % set objective function
ocp.minimizeLSQEndTerm( WN, hN );  % set objective function for final state

% dynamic Model
ocp.setModel(f);

% % joint limits
ocp.subjectTo( -3*pi/4 <= x2 <= pi/2 );
ocp.subjectTo( -5*pi/6 <= x3 <= 5*pi/6 );

% joint velocity limits
% ocp.subjectTo( -1 <= x4 <= 1 );
ocp.subjectTo( -5 <= x4 <= 5 );
ocp.subjectTo( -5 <= x5 <= 5 );
ocp.subjectTo( -5 <= x6 <= 5 );

% joint force/torque limits
% TAU1_MAX = 60;
% TAU2_3_MAX = 39;
% ocp.subjectTo( -TAU1_MAX <= tau1 <= TAU1_MAX);
% ocp.subjectTo(-TAU2_3_MAX <= tau2 <= TAU2_3_MAX);
% ocp.subjectTo(-TAU2_3_MAX <= tau3 <= TAU2_3_MAX);

TAU1_MAX = 500;
TAU2_3_MAX = 100;
ocp.subjectTo( -TAU1_MAX <= tau1 <= TAU1_MAX);
ocp.subjectTo(-TAU2_3_MAX <= tau2 <= TAU2_3_MAX);
ocp.subjectTo(-TAU2_3_MAX <= tau3 <= TAU2_3_MAX);


n_points_link=1;
ds=0.01;


% classical collision avoidance constraint
if CONSTRAINT_TYPE == 1

    ocp.subjectTo(-(norm([x1 - rt1 + rt4;(hb + ht + rw)/2] - [x_obs;y_obs]) - r_obs - ((hb+ht+rw)/2) - ds) <= 0);
    ocp.subjectTo(-(norm([x1 - rt1 + rt4 - (l2/2)*sin(x2); hb + ht + rw + (l2/2)*cos(x2)] - [x_obs;y_obs]) - r_obs - (l2/2) - ds) <= 0);
    ocp.subjectTo(-(norm([x1 - rt1 + rt4 - (l3/2)*sin(x2 + x3) - l2*sin(x2); hb + ht + rw + (l3/2)*cos(x2 + x3) + l2*cos(x2)] - [x_obs;y_obs]) - r_obs - (l3/2) -ds) <= 0);

elseif CONSTRAINT_TYPE == 3
    %--------------------------------------------------------------------------
                             % VELOCITY DAMPER CONSTRAINT
    %--------------------------------------------------------------------------
    epsilon=2.25;
    di=0.1;
%     epsilon=0.2;
%     di = 0.25;
    
    for i = 1:3
        ocp.subjectTo( eval((dot_d(i)+Ts*ddot_d(i)+epsilon*(d(i)-ds)/(di-ds))) >=0);
    end
    
%     k=0;
%     for i=1:3
%         if d0(i) <= ds
%             k=k+1; %just counting how many bodies of the robot are inside the security distance
%         end
%     end
% 
%     if k>0
%         warning('The body of the robot is inside the security distance! Velocity damper constraints are not enforced.')
%         pause(5)
%     else
%         for i = 1:3
% %             ocp.subjectTo( eval(((((di-d(i))^2)^(1/2)+(di-d(i)))/(2*((di-d(i))^2)^(1/2)))*(dot_d(i)+Ts*ddot_d(i)+epsilon*(d(i)-ds)/(di-ds))) >=0);
%             ocp.subjectTo( eval((dot_d(i)+Ts*ddot_d(i)+epsilon*(d(i)-ds)/(di-ds))) >=0);
% 
%         end
%     end
    
    %---------------------------------------------------------------------------
elseif CONSTRAINT_TYPE == 2
    %--------------------------------------------------------------------------
                             % CBF-BASED CONSTRAINT
    %--------------------------------------------------------------------------
%     x0=[-2; -pi/4; -pi/4; 0; 0; 0];
%     [H, DHDT1,DHDT2,K]=CBF_Const_TIAGO(n_points_link,x0);
%     [H, DHDT1,DHDT2,K]=CBF_Const_TIAGO(n_points_link);
%     j=1;
%     while j<= 4
%         i=1;
%         while i<= n_points_link+1 
%         if H(j,i) ==0
%                 break
%         else
%         ocp.subjectTo(eval(DHDT2{j}(i) + K{j,i}*[H(j,i) ; DHDT1{j}(i)]) >=0);
%         end
%             i = i+1;
%         end
%             j =j+1;
%     end
    
    % poles to be assigned in the exponential control barrier function
%     P = [5 10];
%     P = [20 20];
%     P = [500 250];
    % gain to have those poles
%     K = [P(1)*P(2) P(1)+P(2)];
    K = [2500 100];  % -> P = [50 50];

    for i = 1:3
        d(i) = d(i) - ds;
        ocp.subjectTo( eval(ddot_d(i) + K * [d(i);dot_d(i)] ) >=0);
    end
    
    %--------------------------------------------------------------------------
end

% ---------------------------------- Balance constraint -------------------
% -------------------------------------------------------------------------
if CONSIDER_BALANCE
    % no atan2 (point shifted forward from contant point)
    display("Balance considered");
    % shifted model
    ocp.subjectTo(-(-(8*I3zz*l2^2*m2^2*tau2 + 8*I2zz*l3^2*m3^2*tau2 + 32*I3zz*l2^2*m3^2*tau2 + 64*I2zz*I3zz*m1*tau2 + 64*I2zz*I3zz*m2*tau2 + 64*I2zz*I3zz*m3*tau2 - 64*CoM3x*I2zz*I3zz*m1*tau1 - 8*I3zz*hb*l2^2*m2^2*tau1 - 8*I2zz*hb*l3^2*m3^2*tau1 - 32*I3zz*hb*l2^2*m3^2*tau1 - 8*I3zz*ht*l2^2*m2^2*tau1 - 8*I2zz*ht*l3^2*m3^2*tau1 - 32*I3zz*ht*l2^2*m3^2*tau1 - 8*I2zz*l3^2*m3^2*tau2*cos(2*x2 + 2*x3) - 8*I3zz*l2^2*m2^2*rw*tau1 - 8*I2zz*l3^2*m3^2*rw*tau1 - 32*I3zz*l2^2*m3^2*rw*tau1 - 64*I2zz*I3zz*hb*m1*tau1 - 64*I2zz*I3zz*hb*m2*tau1 - 64*I2zz*I3zz*hb*m3*tau1 - 64*I2zz*I3zz*ht*m1*tau1 - 64*I2zz*I3zz*ht*m2*tau1 - 64*I2zz*I3zz*ht*m3*tau1 - 64*I2zz*I3zz*m1*rw*tau1 - 64*I2zz*I3zz*m2*rw*tau1 - 64*I2zz*I3zz*m3*rw*tau1 - 64*CoM3y*I2zz*I3zz*g0*m1^2 - 32*I2zz*I3zz*db*g0*m1^2 - 32*I2zz*I3zz*db*g0*m2^2 - 32*I2zz*I3zz*db*g0*m3^2 - 64*I2zz*I3zz*g0*m1^2*rt1 - 64*I2zz*I3zz*g0*m2^2*rt1 - 64*I2zz*I3zz*g0*m3^2*rt1 + 64*I2zz*I3zz*g0*m1^2*rt4 + 64*I2zz*I3zz*g0*m2^2*rt4 + 64*I2zz*I3zz*g0*m3^2*rt4 + 8*l2^2*l3^2*m1*m3^2*tau2 + 6*l2^2*l3^2*m2*m3^2*tau2 + 2*l2^2*l3^2*m2^2*m3*tau2 + 16*I3zz*l2^2*m1*m2*tau2 + 16*I2zz*l3^2*m1*m3*tau2 + 64*I3zz*l2^2*m1*m3*tau2 + 16*I2zz*l3^2*m2*m3*tau2 + 48*I3zz*l2^2*m2*m3*tau2 - 8*I3zz*l2^2*m2^2*tau2*cos(2*x2) - 32*I3zz*l2^2*m3^2*tau2*cos(2*x2) - 16*CoM3x*I3zz*l2^2*m1*m2*tau1 - 16*CoM3x*I2zz*l3^2*m1*m3*tau1 - 64*CoM3x*I3zz*l2^2*m1*m3*tau1 - 8*hb*l2^2*l3^2*m1*m3^2*tau1 - 6*hb*l2^2*l3^2*m2*m3^2*tau1 - 2*hb*l2^2*l3^2*m2^2*m3*tau1 - 8*ht*l2^2*l3^2*m1*m3^2*tau1 - 6*ht*l2^2*l3^2*m2*m3^2*tau1 - 2*ht*l2^2*l3^2*m2^2*m3*tau1 + 2*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2 + 2*x3) - 8*l2^2*l3^2*m1*m3^2*rw*tau1 - 6*l2^2*l3^2*m2*m3^2*rw*tau1 - 2*l2^2*l3^2*m2^2*m3*rw*tau1 - 16*I3zz*hb*l2^2*m1*m2*tau1 - 16*I2zz*hb*l3^2*m1*m3*tau1 - 64*I3zz*hb*l2^2*m1*m3*tau1 - 16*I2zz*hb*l3^2*m2*m3*tau1 - 48*I3zz*hb*l2^2*m2*m3*tau1 - 16*I3zz*ht*l2^2*m1*m2*tau1 - 16*I2zz*ht*l3^2*m1*m3*tau1 - 64*I3zz*ht*l2^2*m1*m3*tau1 - 16*I2zz*ht*l3^2*m2*m3*tau1 - 48*I3zz*ht*l2^2*m2*m3*tau1 - 16*I3zz*l2^2*m1*m2*rw*tau1 - 16*I2zz*l3^2*m1*m3*rw*tau1 - 64*I3zz*l2^2*m1*m3*rw*tau1 - 16*I2zz*l3^2*m2*m3*rw*tau1 - 48*I3zz*l2^2*m2*m3*rw*tau1 - 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 - 8*CoM3y*I3zz*g0*l2^2*m1*m2^2 - 16*CoM3y*I3zz*g0*l2^2*m1^2*m2 - 8*CoM3y*I2zz*g0*l3^2*m1*m3^2 - 16*CoM3y*I2zz*g0*l3^2*m1^2*m3 - 32*CoM3y*I3zz*g0*l2^2*m1*m3^2 - 64*CoM3y*I3zz*g0*l2^2*m1^2*m3 + 8*I3zz*hb*l2^2*m2^2*tau1*cos(2*x2) + 32*I3zz*hb*l2^2*m3^2*tau1*cos(2*x2) + 8*I3zz*ht*l2^2*m2^2*tau1*cos(2*x2) + 32*I3zz*ht*l2^2*m3^2*tau1*cos(2*x2) - 4*db*g0*l2^2*l3^2*m1^2*m3^2 - db*g0*l2^2*l3^2*m2^2*m3^2 + 8*I3zz*l2^2*m2^2*rw*tau1*cos(2*x2) + 32*I3zz*l2^2*m3^2*rw*tau1*cos(2*x2) + 4*I3zz*db*l2^2*m2^2*tau1*sin(2*x2) + 16*I3zz*db*l2^2*m3^2*tau1*sin(2*x2) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt1 - 2*g0*l2^2*l3^2*m2^2*m3^2*rt1 + 8*g0*l2^2*l3^2*m1^2*m3^2*rt4 + 2*g0*l2^2*l3^2*m2^2*m3^2*rt4 + 8*I3zz*l2^2*m2^2*rt1*tau1*sin(2*x2) + 32*I3zz*l2^2*m3^2*rt1*tau1*sin(2*x2) - 8*I3zz*l2^2*m2^2*rt4*tau1*sin(2*x2) - 32*I3zz*l2^2*m3^2*rt4*tau1*sin(2*x2) - 64*CoM3y*I2zz*I3zz*g0*m1*m2 - 64*CoM3y*I2zz*I3zz*g0*m1*m3 - 8*I3zz*db*g0*l2^2*m1*m2^2 - 8*I3zz*db*g0*l2^2*m1^2*m2 - 8*I2zz*db*g0*l3^2*m1*m3^2 - 8*I2zz*db*g0*l3^2*m1^2*m3 - 32*I3zz*db*g0*l2^2*m1*m3^2 - 32*I3zz*db*g0*l2^2*m1^2*m3 - 8*I2zz*db*g0*l3^2*m2*m3^2 - 8*I2zz*db*g0*l3^2*m2^2*m3 - 8*I3zz*db*g0*l2^2*m2*m3^2 - 8*I3zz*db*g0*l2^2*m2^2*m3 + 16*I2zz*db*l3*m3^2*tau3*sin(x2 + x3) - 16*I3zz*g0*l2^2*m1*m2^2*rt1 - 16*I3zz*g0*l2^2*m1^2*m2*rt1 - 16*I2zz*g0*l3^2*m1*m3^2*rt1 - 16*I2zz*g0*l3^2*m1^2*m3*rt1 - 64*I3zz*g0*l2^2*m1*m3^2*rt1 - 64*I3zz*g0*l2^2*m1^2*m3*rt1 - 16*I2zz*g0*l3^2*m2*m3^2*rt1 - 16*I2zz*g0*l3^2*m2^2*m3*rt1 - 16*I3zz*g0*l2^2*m2*m3^2*rt1 - 16*I3zz*g0*l2^2*m2^2*m3*rt1 + 16*I3zz*g0*l2^2*m1*m2^2*rt4 + 16*I3zz*g0*l2^2*m1^2*m2*rt4 + 16*I2zz*g0*l3^2*m1*m3^2*rt4 + 16*I2zz*g0*l3^2*m1^2*m3*rt4 + 64*I3zz*g0*l2^2*m1*m3^2*rt4 + 64*I3zz*g0*l2^2*m1^2*m3*rt4 + 16*I2zz*g0*l3^2*m2*m3^2*rt4 + 16*I2zz*g0*l3^2*m2^2*m3*rt4 + 16*I3zz*g0*l2^2*m2*m3^2*rt4 + 16*I3zz*g0*l2^2*m2^2*m3*rt4 + 32*I2zz*l3*m3^2*rt1*tau3*sin(x2 + x3) - 32*I2zz*l3*m3^2*rt4*tau3*sin(x2 + x3) + 8*I2zz*hb*l3^2*m3^2*tau1*cos(2*x2 + 2*x3) + 8*I2zz*ht*l3^2*m3^2*tau1*cos(2*x2 + 2*x3) - 64*I2zz*I3zz*db*g0*m1*m2 - 64*I2zz*I3zz*db*g0*m1*m3 - 64*I2zz*I3zz*db*g0*m2*m3 + 8*I2zz*l3^2*m3^2*rw*tau1*cos(2*x2 + 2*x3) + 4*I2zz*db*l3^2*m3^2*tau1*sin(2*x2 + 2*x3) - 128*I2zz*I3zz*g0*m1*m2*rt1 - 128*I2zz*I3zz*g0*m1*m3*rt1 - 128*I2zz*I3zz*g0*m2*m3*rt1 + 128*I2zz*I3zz*g0*m1*m2*rt4 + 128*I2zz*I3zz*g0*m1*m3*rt4 + 128*I2zz*I3zz*g0*m2*m3*rt4 + 16*I3zz*db*l2*m2^2*tau2*sin(x2) - 16*I3zz*db*l2*m2^2*tau3*sin(x2) + 32*I3zz*db*l2*m3^2*tau2*sin(x2) - 32*I3zz*db*l2*m3^2*tau3*sin(x2) + 8*I2zz*l3^2*m3^2*rt1*tau1*sin(2*x2 + 2*x3) - 8*I2zz*l3^2*m3^2*rt4*tau1*sin(2*x2 + 2*x3) + 4*l2^2*l3^2*m1*m2*m3*tau2 + 32*I3zz*l2*m2^2*rt1*tau2*sin(x2) - 32*I3zz*l2*m2^2*rt1*tau3*sin(x2) + 64*I3zz*l2*m3^2*rt1*tau2*sin(x2) - 64*I3zz*l2*m3^2*rt1*tau3*sin(x2) - 32*I3zz*l2*m2^2*rt4*tau2*sin(x2) + 32*I3zz*l2*m2^2*rt4*tau3*sin(x2) - 64*I3zz*l2*m3^2*rt4*tau2*sin(x2) + 64*I3zz*l2*m3^2*rt4*tau3*sin(x2) - 8*l2^2*l3^2*m1*m3^2*tau2*cos(2*x3) - 4*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2) - 2*l2^2*l3^2*m2^2*m3*tau2*cos(2*x2) - 4*l2^2*l3^2*m2*m3^2*tau2*cos(2*x3) - 8*CoM3x*l2^2*l3^2*m1*m3^2*tau1 - 32*I3zz*l2^2*m2*m3*tau2*cos(2*x2) + 16*I2zz*I3zz*db*l3*m3^2*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m3^2*x6^2*cos(x2 + x3) - 4*hb*l2^2*l3^2*m1*m2*m3*tau1 - 4*ht*l2^2*l3^2*m1*m2*m3*tau1 + 8*CoM3x*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) - 4*l2^2*l3^2*m1*m2*m3*rw*tau1 + 32*I2zz*I3zz*l3*m3^2*rt1*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt1*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt4*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt4*x6^2*cos(x2 + x3) - 16*CoM3x*l2^2*l3*m1*m3^2*tau3*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m2^2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m3^2*x5^2*cos(x2) - 6*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 - 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 - 4*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 8*hb*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) + 4*hb*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2) + 2*hb*l2^2*l3^2*m2^2*m3*tau1*cos(2*x2) + 4*hb*l2^2*l3^2*m2*m3^2*tau1*cos(2*x3) + 8*ht*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) + 4*ht*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2) + 2*ht*l2^2*l3^2*m2^2*m3*tau1*cos(2*x2) + 4*ht*l2^2*l3^2*m2*m3^2*tau1*cos(2*x3) + 32*I2zz*I3zz*l2*m2^2*rt1*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m3^2*rt1*x5^2*cos(x2) - 32*I2zz*I3zz*l2*m2^2*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m3^2*rt4*x5^2*cos(x2) + 8*l2^2*l3^2*m1*m3^2*rw*tau1*cos(2*x3) + 4*l2^2*l3^2*m2*m3^2*rw*tau1*cos(2*x2) + 2*l2^2*l3^2*m2^2*m3*rw*tau1*cos(2*x2) + 4*l2^2*l3^2*m2*m3^2*rw*tau1*cos(2*x3) + 2*db*l2^2*l3^2*m2*m3^2*tau1*sin(2*x2) + db*l2^2*l3^2*m2^2*m3*tau1*sin(2*x2) - 32*CoM3x*I2zz*l3*m1*m3*tau3*cos(x2 + x3) + 4*l2^2*l3^2*m2*m3^2*rt1*tau1*sin(2*x2) + 2*l2^2*l3^2*m2^2*m3*rt1*tau1*sin(2*x2) - 4*l2^2*l3^2*m2*m3^2*rt4*tau1*sin(2*x2) - 2*l2^2*l3^2*m2^2*m3*rt4*tau1*sin(2*x2) - 8*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(x2) + 8*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(x2) - 16*CoM3y*I2zz*g0*l3^2*m1*m2*m3 - 48*CoM3y*I3zz*g0*l2^2*m1*m2*m3 + 32*I3zz*hb*l2^2*m2*m3*tau1*cos(2*x2) + 32*I3zz*ht*l2^2*m2*m3*tau1*cos(2*x2) - 6*db*g0*l2^2*l3^2*m1*m2*m3^2 - 2*db*g0*l2^2*l3^2*m1*m2^2*m3 - 2*db*g0*l2^2*l3^2*m1^2*m2*m3 + 8*db*l2^2*l3*m1*m3^2*tau3*sin(x2 + x3) - 2*db*l2^2*l3*m2^2*m3*tau3*sin(x2 + x3) + 32*I3zz*l2^2*m2*m3*rw*tau1*cos(2*x2) + 16*I3zz*db*l2^2*m2*m3*tau1*sin(2*x2) + 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) - 12*g0*l2^2*l3^2*m1*m2*m3^2*rt1 - 4*g0*l2^2*l3^2*m1*m2^2*m3*rt1 - 4*g0*l2^2*l3^2*m1^2*m2*m3*rt1 + 12*g0*l2^2*l3^2*m1*m2*m3^2*rt4 + 4*g0*l2^2*l3^2*m1*m2^2*m3*rt4 + 4*g0*l2^2*l3^2*m1^2*m2*m3*rt4 + 16*l2^2*l3*m1*m3^2*rt1*tau3*sin(x2 + x3) - 4*l2^2*l3*m2^2*m3*rt1*tau3*sin(x2 + x3) - 16*l2^2*l3*m1*m3^2*rt4*tau3*sin(x2 + x3) + 4*l2^2*l3*m2^2*m3*rt4*tau3*sin(x2 + x3) - (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 + x3))/2 - (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 + x3))/2 - 2*hb*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2 + 2*x3) - 2*ht*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2 + 2*x3) + 32*I3zz*l2^2*m2*m3*rt1*tau1*sin(2*x2) - 32*I3zz*l2^2*m2*m3*rt4*tau1*sin(2*x2) - 32*CoM3x*I3zz*l2*m1*m2*tau2*cos(x2) + 32*CoM3x*I3zz*l2*m1*m2*tau3*cos(x2) - 64*CoM3x*I3zz*l2*m1*m3*tau2*cos(x2) + 64*CoM3x*I3zz*l2*m1*m3*tau3*cos(x2) - 16*I2zz*db*g0*l3^2*m1*m2*m3 - 48*I3zz*db*g0*l2^2*m1*m2*m3 - 2*l2^2*l3^2*m2*m3^2*rw*tau1*cos(2*x2 + 2*x3) + 16*I2zz*db*l3*m1*m3*tau3*sin(x2 + x3) + 16*I2zz*db*l3*m2*m3*tau3*sin(x2 + x3) - db*l2^2*l3^2*m2*m3^2*tau1*sin(2*x2 + 2*x3) + 8*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*sin(x2 + x3) + 8*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*sin(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 + x3) + 8*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*x2) + 32*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*x2) - 32*I2zz*g0*l3^2*m1*m2*m3*rt1 - 96*I3zz*g0*l2^2*m1*m2*m3*rt1 + 32*I2zz*g0*l3^2*m1*m2*m3*rt4 + 96*I3zz*g0*l2^2*m1*m2*m3*rt4 + 4*db*l2*l3^2*m1*m3^2*tau2*sin(x2) - 4*db*l2*l3^2*m1*m3^2*tau3*sin(x2) + 6*db*l2*l3^2*m2*m3^2*tau2*sin(x2) + 4*db*l2*l3^2*m2^2*m3*tau2*sin(x2) - 6*db*l2*l3^2*m2*m3^2*tau3*sin(x2) - 4*db*l2*l3^2*m2^2*m3*tau3*sin(x2) + 4*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*x3) + 32*I2zz*l3*m1*m3*rt1*tau3*sin(x2 + x3) + 32*I2zz*l3*m2*m3*rt1*tau3*sin(x2 + x3) - 32*I2zz*l3*m1*m3*rt4*tau3*sin(x2 + x3) - 32*I2zz*l3*m2*m3*rt4*tau3*sin(x2 + x3) - 2*l2^2*l3^2*m2*m3^2*rt1*tau1*sin(2*x2 + 2*x3) + 2*l2^2*l3^2*m2*m3^2*rt4*tau1*sin(2*x2 + 2*x3) + 8*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(x2 + 2*x3) + 16*CoM3x*l2^2*l3*m1*m3^2*tau3*cos(x2 - x3) - 8*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(x2 + 2*x3) + 4*I2zz*db*l3^3*m1*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m1*m3^2*x6^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x6^2*cos(x2 + x3) + 8*l2*l3^2*m1*m3^2*rt1*tau2*sin(x2) - 8*l2*l3^2*m1*m3^2*rt1*tau3*sin(x2) + 12*l2*l3^2*m2*m3^2*rt1*tau2*sin(x2) + 8*l2*l3^2*m2^2*m3*rt1*tau2*sin(x2) - 12*l2*l3^2*m2*m3^2*rt1*tau3*sin(x2) - 8*l2*l3^2*m2^2*m3*rt1*tau3*sin(x2) - 8*l2*l3^2*m1*m3^2*rt4*tau2*sin(x2) + 8*l2*l3^2*m1*m3^2*rt4*tau3*sin(x2) - 12*l2*l3^2*m2*m3^2*rt4*tau2*sin(x2) - 8*l2*l3^2*m2^2*m3*rt4*tau2*sin(x2) + 12*l2*l3^2*m2*m3^2*rt4*tau3*sin(x2) + 8*l2*l3^2*m2^2*m3*rt4*tau3*sin(x2) - 8*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*x2) - 32*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*x2) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*x3) + 2*g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*x3) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*x3) - 2*g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*x3) + (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2))/2 + 8*I2zz*l3^3*m1*m3^2*rt1*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m1*m3^2*rt1*x6^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt1*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt1*x6^2*cos(x2 + x3) - 8*I2zz*l3^3*m1*m3^2*rt4*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m1*m3^2*rt4*x6^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt4*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt4*x6^2*cos(x2 + x3) + 16*I3zz*db*l2*m1*m2*tau2*sin(x2) - 16*I3zz*db*l2*m1*m2*tau3*sin(x2) + 32*I3zz*db*l2*m1*m3*tau2*sin(x2) - 32*I3zz*db*l2*m1*m3*tau3*sin(x2) + 48*I3zz*db*l2*m2*m3*tau2*sin(x2) - 48*I3zz*db*l2*m2*m3*tau3*sin(x2) + 8*CoM3x*I3zz*l2^3*m1*m2^2*x5^2*sin(x2) + 64*CoM3x*I3zz*l2^3*m1*m3^2*x5^2*sin(x2) + l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2) - l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2) + 32*I3zz*l2*m1*m2*rt1*tau2*sin(x2) - 32*I3zz*l2*m1*m2*rt1*tau3*sin(x2) + 64*I3zz*l2*m1*m3*rt1*tau2*sin(x2) - 64*I3zz*l2*m1*m3*rt1*tau3*sin(x2) + 96*I3zz*l2*m2*m3*rt1*tau2*sin(x2) - 32*I3zz*l2*m1*m2*rt4*tau2*sin(x2) - 96*I3zz*l2*m2*m3*rt1*tau3*sin(x2) + 32*I3zz*l2*m1*m2*rt4*tau3*sin(x2) - 64*I3zz*l2*m1*m3*rt4*tau2*sin(x2) + 64*I3zz*l2*m1*m3*rt4*tau3*sin(x2) - 96*I3zz*l2*m2*m3*rt4*tau2*sin(x2) + 96*I3zz*l2*m2*m3*rt4*tau3*sin(x2) + 4*I3zz*db*l2^3*m1*m2^2*x5^2*cos(x2) + 32*I3zz*db*l2^3*m1*m3^2*x5^2*cos(x2) + 8*I3zz*db*l2^3*m2*m3^2*x5^2*cos(x2) + 4*I3zz*db*l2^3*m2^2*m3*x5^2*cos(x2) + 8*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*x2 + 2*x3) - 4*db*l2*l3^2*m1*m3^2*tau2*sin(x2 + 2*x3) - 8*db*l2^2*l3*m1*m3^2*tau3*sin(x2 - x3) + 4*db*l2*l3^2*m1*m3^2*tau3*sin(x2 + 2*x3) - 2*db*l2*l3^2*m2*m3^2*tau2*sin(x2 + 2*x3) - 4*db*l2^2*l3*m2*m3^2*tau3*sin(x2 - x3) - 2*db*l2^2*l3*m2^2*m3*tau3*sin(x2 - x3) + 2*db*l2*l3^2*m2*m3^2*tau3*sin(x2 + 2*x3) + 8*I3zz*l2^3*m1*m2^2*rt1*x5^2*cos(x2) + 64*I3zz*l2^3*m1*m3^2*rt1*x5^2*cos(x2) + 16*I3zz*l2^3*m2*m3^2*rt1*x5^2*cos(x2) + 8*I3zz*l2^3*m2^2*m3*rt1*x5^2*cos(x2) - 8*I3zz*l2^3*m1*m2^2*rt4*x5^2*cos(x2) - 64*I3zz*l2^3*m1*m3^2*rt4*x5^2*cos(x2) - 16*I3zz*l2^3*m2*m3^2*rt4*x5^2*cos(x2) - 8*I3zz*l2^3*m2^2*m3*rt4*x5^2*cos(x2) - 8*l2*l3^2*m1*m3^2*rt1*tau2*sin(x2 + 2*x3) - 16*l2^2*l3*m1*m3^2*rt1*tau3*sin(x2 - x3) + 8*l2*l3^2*m1*m3^2*rt1*tau3*sin(x2 + 2*x3) - 4*l2*l3^2*m2*m3^2*rt1*tau2*sin(x2 + 2*x3) - 8*l2^2*l3*m2*m3^2*rt1*tau3*sin(x2 - x3) - 4*l2^2*l3*m2^2*m3*rt1*tau3*sin(x2 - x3) + 4*l2*l3^2*m2*m3^2*rt1*tau3*sin(x2 + 2*x3) + 8*l2*l3^2*m1*m3^2*rt4*tau2*sin(x2 + 2*x3) + 16*l2^2*l3*m1*m3^2*rt4*tau3*sin(x2 - x3) - 8*l2*l3^2*m1*m3^2*rt4*tau3*sin(x2 + 2*x3) + 4*l2*l3^2*m2*m3^2*rt4*tau2*sin(x2 + 2*x3) + 8*l2^2*l3*m2*m3^2*rt4*tau3*sin(x2 - x3) + 4*l2^2*l3*m2^2*m3*rt4*tau3*sin(x2 - x3) - 4*l2*l3^2*m2*m3^2*rt4*tau3*sin(x2 + 2*x3) - 8*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*x2 + 2*x3) + (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 - x3))/2 + (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 - x3))/2 - (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2 + 2*x3))/2 + l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 - x3) + l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 - x3) - l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2 + 2*x3) - l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 - x3) - l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 - x3) + l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2 + 2*x3) - 4*CoM3x*l2^2*l3^2*m1*m2*m3*tau1 + 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 - x3) - 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 + x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 + x3) + 32*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*sin(x2 + x3) + 32*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*sin(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 + x3) + 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2) + 16*I2zz*I3zz*db*l3*m1*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m1*m3*x6^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x6^2*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2) + 6*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m2^2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m3^2*x5*x6*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt1*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt1*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt1*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt1*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt4*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt4*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt4*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt4*x6^2*cos(x2 + x3) + 32*CoM3x*I2zz*I3zz*l2*m1*m2*x5^2*sin(x2) + 64*CoM3x*I2zz*I3zz*l2*m1*m3*x5^2*sin(x2) + 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2) + 12*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m2^2*m3*rt1*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2) - 12*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m2^2*m3*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l3*m3^2*rt1*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m3^2*rt4*x5*x6*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m1*m2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m1*m3*x5^2*cos(x2) + 48*I2zz*I3zz*db*l2*m2*m3*x5^2*cos(x2) + 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2 + 2*x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 - x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 - x3) + 32*I2zz*I3zz*l2*m1*m2*rt1*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m1*m3*rt1*x5^2*cos(x2) + 96*I2zz*I3zz*l2*m2*m3*rt1*x5^2*cos(x2) - 32*I2zz*I3zz*l2*m1*m2*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m1*m3*rt4*x5^2*cos(x2) - 96*I2zz*I3zz*l2*m2*m3*rt4*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 - x3) + 2*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x5^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x6^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 - x3) - 8*CoM3x*l2*l3^2*m1*m2*m3*tau2*cos(x2) + 8*CoM3x*l2*l3^2*m1*m2*m3*tau3*cos(x2) + 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 - x3) + 4*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt1*x5^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt1*x6^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 - x3) - 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 - x3) - 4*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt4*x5^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt4*x6^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 - x3) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2) + 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*x2) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2) - 2*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*x2) - db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 + x3) + 32*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*x2) + 4*db*l2*l3^2*m1*m2*m3*tau2*sin(x2) - 4*db*l2*l3^2*m1*m2*m3*tau3*sin(x2) + 4*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) + 6*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2) + 2*CoM3x*l2^3*l3^2*m1*m2^2*m3*x5^2*sin(x2) + 16*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*sin(x2 + x3) - 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 + x3) + 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 + x3) + 8*CoM3x*l2^2*l3*m1*m2*m3*tau3*cos(x2 - x3) + 8*l2*l3^2*m1*m2*m3*rt1*tau2*sin(x2) - 8*l2*l3^2*m1*m2*m3*rt1*tau3*sin(x2) - 8*l2*l3^2*m1*m2*m3*rt4*tau2*sin(x2) + 8*l2*l3^2*m1*m2*m3*rt4*tau3*sin(x2) - 32*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*x2) + 8*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*x3) - 8*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*x3) + 3*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2) + db*l2^3*l3^2*m1*m2^2*m3*x5^2*cos(x2) + 8*I2zz*db*l3^3*m1*m3^2*x5*x6*cos(x2 + x3) + 8*I2zz*db*l3^3*m2*m3^2*x5*x6*cos(x2 + x3) - 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2 + 2*x3) + 48*CoM3x*I3zz*l2^3*m1*m2*m3*x5^2*sin(x2) + 6*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2) + 2*l2^3*l3^2*m1*m2^2*m3*rt1*x5^2*cos(x2) - 6*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2) - 2*l2^3*l3^2*m1*m2^2*m3*rt4*x5^2*cos(x2) + 16*I2zz*l3^3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) + 16*I2zz*l3^3*m2*m3^2*rt1*x5*x6*cos(x2 + x3) - 16*I2zz*l3^3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) - 16*I2zz*l3^3*m2*m3^2*rt4*x5*x6*cos(x2 + x3) + 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2 + 2*x3) + 24*I3zz*db*l2^3*m1*m2*m3*x5^2*cos(x2) - 4*db*l2^2*l3*m1*m2*m3*tau3*sin(x2 - x3) + 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*sin(x2 - x3) + 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*sin(x2 - x3) - 2*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2 + 2*x3) + 48*I3zz*l2^3*m1*m2*m3*rt1*x5^2*cos(x2) - 48*I3zz*l2^3*m1*m2*m3*rt4*x5^2*cos(x2) - 8*l2^2*l3*m1*m2*m3*rt1*tau3*sin(x2 - x3) + 8*l2^2*l3*m1*m2*m3*rt4*tau3*sin(x2 - x3) + db*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2 - x3) + db*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2 - x3) - db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2 + 2*x3) + db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 - x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 + x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 + x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt1*x5^2*cos(x2 - x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt1*x6^2*cos(x2 - x3) - 2*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt4*x5^2*cos(x2 - x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt4*x6^2*cos(x2 - x3) + 2*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2 - x3) + 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 + x3) + 4*l2^2*l3^3*m1*m2*m3^2*rt1*x5*x6*cos(x2 - x3) - 4*l2^2*l3^3*m1*m2*m3^2*rt4*x5*x6*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 + x3) - 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 + x3) + 8*CoM3x*I2zz*l2*l3^2*m1*m2*m3*x5^2*sin(x2) + 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*sin(x2 + x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 + x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m1*m3*x5*x6*cos(x2 + x3) + 32*I2zz*I3zz*db*l3*m2*m3*x5*x6*cos(x2 + x3) + 8*I2zz*l2*l3^2*m1*m2*m3*rt1*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m1*m2*m3*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l3*m1*m3*rt1*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m2*m3*rt1*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m1*m3*rt4*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m2*m3*rt4*x5*x6*cos(x2 + x3) + 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*sin(x2 - x3) + 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*sin(x2 - x3) + 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x6^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x6^2*cos(x2 - x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m2*m3^2*rt1*x5*x6*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 - x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m2*m3^2*rt4*x5*x6*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 - x3) + 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*sin(x2 - x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*sin(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m1*m2*m3*rt1*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m1*m2*m3*rt4*x5*x6*cos(x2 - x3))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)))) <= 0);
    ocp.subjectTo(-(-(64*CoM3x*I2zz*I3zz*m1*tau1 - 8*I2zz*l3^2*m3^2*tau2 - 32*I3zz*l2^2*m3^2*tau2 - 64*I2zz*I3zz*m1*tau2 - 64*I2zz*I3zz*m2*tau2 - 64*I2zz*I3zz*m3*tau2 - 8*I3zz*l2^2*m2^2*tau2 + 8*I3zz*hb*l2^2*m2^2*tau1 + 8*I2zz*hb*l3^2*m3^2*tau1 + 32*I3zz*hb*l2^2*m3^2*tau1 + 8*I3zz*ht*l2^2*m2^2*tau1 + 8*I2zz*ht*l3^2*m3^2*tau1 + 32*I3zz*ht*l2^2*m3^2*tau1 + 8*I2zz*l3^2*m3^2*tau2*cos(2*x2 + 2*x3) + 8*I3zz*l2^2*m2^2*rw*tau1 + 8*I2zz*l3^2*m3^2*rw*tau1 + 32*I3zz*l2^2*m3^2*rw*tau1 + 64*I2zz*I3zz*hb*m1*tau1 + 64*I2zz*I3zz*hb*m2*tau1 + 64*I2zz*I3zz*hb*m3*tau1 + 64*I2zz*I3zz*ht*m1*tau1 + 64*I2zz*I3zz*ht*m2*tau1 + 64*I2zz*I3zz*ht*m3*tau1 + 64*I2zz*I3zz*m1*rw*tau1 + 64*I2zz*I3zz*m2*rw*tau1 + 64*I2zz*I3zz*m3*rw*tau1 + 64*CoM3y*I2zz*I3zz*g0*m1^2 - 32*I2zz*I3zz*db*g0*m1^2 - 32*I2zz*I3zz*db*g0*m2^2 - 32*I2zz*I3zz*db*g0*m3^2 + 64*I2zz*I3zz*g0*m1^2*rt1 + 64*I2zz*I3zz*g0*m2^2*rt1 + 64*I2zz*I3zz*g0*m3^2*rt1 - 64*I2zz*I3zz*g0*m1^2*rt4 - 64*I2zz*I3zz*g0*m2^2*rt4 - 64*I2zz*I3zz*g0*m3^2*rt4 - 8*l2^2*l3^2*m1*m3^2*tau2 - 6*l2^2*l3^2*m2*m3^2*tau2 - 2*l2^2*l3^2*m2^2*m3*tau2 - 16*I3zz*l2^2*m1*m2*tau2 - 16*I2zz*l3^2*m1*m3*tau2 - 64*I3zz*l2^2*m1*m3*tau2 - 16*I2zz*l3^2*m2*m3*tau2 - 48*I3zz*l2^2*m2*m3*tau2 + 8*I3zz*l2^2*m2^2*tau2*cos(2*x2) + 32*I3zz*l2^2*m3^2*tau2*cos(2*x2) + 16*CoM3x*I3zz*l2^2*m1*m2*tau1 + 16*CoM3x*I2zz*l3^2*m1*m3*tau1 + 64*CoM3x*I3zz*l2^2*m1*m3*tau1 + 8*hb*l2^2*l3^2*m1*m3^2*tau1 + 6*hb*l2^2*l3^2*m2*m3^2*tau1 + 2*hb*l2^2*l3^2*m2^2*m3*tau1 + 8*ht*l2^2*l3^2*m1*m3^2*tau1 + 6*ht*l2^2*l3^2*m2*m3^2*tau1 + 2*ht*l2^2*l3^2*m2^2*m3*tau1 - 2*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2 + 2*x3) + 8*l2^2*l3^2*m1*m3^2*rw*tau1 + 6*l2^2*l3^2*m2*m3^2*rw*tau1 + 2*l2^2*l3^2*m2^2*m3*rw*tau1 + 16*I3zz*hb*l2^2*m1*m2*tau1 + 16*I2zz*hb*l3^2*m1*m3*tau1 + 64*I3zz*hb*l2^2*m1*m3*tau1 + 16*I2zz*hb*l3^2*m2*m3*tau1 + 48*I3zz*hb*l2^2*m2*m3*tau1 + 16*I3zz*ht*l2^2*m1*m2*tau1 + 16*I2zz*ht*l3^2*m1*m3*tau1 + 64*I3zz*ht*l2^2*m1*m3*tau1 + 16*I2zz*ht*l3^2*m2*m3*tau1 + 48*I3zz*ht*l2^2*m2*m3*tau1 + 16*I3zz*l2^2*m1*m2*rw*tau1 + 16*I2zz*l3^2*m1*m3*rw*tau1 + 64*I3zz*l2^2*m1*m3*rw*tau1 + 16*I2zz*l3^2*m2*m3*rw*tau1 + 48*I3zz*l2^2*m2*m3*rw*tau1 + 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 + 8*CoM3y*I3zz*g0*l2^2*m1*m2^2 + 16*CoM3y*I3zz*g0*l2^2*m1^2*m2 + 8*CoM3y*I2zz*g0*l3^2*m1*m3^2 + 16*CoM3y*I2zz*g0*l3^2*m1^2*m3 + 32*CoM3y*I3zz*g0*l2^2*m1*m3^2 + 64*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 8*I3zz*hb*l2^2*m2^2*tau1*cos(2*x2) - 32*I3zz*hb*l2^2*m3^2*tau1*cos(2*x2) - 8*I3zz*ht*l2^2*m2^2*tau1*cos(2*x2) - 32*I3zz*ht*l2^2*m3^2*tau1*cos(2*x2) - 4*db*g0*l2^2*l3^2*m1^2*m3^2 - db*g0*l2^2*l3^2*m2^2*m3^2 - 8*I3zz*l2^2*m2^2*rw*tau1*cos(2*x2) - 32*I3zz*l2^2*m3^2*rw*tau1*cos(2*x2) + 4*I3zz*db*l2^2*m2^2*tau1*sin(2*x2) + 16*I3zz*db*l2^2*m3^2*tau1*sin(2*x2) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt1 + 2*g0*l2^2*l3^2*m2^2*m3^2*rt1 - 8*g0*l2^2*l3^2*m1^2*m3^2*rt4 - 2*g0*l2^2*l3^2*m2^2*m3^2*rt4 - 8*I3zz*l2^2*m2^2*rt1*tau1*sin(2*x2) - 32*I3zz*l2^2*m3^2*rt1*tau1*sin(2*x2) + 8*I3zz*l2^2*m2^2*rt4*tau1*sin(2*x2) + 32*I3zz*l2^2*m3^2*rt4*tau1*sin(2*x2) + 64*CoM3y*I2zz*I3zz*g0*m1*m2 + 64*CoM3y*I2zz*I3zz*g0*m1*m3 - 8*I3zz*db*g0*l2^2*m1*m2^2 - 8*I3zz*db*g0*l2^2*m1^2*m2 - 8*I2zz*db*g0*l3^2*m1*m3^2 - 8*I2zz*db*g0*l3^2*m1^2*m3 - 32*I3zz*db*g0*l2^2*m1*m3^2 - 32*I3zz*db*g0*l2^2*m1^2*m3 - 8*I2zz*db*g0*l3^2*m2*m3^2 - 8*I2zz*db*g0*l3^2*m2^2*m3 - 8*I3zz*db*g0*l2^2*m2*m3^2 - 8*I3zz*db*g0*l2^2*m2^2*m3 + 16*I2zz*db*l3*m3^2*tau3*sin(x2 + x3) + 16*I3zz*g0*l2^2*m1*m2^2*rt1 + 16*I3zz*g0*l2^2*m1^2*m2*rt1 + 16*I2zz*g0*l3^2*m1*m3^2*rt1 + 16*I2zz*g0*l3^2*m1^2*m3*rt1 + 64*I3zz*g0*l2^2*m1*m3^2*rt1 + 64*I3zz*g0*l2^2*m1^2*m3*rt1 + 16*I2zz*g0*l3^2*m2*m3^2*rt1 + 16*I2zz*g0*l3^2*m2^2*m3*rt1 + 16*I3zz*g0*l2^2*m2*m3^2*rt1 + 16*I3zz*g0*l2^2*m2^2*m3*rt1 - 16*I3zz*g0*l2^2*m1*m2^2*rt4 - 16*I3zz*g0*l2^2*m1^2*m2*rt4 - 16*I2zz*g0*l3^2*m1*m3^2*rt4 - 16*I2zz*g0*l3^2*m1^2*m3*rt4 - 64*I3zz*g0*l2^2*m1*m3^2*rt4 - 64*I3zz*g0*l2^2*m1^2*m3*rt4 - 16*I2zz*g0*l3^2*m2*m3^2*rt4 - 16*I2zz*g0*l3^2*m2^2*m3*rt4 - 16*I3zz*g0*l2^2*m2*m3^2*rt4 - 16*I3zz*g0*l2^2*m2^2*m3*rt4 - 32*I2zz*l3*m3^2*rt1*tau3*sin(x2 + x3) + 32*I2zz*l3*m3^2*rt4*tau3*sin(x2 + x3) - 8*I2zz*hb*l3^2*m3^2*tau1*cos(2*x2 + 2*x3) - 8*I2zz*ht*l3^2*m3^2*tau1*cos(2*x2 + 2*x3) - 64*I2zz*I3zz*db*g0*m1*m2 - 64*I2zz*I3zz*db*g0*m1*m3 - 64*I2zz*I3zz*db*g0*m2*m3 - 8*I2zz*l3^2*m3^2*rw*tau1*cos(2*x2 + 2*x3) + 4*I2zz*db*l3^2*m3^2*tau1*sin(2*x2 + 2*x3) + 128*I2zz*I3zz*g0*m1*m2*rt1 + 128*I2zz*I3zz*g0*m1*m3*rt1 + 128*I2zz*I3zz*g0*m2*m3*rt1 - 128*I2zz*I3zz*g0*m1*m2*rt4 - 128*I2zz*I3zz*g0*m1*m3*rt4 - 128*I2zz*I3zz*g0*m2*m3*rt4 + 16*I3zz*db*l2*m2^2*tau2*sin(x2) - 16*I3zz*db*l2*m2^2*tau3*sin(x2) + 32*I3zz*db*l2*m3^2*tau2*sin(x2) - 32*I3zz*db*l2*m3^2*tau3*sin(x2) - 8*I2zz*l3^2*m3^2*rt1*tau1*sin(2*x2 + 2*x3) + 8*I2zz*l3^2*m3^2*rt4*tau1*sin(2*x2 + 2*x3) - 4*l2^2*l3^2*m1*m2*m3*tau2 - 32*I3zz*l2*m2^2*rt1*tau2*sin(x2) + 32*I3zz*l2*m2^2*rt1*tau3*sin(x2) - 64*I3zz*l2*m3^2*rt1*tau2*sin(x2) + 64*I3zz*l2*m3^2*rt1*tau3*sin(x2) + 32*I3zz*l2*m2^2*rt4*tau2*sin(x2) - 32*I3zz*l2*m2^2*rt4*tau3*sin(x2) + 64*I3zz*l2*m3^2*rt4*tau2*sin(x2) - 64*I3zz*l2*m3^2*rt4*tau3*sin(x2) + 8*l2^2*l3^2*m1*m3^2*tau2*cos(2*x3) + 4*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2) + 2*l2^2*l3^2*m2^2*m3*tau2*cos(2*x2) + 4*l2^2*l3^2*m2*m3^2*tau2*cos(2*x3) + 8*CoM3x*l2^2*l3^2*m1*m3^2*tau1 + 32*I3zz*l2^2*m2*m3*tau2*cos(2*x2) + 16*I2zz*I3zz*db*l3*m3^2*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m3^2*x6^2*cos(x2 + x3) + 4*hb*l2^2*l3^2*m1*m2*m3*tau1 + 4*ht*l2^2*l3^2*m1*m2*m3*tau1 - 8*CoM3x*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) + 4*l2^2*l3^2*m1*m2*m3*rw*tau1 - 32*I2zz*I3zz*l3*m3^2*rt1*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m3^2*rt1*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt4*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m3^2*rt4*x6^2*cos(x2 + x3) + 16*CoM3x*l2^2*l3*m1*m3^2*tau3*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m2^2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m3^2*x5^2*cos(x2) + 6*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 + 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 + 4*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 - 8*hb*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) - 4*hb*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2) - 2*hb*l2^2*l3^2*m2^2*m3*tau1*cos(2*x2) - 4*hb*l2^2*l3^2*m2*m3^2*tau1*cos(2*x3) - 8*ht*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) - 4*ht*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2) - 2*ht*l2^2*l3^2*m2^2*m3*tau1*cos(2*x2) - 4*ht*l2^2*l3^2*m2*m3^2*tau1*cos(2*x3) - 32*I2zz*I3zz*l2*m2^2*rt1*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m3^2*rt1*x5^2*cos(x2) + 32*I2zz*I3zz*l2*m2^2*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m3^2*rt4*x5^2*cos(x2) - 8*l2^2*l3^2*m1*m3^2*rw*tau1*cos(2*x3) - 4*l2^2*l3^2*m2*m3^2*rw*tau1*cos(2*x2) - 2*l2^2*l3^2*m2^2*m3*rw*tau1*cos(2*x2) - 4*l2^2*l3^2*m2*m3^2*rw*tau1*cos(2*x3) + 2*db*l2^2*l3^2*m2*m3^2*tau1*sin(2*x2) + db*l2^2*l3^2*m2^2*m3*tau1*sin(2*x2) + 32*CoM3x*I2zz*l3*m1*m3*tau3*cos(x2 + x3) - 4*l2^2*l3^2*m2*m3^2*rt1*tau1*sin(2*x2) - 2*l2^2*l3^2*m2^2*m3*rt1*tau1*sin(2*x2) + 4*l2^2*l3^2*m2*m3^2*rt4*tau1*sin(2*x2) + 2*l2^2*l3^2*m2^2*m3*rt4*tau1*sin(2*x2) + 8*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(x2) - 8*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(x2) + 16*CoM3y*I2zz*g0*l3^2*m1*m2*m3 + 48*CoM3y*I3zz*g0*l2^2*m1*m2*m3 - 32*I3zz*hb*l2^2*m2*m3*tau1*cos(2*x2) - 32*I3zz*ht*l2^2*m2*m3*tau1*cos(2*x2) - 6*db*g0*l2^2*l3^2*m1*m2*m3^2 - 2*db*g0*l2^2*l3^2*m1*m2^2*m3 - 2*db*g0*l2^2*l3^2*m1^2*m2*m3 + 8*db*l2^2*l3*m1*m3^2*tau3*sin(x2 + x3) - 2*db*l2^2*l3*m2^2*m3*tau3*sin(x2 + x3) - 32*I3zz*l2^2*m2*m3*rw*tau1*cos(2*x2) + 16*I3zz*db*l2^2*m2*m3*tau1*sin(2*x2) - 8*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + 12*g0*l2^2*l3^2*m1*m2*m3^2*rt1 + 4*g0*l2^2*l3^2*m1*m2^2*m3*rt1 + 4*g0*l2^2*l3^2*m1^2*m2*m3*rt1 - 12*g0*l2^2*l3^2*m1*m2*m3^2*rt4 - 4*g0*l2^2*l3^2*m1*m2^2*m3*rt4 - 4*g0*l2^2*l3^2*m1^2*m2*m3*rt4 - 16*l2^2*l3*m1*m3^2*rt1*tau3*sin(x2 + x3) + 4*l2^2*l3*m2^2*m3*rt1*tau3*sin(x2 + x3) + 16*l2^2*l3*m1*m3^2*rt4*tau3*sin(x2 + x3) - 4*l2^2*l3*m2^2*m3*rt4*tau3*sin(x2 + x3) - (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 + x3))/2 - (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 + x3))/2 + 2*hb*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2 + 2*x3) + 2*ht*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2 + 2*x3) - 32*I3zz*l2^2*m2*m3*rt1*tau1*sin(2*x2) + 32*I3zz*l2^2*m2*m3*rt4*tau1*sin(2*x2) + 32*CoM3x*I3zz*l2*m1*m2*tau2*cos(x2) - 32*CoM3x*I3zz*l2*m1*m2*tau3*cos(x2) + 64*CoM3x*I3zz*l2*m1*m3*tau2*cos(x2) - 64*CoM3x*I3zz*l2*m1*m3*tau3*cos(x2) - 16*I2zz*db*g0*l3^2*m1*m2*m3 - 48*I3zz*db*g0*l2^2*m1*m2*m3 + 2*l2^2*l3^2*m2*m3^2*rw*tau1*cos(2*x2 + 2*x3) + 16*I2zz*db*l3*m1*m3*tau3*sin(x2 + x3) + 16*I2zz*db*l3*m2*m3*tau3*sin(x2 + x3) - db*l2^2*l3^2*m2*m3^2*tau1*sin(2*x2 + 2*x3) - 8*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*sin(x2 + x3) - 8*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*sin(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 + x3) + l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 + x3) - l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 + x3) - 8*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*x2) - 32*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*x2) + 32*I2zz*g0*l3^2*m1*m2*m3*rt1 + 96*I3zz*g0*l2^2*m1*m2*m3*rt1 - 32*I2zz*g0*l3^2*m1*m2*m3*rt4 - 96*I3zz*g0*l2^2*m1*m2*m3*rt4 + 4*db*l2*l3^2*m1*m3^2*tau2*sin(x2) - 4*db*l2*l3^2*m1*m3^2*tau3*sin(x2) + 6*db*l2*l3^2*m2*m3^2*tau2*sin(x2) + 4*db*l2*l3^2*m2^2*m3*tau2*sin(x2) - 6*db*l2*l3^2*m2*m3^2*tau3*sin(x2) - 4*db*l2*l3^2*m2^2*m3*tau3*sin(x2) + 4*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*x3) - 32*I2zz*l3*m1*m3*rt1*tau3*sin(x2 + x3) - 32*I2zz*l3*m2*m3*rt1*tau3*sin(x2 + x3) + 32*I2zz*l3*m1*m3*rt4*tau3*sin(x2 + x3) + 32*I2zz*l3*m2*m3*rt4*tau3*sin(x2 + x3) + 2*l2^2*l3^2*m2*m3^2*rt1*tau1*sin(2*x2 + 2*x3) - 2*l2^2*l3^2*m2*m3^2*rt4*tau1*sin(2*x2 + 2*x3) - 8*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(x2 + 2*x3) - 16*CoM3x*l2^2*l3*m1*m3^2*tau3*cos(x2 - x3) + 8*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(x2 + 2*x3) + 4*I2zz*db*l3^3*m1*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m1*m3^2*x6^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x5^2*cos(x2 + x3) + 4*I2zz*db*l3^3*m2*m3^2*x6^2*cos(x2 + x3) - 8*l2*l3^2*m1*m3^2*rt1*tau2*sin(x2) + 8*l2*l3^2*m1*m3^2*rt1*tau3*sin(x2) - 12*l2*l3^2*m2*m3^2*rt1*tau2*sin(x2) - 8*l2*l3^2*m2^2*m3*rt1*tau2*sin(x2) + 12*l2*l3^2*m2*m3^2*rt1*tau3*sin(x2) + 8*l2*l3^2*m2^2*m3*rt1*tau3*sin(x2) + 8*l2*l3^2*m1*m3^2*rt4*tau2*sin(x2) - 8*l2*l3^2*m1*m3^2*rt4*tau3*sin(x2) + 12*l2*l3^2*m2*m3^2*rt4*tau2*sin(x2) + 8*l2*l3^2*m2^2*m3*rt4*tau2*sin(x2) - 12*l2*l3^2*m2*m3^2*rt4*tau3*sin(x2) - 8*l2*l3^2*m2^2*m3*rt4*tau3*sin(x2) + 8*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*x2) + 32*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*x2) - 8*g0*l2^2*l3^2*m1^2*m3^2*rt1*cos(2*x3) - 2*g0*l2^2*l3^2*m2^2*m3^2*rt1*cos(2*x3) + 8*g0*l2^2*l3^2*m1^2*m3^2*rt4*cos(2*x3) + 2*g0*l2^2*l3^2*m2^2*m3^2*rt4*cos(2*x3) + (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2))/2 - 8*I2zz*l3^3*m1*m3^2*rt1*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m1*m3^2*rt1*x6^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt1*x5^2*cos(x2 + x3) - 8*I2zz*l3^3*m2*m3^2*rt1*x6^2*cos(x2 + x3) + 8*I2zz*l3^3*m1*m3^2*rt4*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m1*m3^2*rt4*x6^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt4*x5^2*cos(x2 + x3) + 8*I2zz*l3^3*m2*m3^2*rt4*x6^2*cos(x2 + x3) + 16*I3zz*db*l2*m1*m2*tau2*sin(x2) - 16*I3zz*db*l2*m1*m2*tau3*sin(x2) + 32*I3zz*db*l2*m1*m3*tau2*sin(x2) - 32*I3zz*db*l2*m1*m3*tau3*sin(x2) + 48*I3zz*db*l2*m2*m3*tau2*sin(x2) - 48*I3zz*db*l2*m2*m3*tau3*sin(x2) - 8*CoM3x*I3zz*l2^3*m1*m2^2*x5^2*sin(x2) - 64*CoM3x*I3zz*l2^3*m1*m3^2*x5^2*sin(x2) - l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2) + l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2) - 32*I3zz*l2*m1*m2*rt1*tau2*sin(x2) + 32*I3zz*l2*m1*m2*rt1*tau3*sin(x2) - 64*I3zz*l2*m1*m3*rt1*tau2*sin(x2) + 64*I3zz*l2*m1*m3*rt1*tau3*sin(x2) - 96*I3zz*l2*m2*m3*rt1*tau2*sin(x2) + 32*I3zz*l2*m1*m2*rt4*tau2*sin(x2) + 96*I3zz*l2*m2*m3*rt1*tau3*sin(x2) - 32*I3zz*l2*m1*m2*rt4*tau3*sin(x2) + 64*I3zz*l2*m1*m3*rt4*tau2*sin(x2) - 64*I3zz*l2*m1*m3*rt4*tau3*sin(x2) + 96*I3zz*l2*m2*m3*rt4*tau2*sin(x2) - 96*I3zz*l2*m2*m3*rt4*tau3*sin(x2) + 4*I3zz*db*l2^3*m1*m2^2*x5^2*cos(x2) + 32*I3zz*db*l2^3*m1*m3^2*x5^2*cos(x2) + 8*I3zz*db*l2^3*m2*m3^2*x5^2*cos(x2) + 4*I3zz*db*l2^3*m2^2*m3*x5^2*cos(x2) - 8*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*x2 + 2*x3) - 4*db*l2*l3^2*m1*m3^2*tau2*sin(x2 + 2*x3) - 8*db*l2^2*l3*m1*m3^2*tau3*sin(x2 - x3) + 4*db*l2*l3^2*m1*m3^2*tau3*sin(x2 + 2*x3) - 2*db*l2*l3^2*m2*m3^2*tau2*sin(x2 + 2*x3) - 4*db*l2^2*l3*m2*m3^2*tau3*sin(x2 - x3) - 2*db*l2^2*l3*m2^2*m3*tau3*sin(x2 - x3) + 2*db*l2*l3^2*m2*m3^2*tau3*sin(x2 + 2*x3) - 8*I3zz*l2^3*m1*m2^2*rt1*x5^2*cos(x2) - 64*I3zz*l2^3*m1*m3^2*rt1*x5^2*cos(x2) - 16*I3zz*l2^3*m2*m3^2*rt1*x5^2*cos(x2) - 8*I3zz*l2^3*m2^2*m3*rt1*x5^2*cos(x2) + 8*I3zz*l2^3*m1*m2^2*rt4*x5^2*cos(x2) + 64*I3zz*l2^3*m1*m3^2*rt4*x5^2*cos(x2) + 16*I3zz*l2^3*m2*m3^2*rt4*x5^2*cos(x2) + 8*I3zz*l2^3*m2^2*m3*rt4*x5^2*cos(x2) + 8*l2*l3^2*m1*m3^2*rt1*tau2*sin(x2 + 2*x3) + 16*l2^2*l3*m1*m3^2*rt1*tau3*sin(x2 - x3) - 8*l2*l3^2*m1*m3^2*rt1*tau3*sin(x2 + 2*x3) + 4*l2*l3^2*m2*m3^2*rt1*tau2*sin(x2 + 2*x3) + 8*l2^2*l3*m2*m3^2*rt1*tau3*sin(x2 - x3) + 4*l2^2*l3*m2^2*m3*rt1*tau3*sin(x2 - x3) - 4*l2*l3^2*m2*m3^2*rt1*tau3*sin(x2 + 2*x3) - 8*l2*l3^2*m1*m3^2*rt4*tau2*sin(x2 + 2*x3) - 16*l2^2*l3*m1*m3^2*rt4*tau3*sin(x2 - x3) + 8*l2*l3^2*m1*m3^2*rt4*tau3*sin(x2 + 2*x3) - 4*l2*l3^2*m2*m3^2*rt4*tau2*sin(x2 + 2*x3) - 8*l2^2*l3*m2*m3^2*rt4*tau3*sin(x2 - x3) - 4*l2^2*l3*m2^2*m3*rt4*tau3*sin(x2 - x3) + 4*l2*l3^2*m2*m3^2*rt4*tau3*sin(x2 + 2*x3) + 8*CoM3x*I2zz*g0*l3^2*m1*m3^2*sin(2*x2 + 2*x3) + (db*l2^2*l3^3*m2^2*m3^2*x5^2*cos(x2 - x3))/2 + (db*l2^2*l3^3*m2^2*m3^2*x6^2*cos(x2 - x3))/2 - (db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2 + 2*x3))/2 - l2^2*l3^3*m2^2*m3^2*rt1*x5^2*cos(x2 - x3) - l2^2*l3^3*m2^2*m3^2*rt1*x6^2*cos(x2 - x3) + l2^3*l3^2*m2^2*m3^2*rt1*x5^2*cos(x2 + 2*x3) + l2^2*l3^3*m2^2*m3^2*rt4*x5^2*cos(x2 - x3) + l2^2*l3^3*m2^2*m3^2*rt4*x6^2*cos(x2 - x3) - l2^3*l3^2*m2^2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 4*CoM3x*l2^2*l3^2*m1*m2*m3*tau1 - 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 - x3) + 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 + x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 + x3) - 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 + x3) - 32*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*sin(x2 + x3) - 32*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*sin(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 + x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 + x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 + x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 + x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 + x3) - 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2) + 16*I2zz*I3zz*db*l3*m1*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m1*m3*x6^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x5^2*cos(x2 + x3) + 16*I2zz*I3zz*db*l3*m2*m3*x6^2*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2) + 6*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m2^2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m3^2*x5*x6*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt1*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m1*m3*rt1*x6^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt1*x5^2*cos(x2 + x3) - 32*I2zz*I3zz*l3*m2*m3*rt1*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt4*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m1*m3*rt4*x6^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt4*x5^2*cos(x2 + x3) + 32*I2zz*I3zz*l3*m2*m3*rt4*x6^2*cos(x2 + x3) - 32*CoM3x*I2zz*I3zz*l2*m1*m2*x5^2*sin(x2) - 64*CoM3x*I2zz*I3zz*l2*m1*m3*x5^2*sin(x2) - 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2) - 12*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2) - 8*I2zz*l2*l3^2*m2^2*m3*rt1*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2) + 12*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m2^2*m3*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l3*m3^2*rt1*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m3^2*rt4*x5*x6*cos(x2 + x3) + 16*I2zz*I3zz*db*l2*m1*m2*x5^2*cos(x2) + 32*I2zz*I3zz*db*l2*m1*m3*x5^2*cos(x2) + 48*I2zz*I3zz*db*l2*m2*m3*x5^2*cos(x2) - 8*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2 + 2*x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 - x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 - x3) - 32*I2zz*I3zz*l2*m1*m2*rt1*x5^2*cos(x2) - 64*I2zz*I3zz*l2*m1*m3*rt1*x5^2*cos(x2) - 96*I2zz*I3zz*l2*m2*m3*rt1*x5^2*cos(x2) + 32*I2zz*I3zz*l2*m1*m2*rt4*x5^2*cos(x2) + 64*I2zz*I3zz*l2*m1*m3*rt4*x5^2*cos(x2) + 96*I2zz*I3zz*l2*m2*m3*rt4*x5^2*cos(x2) + 4*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2 - x3) + 2*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2 + 2*x3) + 8*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x5^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2*m3^2*x6^2*cos(x2 - x3) + 2*I3zz*db*l2^2*l3*m2^2*m3*x6^2*cos(x2 - x3) + 8*CoM3x*l2*l3^2*m1*m2*m3*tau2*cos(x2) - 8*CoM3x*l2*l3^2*m1*m2*m3*tau3*cos(x2) - 8*I2zz*l2*l3^2*m1*m3^2*rt1*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x5^2*cos(x2 - x3) - 4*I2zz*l2*l3^2*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) - 16*I3zz*l2^2*l3*m1*m3^2*rt1*x6^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt1*x5^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2*m3^2*rt1*x6^2*cos(x2 - x3) - 4*I3zz*l2^2*l3*m2^2*m3*rt1*x6^2*cos(x2 - x3) + 8*I2zz*l2*l3^2*m1*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x5^2*cos(x2 - x3) + 4*I2zz*l2*l3^2*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 16*I3zz*l2^2*l3*m1*m3^2*rt4*x6^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt4*x5^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2*m3^2*rt4*x6^2*cos(x2 - x3) + 4*I3zz*l2^2*l3*m2^2*m3*rt4*x6^2*cos(x2 - x3) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2) - 2*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*x2) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2) + 2*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*x2) - db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 + x3) - 32*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*x2) + 4*db*l2*l3^2*m1*m2*m3*tau2*sin(x2) - 4*db*l2*l3^2*m1*m2*m3*tau3*sin(x2) + 4*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) - 6*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2) - 2*CoM3x*l2^3*l3^2*m1*m2^2*m3*x5^2*sin(x2) - 16*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*sin(x2 + x3) + 2*l2^2*l3^3*m2^2*m3^2*rt1*x5*x6*cos(x2 + x3) - 2*l2^2*l3^3*m2^2*m3^2*rt4*x5*x6*cos(x2 + x3) - 8*CoM3x*l2^2*l3*m1*m2*m3*tau3*cos(x2 - x3) - 8*l2*l3^2*m1*m2*m3*rt1*tau2*sin(x2) + 8*l2*l3^2*m1*m2*m3*rt1*tau3*sin(x2) + 8*l2*l3^2*m1*m2*m3*rt4*tau2*sin(x2) - 8*l2*l3^2*m1*m2*m3*rt4*tau3*sin(x2) + 32*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*x2) - 8*g0*l2^2*l3^2*m1*m2*m3^2*rt1*cos(2*x3) + 8*g0*l2^2*l3^2*m1*m2*m3^2*rt4*cos(2*x3) + 3*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2) + db*l2^3*l3^2*m1*m2^2*m3*x5^2*cos(x2) + 8*I2zz*db*l3^3*m1*m3^2*x5*x6*cos(x2 + x3) + 8*I2zz*db*l3^3*m2*m3^2*x5*x6*cos(x2 + x3) + 2*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2 + 2*x3) - 48*CoM3x*I3zz*l2^3*m1*m2*m3*x5^2*sin(x2) - 6*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2) - 2*l2^3*l3^2*m1*m2^2*m3*rt1*x5^2*cos(x2) + 6*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2) + 2*l2^3*l3^2*m1*m2^2*m3*rt4*x5^2*cos(x2) - 16*I2zz*l3^3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) - 16*I2zz*l3^3*m2*m3^2*rt1*x5*x6*cos(x2 + x3) + 16*I2zz*l3^3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) + 16*I2zz*l3^3*m2*m3^2*rt4*x5*x6*cos(x2 + x3) - 2*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2 + 2*x3) + 24*I3zz*db*l2^3*m1*m2*m3*x5^2*cos(x2) - 4*db*l2^2*l3*m1*m2*m3*tau3*sin(x2 - x3) - 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*sin(x2 - x3) - 2*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*sin(x2 - x3) + 2*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2 + 2*x3) - 48*I3zz*l2^3*m1*m2*m3*rt1*x5^2*cos(x2) + 48*I3zz*l2^3*m1*m2*m3*rt4*x5^2*cos(x2) + 8*l2^2*l3*m1*m2*m3*rt1*tau3*sin(x2 - x3) - 8*l2^2*l3*m1*m2*m3*rt4*tau3*sin(x2 - x3) + db*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2 - x3) + db*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2 - x3) - db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2 + 2*x3) + db*l2^2*l3^3*m2^2*m3^2*x5*x6*cos(x2 - x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*sin(x2 + x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*sin(x2 + x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt1*x5^2*cos(x2 - x3) - 2*l2^2*l3^3*m1*m2*m3^2*rt1*x6^2*cos(x2 - x3) + 2*l2^3*l3^2*m1*m2*m3^2*rt1*x5^2*cos(x2 + 2*x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt4*x5^2*cos(x2 - x3) + 2*l2^2*l3^3*m1*m2*m3^2*rt4*x6^2*cos(x2 - x3) - 2*l2^3*l3^2*m1*m2*m3^2*rt4*x5^2*cos(x2 + 2*x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2 - x3) - 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 + x3) - 4*l2^2*l3^3*m1*m2*m3^2*rt1*x5*x6*cos(x2 - x3) + 4*l2^2*l3^3*m1*m2*m3^2*rt4*x5*x6*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 + x3) - 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 + x3) - 8*CoM3x*I2zz*l2*l3^2*m1*m2*m3*x5^2*sin(x2) - 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*sin(x2 + x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 + x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 + x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 + x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 + x3) + 4*I2zz*db*l2*l3^2*m1*m2*m3*x5^2*cos(x2) + 32*I2zz*I3zz*db*l3*m1*m3*x5*x6*cos(x2 + x3) + 32*I2zz*I3zz*db*l3*m2*m3*x5*x6*cos(x2 + x3) - 8*I2zz*l2*l3^2*m1*m2*m3*rt1*x5^2*cos(x2) + 8*I2zz*l2*l3^2*m1*m2*m3*rt4*x5^2*cos(x2) - 64*I2zz*I3zz*l3*m1*m3*rt1*x5*x6*cos(x2 + x3) - 64*I2zz*I3zz*l3*m2*m3*rt1*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m1*m3*rt4*x5*x6*cos(x2 + x3) + 64*I2zz*I3zz*l3*m2*m3*rt4*x5*x6*cos(x2 + x3) - 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*sin(x2 - x3) - 8*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*sin(x2 - x3) - 32*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*sin(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*cos(x2 - x3) + 16*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2 - x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*cos(x2 - x3) + 4*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x5^2*cos(x2 - x3) - 8*I3zz*l2^2*l3*m1*m2*m3*rt1*x6^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x5^2*cos(x2 - x3) + 8*I3zz*l2^2*l3*m1*m2*m3*rt4*x6^2*cos(x2 - x3) - 32*I3zz*l2^2*l3*m1*m3^2*rt1*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m2*m3^2*rt1*x5*x6*cos(x2 - x3) - 8*I3zz*l2^2*l3*m2^2*m3*rt1*x5*x6*cos(x2 - x3) + 32*I3zz*l2^2*l3*m1*m3^2*rt4*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m2*m3^2*rt4*x5*x6*cos(x2 - x3) + 8*I3zz*l2^2*l3*m2^2*m3*rt4*x5*x6*cos(x2 - x3) - 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*sin(x2 - x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*sin(x2 - x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*cos(x2 - x3) - 16*I3zz*l2^2*l3*m1*m2*m3*rt1*x5*x6*cos(x2 - x3) + 16*I3zz*l2^2*l3*m1*m2*m3*rt4*x5*x6*cos(x2 - x3))/(2*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3)))) <= 0);
    % not shifted model
    % ocp.subjectTo(-(16*I3zz*l2^2*m2^2*tau2 + 16*I2zz*l3^2*m3^2*tau2 + 64*I3zz*l2^2*m3^2*tau2 + 128*I2zz*I3zz*m1*tau2 + 128*I2zz*I3zz*m2*tau2 + 128*I2zz*I3zz*m3*tau2 - 128*CoM3x*I2zz*I3zz*m1*tau1 - 128*CoM3y*I2zz*I3zz*g0*m1^2 - 64*I2zz*I3zz*db*g0*m1^2 - 64*I2zz*I3zz*db*g0*m2^2 - 64*I2zz*I3zz*db*g0*m3^2 + 16*l2^2*l3^2*m1*m3^2*tau2 + 12*l2^2*l3^2*m2*m3^2*tau2 + 4*l2^2*l3^2*m2^2*m3*tau2 + 32*I3zz*l2^2*m1*m2*tau2 + 32*I2zz*l3^2*m1*m3*tau2 + 128*I3zz*l2^2*m1*m3*tau2 + 32*I2zz*l3^2*m2*m3*tau2 + 96*I3zz*l2^2*m2*m3*tau2 - 16*I3zz*l2^2*m2^2*tau2*cos(2*x2) - 64*I3zz*l2^2*m3^2*tau2*cos(2*x2) - 32*CoM3x*I3zz*l2^2*m1*m2*tau1 - 32*CoM3x*I2zz*l3^2*m1*m3*tau1 - 128*CoM3x*I3zz*l2^2*m1*m3*tau1 - 16*I3zz*l2^2*m2^2*p_module*tau1*sin(p_angle) - 16*I2zz*l3^2*m3^2*p_module*tau1*sin(p_angle) - 64*I3zz*l2^2*m3^2*p_module*tau1*sin(p_angle) - 128*I2zz*I3zz*m1*p_module*tau1*sin(p_angle) - 128*I2zz*I3zz*m2*p_module*tau1*sin(p_angle) - 128*I2zz*I3zz*m3*p_module*tau1*sin(p_angle) - 16*I2zz*l3^2*m3^2*tau2*cos(2*x2)*cos(2*x3) - 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 + 16*I2zz*l3^2*m3^2*tau2*sin(2*x2)*sin(2*x3) - 16*CoM3y*I3zz*g0*l2^2*m1*m2^2 - 32*CoM3y*I3zz*g0*l2^2*m1^2*m2 - 16*CoM3y*I2zz*g0*l3^2*m1*m3^2 - 32*CoM3y*I2zz*g0*l3^2*m1^2*m3 - 64*CoM3y*I3zz*g0*l2^2*m1*m3^2 - 128*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 8*db*g0*l2^2*l3^2*m1^2*m3^2 - 2*db*g0*l2^2*l3^2*m2^2*m3^2 + 8*I3zz*db*l2^2*m2^2*tau1*sin(2*x2) + 32*I3zz*db*l2^2*m3^2*tau1*sin(2*x2) + 128*I2zz*I3zz*g0*m1^2*p_module*cos(p_angle) + 128*I2zz*I3zz*g0*m2^2*p_module*cos(p_angle) + 128*I2zz*I3zz*g0*m3^2*p_module*cos(p_angle) - 128*CoM3y*I2zz*I3zz*g0*m1*m2 - 128*CoM3y*I2zz*I3zz*g0*m1*m3 - 16*I3zz*db*g0*l2^2*m1*m2^2 - 16*I3zz*db*g0*l2^2*m1^2*m2 - 16*I2zz*db*g0*l3^2*m1*m3^2 - 16*I2zz*db*g0*l3^2*m1^2*m3 - 64*I3zz*db*g0*l2^2*m1*m3^2 - 64*I3zz*db*g0*l2^2*m1^2*m3 - 16*I2zz*db*g0*l3^2*m2*m3^2 - 16*I2zz*db*g0*l3^2*m2^2*m3 - 16*I3zz*db*g0*l2^2*m2*m3^2 - 16*I3zz*db*g0*l2^2*m2^2*m3 - 128*I2zz*I3zz*db*g0*m1*m2 - 128*I2zz*I3zz*db*g0*m1*m3 - 128*I2zz*I3zz*db*g0*m2*m3 + 32*I3zz*db*l2*m2^2*tau2*sin(x2) - 32*I3zz*db*l2*m2^2*tau3*sin(x2) + 64*I3zz*db*l2*m3^2*tau2*sin(x2) - 64*I3zz*db*l2*m3^2*tau3*sin(x2) + 8*l2^2*l3^2*m1*m2*m3*tau2 - 16*l2^2*l3^2*m1*m3^2*tau2*cos(2*x3) - 8*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2) - 4*l2^2*l3^2*m2^2*m3*tau2*cos(2*x2) - 8*l2^2*l3^2*m2*m3^2*tau2*cos(2*x3) - 16*CoM3x*l2^2*l3^2*m1*m3^2*tau1 - 64*I3zz*l2^2*m2*m3*tau2*cos(2*x2) - 32*I3zz*l2^2*m1*m2*p_module*tau1*sin(p_angle) - 32*I2zz*l3^2*m1*m3*p_module*tau1*sin(p_angle) - 128*I3zz*l2^2*m1*m3*p_module*tau1*sin(p_angle) - 32*I2zz*l3^2*m2*m3*p_module*tau1*sin(p_angle) - 96*I3zz*l2^2*m2*m3*p_module*tau1*sin(p_angle) + 4*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2)*cos(2*x3) + 16*CoM3x*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) - 4*l2^2*l3^2*m2*m3^2*tau2*sin(2*x2)*sin(2*x3) + 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(p_angle) + 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(p_angle) + 32*I2zz*I3zz*db*l2*m2^2*x5^2*cos(x2) + 64*I2zz*I3zz*db*l2*m3^2*x5^2*cos(x2) + 16*I3zz*l2^2*m2^2*p_module*tau1*cos(2*x2)*sin(p_angle) - 16*I3zz*l2^2*m2^2*p_module*tau1*sin(2*x2)*cos(p_angle) + 64*I3zz*l2^2*m3^2*p_module*tau1*cos(2*x2)*sin(p_angle) - 64*I3zz*l2^2*m3^2*p_module*tau1*sin(2*x2)*cos(p_angle) - 12*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 - 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 - 8*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 4*db*l2^2*l3^2*m2*m3^2*tau1*sin(2*x2) + 2*db*l2^2*l3^2*m2^2*m3*tau1*sin(2*x2) + 32*I3zz*g0*l2^2*m1*m2^2*p_module*cos(p_angle) + 32*I3zz*g0*l2^2*m1^2*m2*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m1*m3^2*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m1^2*m3*p_module*cos(p_angle) + 128*I3zz*g0*l2^2*m1*m3^2*p_module*cos(p_angle) + 128*I3zz*g0*l2^2*m1^2*m3*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m2*m3^2*p_module*cos(p_angle) + 32*I2zz*g0*l3^2*m2^2*m3*p_module*cos(p_angle) + 32*I3zz*g0*l2^2*m2*m3^2*p_module*cos(p_angle) + 32*I3zz*g0*l2^2*m2^2*m3*p_module*cos(p_angle) - 16*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(x2) + 16*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(x2) - 32*CoM3y*I2zz*g0*l3^2*m1*m2*m3 - 96*CoM3y*I3zz*g0*l2^2*m1*m2*m3 - 12*db*g0*l2^2*l3^2*m1*m2*m3^2 - 4*db*g0*l2^2*l3^2*m1*m2^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m2*m3 + 32*I3zz*db*l2^2*m2*m3*tau1*sin(2*x2) + 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + 256*I2zz*I3zz*g0*m1*m2*p_module*cos(p_angle) + 256*I2zz*I3zz*g0*m1*m3*p_module*cos(p_angle) + 256*I2zz*I3zz*g0*m2*m3*p_module*cos(p_angle) + 32*I2zz*db*l3*m3^2*tau3*cos(x2)*sin(x3) + 32*I2zz*db*l3*m3^2*tau3*cos(x3)*sin(x2) - 64*CoM3x*I3zz*l2*m1*m2*tau2*cos(x2) + 64*CoM3x*I3zz*l2*m1*m2*tau3*cos(x2) - 128*CoM3x*I3zz*l2*m1*m3*tau2*cos(x2) + 128*CoM3x*I3zz*l2*m1*m3*tau3*cos(x2) - 64*I3zz*l2*m2^2*p_module*tau2*cos(p_angle)*sin(x2) + 64*I3zz*l2*m2^2*p_module*tau3*cos(p_angle)*sin(x2) - 128*I3zz*l2*m3^2*p_module*tau2*cos(p_angle)*sin(x2) + 128*I3zz*l2*m3^2*p_module*tau3*cos(p_angle)*sin(x2) - 32*I2zz*db*g0*l3^2*m1*m2*m3 - 96*I3zz*db*g0*l2^2*m1*m2*m3 + 16*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*x2) + 64*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*x2) + 8*db*l2*l3^2*m1*m3^2*tau2*sin(x2) - 8*db*l2*l3^2*m1*m3^2*tau3*sin(x2) + 12*db*l2*l3^2*m2*m3^2*tau2*sin(x2) + 8*db*l2*l3^2*m2^2*m3*tau2*sin(x2) - 12*db*l2*l3^2*m2*m3^2*tau3*sin(x2) - 8*db*l2*l3^2*m2^2*m3*tau3*sin(x2) + 8*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + 2*db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*x3) + 8*I2zz*db*l3^2*m3^2*tau1*cos(2*x2)*sin(2*x3) + 8*I2zz*db*l3^2*m3^2*tau1*cos(2*x3)*sin(2*x2) - 16*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*x2) - 64*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*x2) + db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2) + 32*I3zz*db*l2*m1*m2*tau2*sin(x2) - 32*I3zz*db*l2*m1*m2*tau3*sin(x2) + 64*I3zz*db*l2*m1*m3*tau2*sin(x2) - 64*I3zz*db*l2*m1*m3*tau3*sin(x2) + 96*I3zz*db*l2*m2*m3*tau2*sin(x2) - 96*I3zz*db*l2*m2*m3*tau3*sin(x2) + 16*CoM3x*I3zz*l2^3*m1*m2^2*x5^2*sin(x2) + 128*CoM3x*I3zz*l2^3*m1*m3^2*x5^2*sin(x2) + 8*I3zz*db*l2^3*m1*m2^2*x5^2*cos(x2) + 64*I3zz*db*l2^3*m1*m3^2*x5^2*cos(x2) + 16*I3zz*db*l2^3*m2*m3^2*x5^2*cos(x2) + 8*I3zz*db*l2^3*m2^2*m3*x5^2*cos(x2) - 8*CoM3x*l2^2*l3^2*m1*m2*m3*tau1 - 16*l2^2*l3^2*m1*m3^2*p_module*tau1*sin(p_angle) - 12*l2^2*l3^2*m2*m3^2*p_module*tau1*sin(p_angle) - 4*l2^2*l3^2*m2^2*m3*p_module*tau1*sin(p_angle) + db*l2^3*l3^2*m2^2*m3^2*x5^2*sin(2*x3)*sin(x2) - 8*l2^2*l3^2*m1*m2*m3*p_module*tau1*sin(p_angle) + 32*I2zz*I3zz*db*l3*m3^2*x5^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m3^2*x6^2*cos(x2)*cos(x3) + 16*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2) - 64*I2zz*I3zz*l2*m2^2*p_module*x5^2*cos(p_angle)*cos(x2) - 128*I2zz*I3zz*l2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 8*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2) + 12*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2) + 8*I2zz*db*l2*l3^2*m2^2*m3*x5^2*cos(x2) + 16*l2^2*l3^2*m1*m3^2*p_module*tau1*cos(2*x3)*sin(p_angle) + 8*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x2)*sin(p_angle) - 8*l2^2*l3^2*m2*m3^2*p_module*tau1*sin(2*x2)*cos(p_angle) + 4*l2^2*l3^2*m2^2*m3*p_module*tau1*cos(2*x2)*sin(p_angle) - 4*l2^2*l3^2*m2^2*m3*p_module*tau1*sin(2*x2)*cos(p_angle) + 8*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x3)*sin(p_angle) - 32*I2zz*I3zz*db*l3*m3^2*x5^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m3^2*x6^2*sin(x2)*sin(x3) + 64*CoM3x*I2zz*I3zz*l2*m1*m2*x5^2*sin(x2) + 128*CoM3x*I2zz*I3zz*l2*m1*m3*x5^2*sin(x2) + 24*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(p_angle) + 8*g0*l2^2*l3^2*m1*m2^2*m3*p_module*cos(p_angle) + 8*g0*l2^2*l3^2*m1^2*m2*m3*p_module*cos(p_angle) + 32*I2zz*I3zz*db*l2*m1*m2*x5^2*cos(x2) + 64*I2zz*I3zz*db*l2*m1*m3*x5^2*cos(x2) + 96*I2zz*I3zz*db*l2*m2*m3*x5^2*cos(x2) + 64*I3zz*l2^2*m2*m3*p_module*tau1*cos(2*x2)*sin(p_angle) - 64*I3zz*l2^2*m2*m3*p_module*tau1*sin(2*x2)*cos(p_angle) - 64*CoM3x*I2zz*l3*m1*m3*tau3*cos(x2)*cos(x3) + 64*CoM3x*l2^2*l3*m1*m3^2*tau3*sin(x2)*sin(x3) - 64*I2zz*l3*m3^2*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) - 64*I2zz*l3*m3^2*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) + 64*I2zz*g0*l3^2*m1*m2*m3*p_module*cos(p_angle) + 192*I3zz*g0*l2^2*m1*m2*m3*p_module*cos(p_angle) + 32*db*l2^2*l3*m1*m3^2*tau3*cos(x2)*sin(x3) + 8*db*l2^2*l3*m2*m3^2*tau3*cos(x2)*sin(x3) - 8*db*l2^2*l3*m2*m3^2*tau3*cos(x3)*sin(x2) - 8*db*l2^2*l3*m2^2*m3*tau3*cos(x3)*sin(x2) - 16*CoM3x*l2*l3^2*m1*m2*m3*tau2*cos(x2) + 16*CoM3x*l2*l3^2*m1*m2*m3*tau3*cos(x2) - 16*l2*l3^2*m1*m3^2*p_module*tau2*cos(p_angle)*sin(x2) + 16*l2*l3^2*m1*m3^2*p_module*tau3*cos(p_angle)*sin(x2) - 24*l2*l3^2*m2*m3^2*p_module*tau2*cos(p_angle)*sin(x2) - 16*l2*l3^2*m2^2*m3*p_module*tau2*cos(p_angle)*sin(x2) + 24*l2*l3^2*m2*m3^2*p_module*tau3*cos(p_angle)*sin(x2) + 16*l2*l3^2*m2^2*m3*p_module*tau3*cos(p_angle)*sin(x2) - 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(2*x3)*cos(p_angle) - 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(2*x3)*cos(p_angle) + 64*CoM3x*I2zz*l3*m1*m3*tau3*sin(x2)*sin(x3) + 16*I2zz*l3^2*m3^2*p_module*tau1*cos(2*x2)*cos(2*x3)*sin(p_angle) - 16*I2zz*l3^2*m3^2*p_module*tau1*cos(2*x2)*sin(2*x3)*cos(p_angle) - 16*I2zz*l3^2*m3^2*p_module*tau1*cos(2*x3)*sin(2*x2)*cos(p_angle) + 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2) + 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*x2) + 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) - 2*l2^3*l3^2*m2^2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 32*I2zz*db*l3*m1*m3*tau3*cos(x2)*sin(x3) + 32*I2zz*db*l3*m1*m3*tau3*cos(x3)*sin(x2) + 32*I2zz*db*l3*m2*m3*tau3*cos(x2)*sin(x3) + 32*I2zz*db*l3*m2*m3*tau3*cos(x3)*sin(x2) - 2*db*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2)*sin(2*x3) - 2*db*l2^2*l3^2*m2*m3^2*tau1*cos(2*x3)*sin(2*x2) + 16*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*cos(x2)*sin(x3) + 16*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*cos(x3)*sin(x2) + 16*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*cos(x2)*sin(x3) + 16*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*cos(x3)*sin(x2) - 8*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2) - 4*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*x2) - 64*I3zz*l2*m1*m2*p_module*tau2*cos(p_angle)*sin(x2) + 64*I3zz*l2*m1*m2*p_module*tau3*cos(p_angle)*sin(x2) - 128*I3zz*l2*m1*m3*p_module*tau2*cos(p_angle)*sin(x2) + 128*I3zz*l2*m1*m3*p_module*tau3*cos(p_angle)*sin(x2) - 192*I3zz*l2*m2*m3*p_module*tau2*cos(p_angle)*sin(x2) + 192*I3zz*l2*m2*m3*p_module*tau3*cos(p_angle)*sin(x2) + 16*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(2*x3)*cos(x2) - 16*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(2*x3)*cos(x2) - 16*I2zz*l3^2*m3^2*p_module*tau1*sin(2*x2)*sin(2*x3)*sin(p_angle) + 8*I2zz*db*l3^3*m1*m3^2*x5^2*cos(x2)*cos(x3) + 8*I2zz*db*l3^3*m1*m3^2*x6^2*cos(x2)*cos(x3) + 8*I2zz*db*l3^3*m2*m3^2*x5^2*cos(x2)*cos(x3) + 8*I2zz*db*l3^3*m2*m3^2*x6^2*cos(x2)*cos(x3) + 64*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*x2) + 2*db*l2^2*l3^3*m2^2*m3^2*x5^2*sin(x2)*sin(x3) + 2*db*l2^2*l3^3*m2^2*m3^2*x6^2*sin(x2)*sin(x3) + 8*db*l2*l3^2*m1*m2*m3*tau2*sin(x2) - 8*db*l2*l3^2*m1*m2*m3*tau3*sin(x2) + 8*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) + 12*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2) + 4*CoM3x*l2^3*l3^2*m1*m2^2*m3*x5^2*sin(x2) - 16*I3zz*l2^3*m1*m2^2*p_module*x5^2*cos(p_angle)*cos(x2) - 128*I3zz*l2^3*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) - 32*I3zz*l2^3*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) - 16*I3zz*l2^3*m2^2*m3*p_module*x5^2*cos(p_angle)*cos(x2) - 64*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*x2) + 6*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2) + 2*db*l2^3*l3^2*m1*m2^2*m3*x5^2*cos(x2) - 16*CoM3x*l2*l3^2*m1*m3^2*tau2*sin(2*x3)*sin(x2) + 16*CoM3x*l2*l3^2*m1*m3^2*tau3*sin(2*x3)*sin(x2) - 8*I2zz*db*l3^3*m1*m3^2*x5^2*sin(x2)*sin(x3) - 8*I2zz*db*l3^3*m1*m3^2*x6^2*sin(x2)*sin(x3) - 8*I2zz*db*l3^3*m2*m3^2*x5^2*sin(x2)*sin(x3) - 8*I2zz*db*l3^3*m2*m3^2*x6^2*sin(x2)*sin(x3) + 96*CoM3x*I3zz*l2^3*m1*m2*m3*x5^2*sin(x2) + 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*x2)*cos(2*x3) - 8*db*l2*l3^2*m1*m3^2*tau2*cos(2*x3)*sin(x2) - 8*db*l2*l3^2*m1*m3^2*tau2*sin(2*x3)*cos(x2) + 8*db*l2*l3^2*m1*m3^2*tau3*cos(2*x3)*sin(x2) + 8*db*l2*l3^2*m1*m3^2*tau3*sin(2*x3)*cos(x2) - 4*db*l2*l3^2*m2*m3^2*tau2*cos(2*x3)*sin(x2) - 4*db*l2*l3^2*m2*m3^2*tau2*sin(2*x3)*cos(x2) + 4*db*l2*l3^2*m2*m3^2*tau3*cos(2*x3)*sin(x2) + 4*db*l2*l3^2*m2*m3^2*tau3*sin(2*x3)*cos(x2) + 48*I3zz*db*l2^3*m1*m2*m3*x5^2*cos(x2) - 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*x2)*sin(2*x3) - 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*x3)*sin(2*x2) - db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(2*x3)*cos(x2) - 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*sin(2*x2)*sin(2*x3) + 32*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2)*cos(x3) + 32*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x6^2*cos(x2)*cos(x3) + 2*db*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(2*x3)*sin(x2) - 16*I2zz*l2*l3^2*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) - 24*I2zz*l2*l3^2*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) - 16*I2zz*l2*l3^2*m2^2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*cos(x2)*sin(x3) + 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*cos(x3)*sin(x2) + 64*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*cos(x2)*sin(x3) + 64*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*cos(x3)*sin(x2) + 64*I2zz*I3zz*l3*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 64*I2zz*I3zz*l3*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 32*I2zz*I3zz*db*l3*m1*m3*x5^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m1*m3*x6^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m2*m3*x5^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m2*m3*x6^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m2^2*m3*x5^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x6^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m2^2*m3*x6^2*sin(x2)*sin(x3) + 16*CoM3x*I2zz*l2*l3^2*m1*m2*m3*x5^2*sin(x2) - 64*I2zz*I3zz*l2*m1*m2*p_module*x5^2*cos(p_angle)*cos(x2) - 128*I2zz*I3zz*l2*m1*m3*p_module*x5^2*cos(p_angle)*cos(x2) - 192*I2zz*I3zz*l2*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 64*I2zz*I3zz*db*l3*m3^2*x5*x6*cos(x2)*cos(x3) + 8*I2zz*db*l2*l3^2*m1*m2*m3*x5^2*cos(x2) - 32*I2zz*I3zz*db*l3*m1*m3*x5^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m1*m3*x6^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m2*m3*x5^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m2*m3*x6^2*sin(x2)*sin(x3) + 16*CoM3x*l2^2*l3*m1*m2*m3*tau3*cos(x2)*cos(x3) - 64*l2^2*l3*m1*m3^2*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) - 16*l2^2*l3*m2*m3^2*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) + 16*l2^2*l3*m2*m3^2*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) + 16*l2^2*l3*m2^2*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 64*I2zz*I3zz*db*l3*m3^2*x5*x6*sin(x2)*sin(x3) + 16*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*cos(2*x3)*sin(x2) + 16*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(2*x3)*cos(x2) + 8*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(2*x3)*cos(x2) + 4*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(2*x3)*cos(x2) + 16*CoM3x*l2^2*l3*m1*m2*m3*tau3*sin(x2)*sin(x3) - 64*I2zz*l3*m1*m3*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) - 64*I2zz*l3*m1*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 64*I2zz*l3*m2*m3*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) - 64*I2zz*l3*m2*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 4*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x2)*cos(2*x3)*sin(p_angle) + 4*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x2)*sin(2*x3)*cos(p_angle) + 4*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x3)*sin(2*x2)*cos(p_angle) + 8*db*l2^2*l3*m1*m2*m3*tau3*cos(x2)*sin(x3) - 8*db*l2^2*l3*m1*m2*m3*tau3*cos(x3)*sin(x2) - 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2)*sin(x3) + 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x3)*sin(x2) - 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2)*sin(x3) + 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x3)*sin(x2) - 16*I2zz*l3^3*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I2zz*l3^3*m1*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I2zz*l3^3*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I2zz*l3^3*m2*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 4*l2^2*l3^3*m2^2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 4*l2^2*l3^3*m2^2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 16*l2*l3^2*m1*m2*m3*p_module*tau2*cos(p_angle)*sin(x2) + 16*l2*l3^2*m1*m2*m3*p_module*tau3*cos(p_angle)*sin(x2) - 16*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(2*x3)*cos(p_angle) - 8*I2zz*db*l2*l3^2*m1*m3^2*x5^2*sin(2*x3)*sin(x2) - 4*I2zz*db*l2*l3^2*m2*m3^2*x5^2*sin(2*x3)*sin(x2) + 4*l2^2*l3^2*m2*m3^2*p_module*tau1*sin(2*x2)*sin(2*x3)*sin(p_angle) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2)*cos(x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2)*cos(x3) - 12*l2^3*l3^2*m1*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) - 4*l2^3*l3^2*m1*m2^2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 16*I2zz*l3^3*m1*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I2zz*l3^3*m1*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I2zz*l3^3*m2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I2zz*l3^3*m2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 32*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*cos(x2)*sin(x3) + 32*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*cos(x3)*sin(x2) + 16*l2*l3^2*m1*m3^2*p_module*tau2*cos(2*x3)*cos(p_angle)*sin(x2) + 16*l2*l3^2*m1*m3^2*p_module*tau2*sin(2*x3)*cos(p_angle)*cos(x2) - 16*l2*l3^2*m1*m3^2*p_module*tau3*cos(2*x3)*cos(p_angle)*sin(x2) - 16*l2*l3^2*m1*m3^2*p_module*tau3*sin(2*x3)*cos(p_angle)*cos(x2) + 8*l2*l3^2*m2*m3^2*p_module*tau2*cos(2*x3)*cos(p_angle)*sin(x2) + 8*l2*l3^2*m2*m3^2*p_module*tau2*sin(2*x3)*cos(p_angle)*cos(x2) - 8*l2*l3^2*m2*m3^2*p_module*tau3*cos(2*x3)*cos(p_angle)*sin(x2) - 8*l2*l3^2*m2*m3^2*p_module*tau3*sin(2*x3)*cos(p_angle)*cos(x2) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5^2*sin(x2)*sin(x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x6^2*sin(x2)*sin(x3) - 96*I3zz*l2^3*m1*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 16*I2zz*db*l3^3*m1*m3^2*x5*x6*cos(x2)*cos(x3) + 16*I2zz*db*l3^3*m2*m3^2*x5*x6*cos(x2)*cos(x3) + 4*db*l2^2*l3^3*m2^2*m3^2*x5*x6*sin(x2)*sin(x3) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2)*cos(2*x3) + 2*l2^3*l3^2*m2^2*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2)*sin(2*x3) + 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3)*sin(2*x2) - 16*I2zz*db*l3^3*m1*m3^2*x5*x6*sin(x2)*sin(x3) - 16*I2zz*db*l3^3*m2*m3^2*x5*x6*sin(x2)*sin(x3) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2)*sin(2*x3) - 4*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(2*x3)*sin(x2) - 4*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(2*x3)*cos(x2) - 2*l2^3*l3^2*m2^2*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) - 2*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(2*x3)*cos(x2) + 64*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*cos(x3)*sin(x2) + 64*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*cos(x3)*sin(x2) - 64*I2zz*I3zz*l3*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 64*I2zz*I3zz*l3*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*cos(x2)*sin(x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*cos(x3)*sin(x2) - 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*cos(x2)*sin(x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*cos(x3)*sin(x2) - 64*I2zz*I3zz*l3*m1*m3*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 64*I2zz*I3zz*l3*m1*m3*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 64*I2zz*I3zz*l3*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 64*I2zz*I3zz*l3*m2*m3*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I3zz*l2^2*l3*m2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I3zz*l2^2*l3*m2^2*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I3zz*l2^2*l3*m2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I3zz*l2^2*l3*m2^2*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 128*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*cos(x3)*sin(x2) - 128*I2zz*I3zz*l3*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*cos(x2)*cos(x3) - 16*I2zz*l2*l3^2*m1*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 64*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2)*cos(x3) + 16*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*cos(x2)*cos(x3) + 64*I2zz*I3zz*l3*m1*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 64*I2zz*I3zz*l3*m1*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 64*I2zz*I3zz*l3*m2*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 64*I2zz*I3zz*l3*m2*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 128*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*cos(x2)*sin(x3) + 128*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*cos(x3)*sin(x2) + 128*I2zz*I3zz*l3*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*sin(x2)*sin(x3) + 64*I2zz*I3zz*db*l3*m1*m3*x5*x6*cos(x2)*cos(x3) + 64*I2zz*I3zz*db*l3*m2*m3*x5*x6*cos(x2)*cos(x3) + 16*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*sin(x2)*sin(x3) + 16*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*sin(x2)*sin(x3) - 16*I2zz*l2*l3^2*m1*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) - 8*I2zz*l2*l3^2*m2*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) - 16*l2^2*l3*m1*m2*m3*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) + 16*l2^2*l3*m1*m2*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 64*I2zz*I3zz*db*l3*m1*m3*x5*x6*sin(x2)*sin(x3) - 64*I2zz*I3zz*db*l3*m2*m3*x5*x6*sin(x2)*sin(x3) + 16*I2zz*l2*l3^2*m1*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) + 8*I2zz*l2*l3^2*m2*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) - 4*l2^2*l3^3*m1*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 4*l2^2*l3^3*m1*m2*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 4*l2^2*l3^3*m1*m2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 4*l2^2*l3^3*m1*m2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 8*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2)*sin(x3) + 8*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x3)*sin(x2) - 32*I2zz*l3^3*m1*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 32*I2zz*l3^3*m2*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 8*l2^2*l3^3*m2^2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 4*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2)*cos(x3) + 32*I2zz*l3^3*m1*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 32*I2zz*l3^3*m2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 4*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*sin(x2)*sin(x3) + 4*l2^3*l3^2*m1*m2*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) - 64*I3zz*l2^2*l3*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 64*I3zz*l2^2*l3*m1*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I3zz*l2^2*l3*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I3zz*l2^2*l3*m2*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 4*l2^3*l3^2*m1*m2*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) - 128*I3zz*l2^2*l3*m1*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 32*I3zz*l2^2*l3*m2*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 32*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*cos(x2)*sin(x3) + 32*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*cos(x3)*sin(x2) - 128*I2zz*I3zz*l3*m1*m3*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 128*I2zz*I3zz*l3*m2*m3*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 32*I3zz*l2^2*l3*m2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) - 32*I3zz*l2^2*l3*m2^2*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*cos(x2)*cos(x3) + 128*I2zz*I3zz*l3*m1*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 128*I2zz*I3zz*l3*m2*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*sin(x2)*sin(x3) - 8*l2^2*l3^3*m1*m2*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 8*l2^2*l3^3*m1*m2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) - 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) - 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) - 32*I3zz*l2^2*l3*m1*m2*m3*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) - 32*I3zz*l2^2*l3*m1*m2*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3))/(4*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3))) >= 0);
    % ocp.subjectTo(-(128*CoM3x*I2zz*I3zz*m1*tau1 - 16*I2zz*l3^2*m3^2*tau2 - 64*I3zz*l2^2*m3^2*tau2 - 128*I2zz*I3zz*m1*tau2 - 128*I2zz*I3zz*m2*tau2 - 128*I2zz*I3zz*m3*tau2 - 16*I3zz*l2^2*m2^2*tau2 + 128*CoM3y*I2zz*I3zz*g0*m1^2 - 64*I2zz*I3zz*db*g0*m1^2 - 64*I2zz*I3zz*db*g0*m2^2 - 64*I2zz*I3zz*db*g0*m3^2 - 16*l2^2*l3^2*m1*m3^2*tau2 - 12*l2^2*l3^2*m2*m3^2*tau2 - 4*l2^2*l3^2*m2^2*m3*tau2 - 32*I3zz*l2^2*m1*m2*tau2 - 32*I2zz*l3^2*m1*m3*tau2 - 128*I3zz*l2^2*m1*m3*tau2 - 32*I2zz*l3^2*m2*m3*tau2 - 96*I3zz*l2^2*m2*m3*tau2 + 16*I3zz*l2^2*m2^2*tau2*cos(2*x2) + 64*I3zz*l2^2*m3^2*tau2*cos(2*x2) + 32*CoM3x*I3zz*l2^2*m1*m2*tau1 + 32*CoM3x*I2zz*l3^2*m1*m3*tau1 + 128*CoM3x*I3zz*l2^2*m1*m3*tau1 + 16*I3zz*l2^2*m2^2*p_module*tau1*sin(p_angle) + 16*I2zz*l3^2*m3^2*p_module*tau1*sin(p_angle) + 64*I3zz*l2^2*m3^2*p_module*tau1*sin(p_angle) + 128*I2zz*I3zz*m1*p_module*tau1*sin(p_angle) + 128*I2zz*I3zz*m2*p_module*tau1*sin(p_angle) + 128*I2zz*I3zz*m3*p_module*tau1*sin(p_angle) + 16*I2zz*l3^2*m3^2*tau2*cos(2*x2)*cos(2*x3) + 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2 - 16*I2zz*l3^2*m3^2*tau2*sin(2*x2)*sin(2*x3) + 16*CoM3y*I3zz*g0*l2^2*m1*m2^2 + 32*CoM3y*I3zz*g0*l2^2*m1^2*m2 + 16*CoM3y*I2zz*g0*l3^2*m1*m3^2 + 32*CoM3y*I2zz*g0*l3^2*m1^2*m3 + 64*CoM3y*I3zz*g0*l2^2*m1*m3^2 + 128*CoM3y*I3zz*g0*l2^2*m1^2*m3 - 8*db*g0*l2^2*l3^2*m1^2*m3^2 - 2*db*g0*l2^2*l3^2*m2^2*m3^2 + 8*I3zz*db*l2^2*m2^2*tau1*sin(2*x2) + 32*I3zz*db*l2^2*m3^2*tau1*sin(2*x2) - 128*I2zz*I3zz*g0*m1^2*p_module*cos(p_angle) - 128*I2zz*I3zz*g0*m2^2*p_module*cos(p_angle) - 128*I2zz*I3zz*g0*m3^2*p_module*cos(p_angle) + 128*CoM3y*I2zz*I3zz*g0*m1*m2 + 128*CoM3y*I2zz*I3zz*g0*m1*m3 - 16*I3zz*db*g0*l2^2*m1*m2^2 - 16*I3zz*db*g0*l2^2*m1^2*m2 - 16*I2zz*db*g0*l3^2*m1*m3^2 - 16*I2zz*db*g0*l3^2*m1^2*m3 - 64*I3zz*db*g0*l2^2*m1*m3^2 - 64*I3zz*db*g0*l2^2*m1^2*m3 - 16*I2zz*db*g0*l3^2*m2*m3^2 - 16*I2zz*db*g0*l3^2*m2^2*m3 - 16*I3zz*db*g0*l2^2*m2*m3^2 - 16*I3zz*db*g0*l2^2*m2^2*m3 - 128*I2zz*I3zz*db*g0*m1*m2 - 128*I2zz*I3zz*db*g0*m1*m3 - 128*I2zz*I3zz*db*g0*m2*m3 + 32*I3zz*db*l2*m2^2*tau2*sin(x2) - 32*I3zz*db*l2*m2^2*tau3*sin(x2) + 64*I3zz*db*l2*m3^2*tau2*sin(x2) - 64*I3zz*db*l2*m3^2*tau3*sin(x2) - 8*l2^2*l3^2*m1*m2*m3*tau2 + 16*l2^2*l3^2*m1*m3^2*tau2*cos(2*x3) + 8*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2) + 4*l2^2*l3^2*m2^2*m3*tau2*cos(2*x2) + 8*l2^2*l3^2*m2*m3^2*tau2*cos(2*x3) + 16*CoM3x*l2^2*l3^2*m1*m3^2*tau1 + 64*I3zz*l2^2*m2*m3*tau2*cos(2*x2) + 32*I3zz*l2^2*m1*m2*p_module*tau1*sin(p_angle) + 32*I2zz*l3^2*m1*m3*p_module*tau1*sin(p_angle) + 128*I3zz*l2^2*m1*m3*p_module*tau1*sin(p_angle) + 32*I2zz*l3^2*m2*m3*p_module*tau1*sin(p_angle) + 96*I3zz*l2^2*m2*m3*p_module*tau1*sin(p_angle) - 4*l2^2*l3^2*m2*m3^2*tau2*cos(2*x2)*cos(2*x3) - 16*CoM3x*l2^2*l3^2*m1*m3^2*tau1*cos(2*x3) + 4*l2^2*l3^2*m2*m3^2*tau2*sin(2*x2)*sin(2*x3) - 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(p_angle) - 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(p_angle) + 32*I2zz*I3zz*db*l2*m2^2*x5^2*cos(x2) + 64*I2zz*I3zz*db*l2*m3^2*x5^2*cos(x2) - 16*I3zz*l2^2*m2^2*p_module*tau1*cos(2*x2)*sin(p_angle) + 16*I3zz*l2^2*m2^2*p_module*tau1*sin(2*x2)*cos(p_angle) - 64*I3zz*l2^2*m3^2*p_module*tau1*cos(2*x2)*sin(p_angle) + 64*I3zz*l2^2*m3^2*p_module*tau1*sin(2*x2)*cos(p_angle) + 12*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2 + 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3 + 8*CoM3y*g0*l2^2*l3^2*m1^2*m2*m3 + 4*db*l2^2*l3^2*m2*m3^2*tau1*sin(2*x2) + 2*db*l2^2*l3^2*m2^2*m3*tau1*sin(2*x2) - 32*I3zz*g0*l2^2*m1*m2^2*p_module*cos(p_angle) - 32*I3zz*g0*l2^2*m1^2*m2*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m1*m3^2*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m1^2*m3*p_module*cos(p_angle) - 128*I3zz*g0*l2^2*m1*m3^2*p_module*cos(p_angle) - 128*I3zz*g0*l2^2*m1^2*m3*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m2*m3^2*p_module*cos(p_angle) - 32*I2zz*g0*l3^2*m2^2*m3*p_module*cos(p_angle) - 32*I3zz*g0*l2^2*m2*m3^2*p_module*cos(p_angle) - 32*I3zz*g0*l2^2*m2^2*m3*p_module*cos(p_angle) + 16*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(x2) - 16*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(x2) + 32*CoM3y*I2zz*g0*l3^2*m1*m2*m3 + 96*CoM3y*I3zz*g0*l2^2*m1*m2*m3 - 12*db*g0*l2^2*l3^2*m1*m2*m3^2 - 4*db*g0*l2^2*l3^2*m1*m2^2*m3 - 4*db*g0*l2^2*l3^2*m1^2*m2*m3 + 32*I3zz*db*l2^2*m2*m3*tau1*sin(2*x2) - 16*CoM3y*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) - 256*I2zz*I3zz*g0*m1*m2*p_module*cos(p_angle) - 256*I2zz*I3zz*g0*m1*m3*p_module*cos(p_angle) - 256*I2zz*I3zz*g0*m2*m3*p_module*cos(p_angle) + 32*I2zz*db*l3*m3^2*tau3*cos(x2)*sin(x3) + 32*I2zz*db*l3*m3^2*tau3*cos(x3)*sin(x2) + 64*CoM3x*I3zz*l2*m1*m2*tau2*cos(x2) - 64*CoM3x*I3zz*l2*m1*m2*tau3*cos(x2) + 128*CoM3x*I3zz*l2*m1*m3*tau2*cos(x2) - 128*CoM3x*I3zz*l2*m1*m3*tau3*cos(x2) + 64*I3zz*l2*m2^2*p_module*tau2*cos(p_angle)*sin(x2) - 64*I3zz*l2*m2^2*p_module*tau3*cos(p_angle)*sin(x2) + 128*I3zz*l2*m3^2*p_module*tau2*cos(p_angle)*sin(x2) - 128*I3zz*l2*m3^2*p_module*tau3*cos(p_angle)*sin(x2) - 32*I2zz*db*g0*l3^2*m1*m2*m3 - 96*I3zz*db*g0*l2^2*m1*m2*m3 - 16*CoM3y*I3zz*g0*l2^2*m1*m2^2*cos(2*x2) - 64*CoM3y*I3zz*g0*l2^2*m1*m3^2*cos(2*x2) + 8*db*l2*l3^2*m1*m3^2*tau2*sin(x2) - 8*db*l2*l3^2*m1*m3^2*tau3*sin(x2) + 12*db*l2*l3^2*m2*m3^2*tau2*sin(x2) + 8*db*l2*l3^2*m2^2*m3*tau2*sin(x2) - 12*db*l2*l3^2*m2*m3^2*tau3*sin(x2) - 8*db*l2*l3^2*m2^2*m3*tau3*sin(x2) + 8*db*g0*l2^2*l3^2*m1^2*m3^2*cos(2*x3) + 2*db*g0*l2^2*l3^2*m2^2*m3^2*cos(2*x3) + 8*I2zz*db*l3^2*m3^2*tau1*cos(2*x2)*sin(2*x3) + 8*I2zz*db*l3^2*m3^2*tau1*cos(2*x3)*sin(2*x2) + 16*CoM3x*I3zz*g0*l2^2*m1*m2^2*sin(2*x2) + 64*CoM3x*I3zz*g0*l2^2*m1*m3^2*sin(2*x2) + db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(x2) + 32*I3zz*db*l2*m1*m2*tau2*sin(x2) - 32*I3zz*db*l2*m1*m2*tau3*sin(x2) + 64*I3zz*db*l2*m1*m3*tau2*sin(x2) - 64*I3zz*db*l2*m1*m3*tau3*sin(x2) + 96*I3zz*db*l2*m2*m3*tau2*sin(x2) - 96*I3zz*db*l2*m2*m3*tau3*sin(x2) - 16*CoM3x*I3zz*l2^3*m1*m2^2*x5^2*sin(x2) - 128*CoM3x*I3zz*l2^3*m1*m3^2*x5^2*sin(x2) + 8*I3zz*db*l2^3*m1*m2^2*x5^2*cos(x2) + 64*I3zz*db*l2^3*m1*m3^2*x5^2*cos(x2) + 16*I3zz*db*l2^3*m2*m3^2*x5^2*cos(x2) + 8*I3zz*db*l2^3*m2^2*m3*x5^2*cos(x2) + 8*CoM3x*l2^2*l3^2*m1*m2*m3*tau1 + 16*l2^2*l3^2*m1*m3^2*p_module*tau1*sin(p_angle) + 12*l2^2*l3^2*m2*m3^2*p_module*tau1*sin(p_angle) + 4*l2^2*l3^2*m2^2*m3*p_module*tau1*sin(p_angle) + db*l2^3*l3^2*m2^2*m3^2*x5^2*sin(2*x3)*sin(x2) + 8*l2^2*l3^2*m1*m2*m3*p_module*tau1*sin(p_angle) + 32*I2zz*I3zz*db*l3*m3^2*x5^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m3^2*x6^2*cos(x2)*cos(x3) - 16*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(x2) + 64*I2zz*I3zz*l2*m2^2*p_module*x5^2*cos(p_angle)*cos(x2) + 128*I2zz*I3zz*l2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 8*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(x2) + 12*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(x2) + 8*I2zz*db*l2*l3^2*m2^2*m3*x5^2*cos(x2) - 16*l2^2*l3^2*m1*m3^2*p_module*tau1*cos(2*x3)*sin(p_angle) - 8*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x2)*sin(p_angle) + 8*l2^2*l3^2*m2*m3^2*p_module*tau1*sin(2*x2)*cos(p_angle) - 4*l2^2*l3^2*m2^2*m3*p_module*tau1*cos(2*x2)*sin(p_angle) + 4*l2^2*l3^2*m2^2*m3*p_module*tau1*sin(2*x2)*cos(p_angle) - 8*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x3)*sin(p_angle) - 32*I2zz*I3zz*db*l3*m3^2*x5^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m3^2*x6^2*sin(x2)*sin(x3) - 64*CoM3x*I2zz*I3zz*l2*m1*m2*x5^2*sin(x2) - 128*CoM3x*I2zz*I3zz*l2*m1*m3*x5^2*sin(x2) - 24*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(p_angle) - 8*g0*l2^2*l3^2*m1*m2^2*m3*p_module*cos(p_angle) - 8*g0*l2^2*l3^2*m1^2*m2*m3*p_module*cos(p_angle) + 32*I2zz*I3zz*db*l2*m1*m2*x5^2*cos(x2) + 64*I2zz*I3zz*db*l2*m1*m3*x5^2*cos(x2) + 96*I2zz*I3zz*db*l2*m2*m3*x5^2*cos(x2) - 64*I3zz*l2^2*m2*m3*p_module*tau1*cos(2*x2)*sin(p_angle) + 64*I3zz*l2^2*m2*m3*p_module*tau1*sin(2*x2)*cos(p_angle) + 64*CoM3x*I2zz*l3*m1*m3*tau3*cos(x2)*cos(x3) - 64*CoM3x*l2^2*l3*m1*m3^2*tau3*sin(x2)*sin(x3) + 64*I2zz*l3*m3^2*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) + 64*I2zz*l3*m3^2*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 64*I2zz*g0*l3^2*m1*m2*m3*p_module*cos(p_angle) - 192*I3zz*g0*l2^2*m1*m2*m3*p_module*cos(p_angle) + 32*db*l2^2*l3*m1*m3^2*tau3*cos(x2)*sin(x3) + 8*db*l2^2*l3*m2*m3^2*tau3*cos(x2)*sin(x3) - 8*db*l2^2*l3*m2*m3^2*tau3*cos(x3)*sin(x2) - 8*db*l2^2*l3*m2^2*m3*tau3*cos(x3)*sin(x2) + 16*CoM3x*l2*l3^2*m1*m2*m3*tau2*cos(x2) - 16*CoM3x*l2*l3^2*m1*m2*m3*tau3*cos(x2) + 16*l2*l3^2*m1*m3^2*p_module*tau2*cos(p_angle)*sin(x2) - 16*l2*l3^2*m1*m3^2*p_module*tau3*cos(p_angle)*sin(x2) + 24*l2*l3^2*m2*m3^2*p_module*tau2*cos(p_angle)*sin(x2) + 16*l2*l3^2*m2^2*m3*p_module*tau2*cos(p_angle)*sin(x2) - 24*l2*l3^2*m2*m3^2*p_module*tau3*cos(p_angle)*sin(x2) - 16*l2*l3^2*m2^2*m3*p_module*tau3*cos(p_angle)*sin(x2) + 16*g0*l2^2*l3^2*m1^2*m3^2*p_module*cos(2*x3)*cos(p_angle) + 4*g0*l2^2*l3^2*m2^2*m3^2*p_module*cos(2*x3)*cos(p_angle) - 64*CoM3x*I2zz*l3*m1*m3*tau3*sin(x2)*sin(x3) - 16*I2zz*l3^2*m3^2*p_module*tau1*cos(2*x2)*cos(2*x3)*sin(p_angle) + 16*I2zz*l3^2*m3^2*p_module*tau1*cos(2*x2)*sin(2*x3)*cos(p_angle) + 16*I2zz*l3^2*m3^2*p_module*tau1*cos(2*x3)*sin(2*x2)*cos(p_angle) - 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2) - 4*CoM3y*g0*l2^2*l3^2*m1*m2^2*m3*cos(2*x2) - 8*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) + 2*l2^3*l3^2*m2^2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 32*I2zz*db*l3*m1*m3*tau3*cos(x2)*sin(x3) + 32*I2zz*db*l3*m1*m3*tau3*cos(x3)*sin(x2) + 32*I2zz*db*l3*m2*m3*tau3*cos(x2)*sin(x3) + 32*I2zz*db*l3*m2*m3*tau3*cos(x3)*sin(x2) - 2*db*l2^2*l3^2*m2*m3^2*tau1*cos(2*x2)*sin(2*x3) - 2*db*l2^2*l3^2*m2*m3^2*tau1*cos(2*x3)*sin(2*x2) - 16*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*cos(x2)*sin(x3) - 16*CoM3x*I2zz*l3^3*m1*m3^2*x5^2*cos(x3)*sin(x2) - 16*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*cos(x2)*sin(x3) - 16*CoM3x*I2zz*l3^3*m1*m3^2*x6^2*cos(x3)*sin(x2) + 8*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2) + 4*CoM3x*g0*l2^2*l3^2*m1*m2^2*m3*sin(2*x2) + 64*I3zz*l2*m1*m2*p_module*tau2*cos(p_angle)*sin(x2) - 64*I3zz*l2*m1*m2*p_module*tau3*cos(p_angle)*sin(x2) + 128*I3zz*l2*m1*m3*p_module*tau2*cos(p_angle)*sin(x2) - 128*I3zz*l2*m1*m3*p_module*tau3*cos(p_angle)*sin(x2) + 192*I3zz*l2*m2*m3*p_module*tau2*cos(p_angle)*sin(x2) - 192*I3zz*l2*m2*m3*p_module*tau3*cos(p_angle)*sin(x2) - 16*CoM3x*l2*l3^2*m1*m3^2*tau2*cos(2*x3)*cos(x2) + 16*CoM3x*l2*l3^2*m1*m3^2*tau3*cos(2*x3)*cos(x2) + 16*I2zz*l3^2*m3^2*p_module*tau1*sin(2*x2)*sin(2*x3)*sin(p_angle) + 8*I2zz*db*l3^3*m1*m3^2*x5^2*cos(x2)*cos(x3) + 8*I2zz*db*l3^3*m1*m3^2*x6^2*cos(x2)*cos(x3) + 8*I2zz*db*l3^3*m2*m3^2*x5^2*cos(x2)*cos(x3) + 8*I2zz*db*l3^3*m2*m3^2*x6^2*cos(x2)*cos(x3) - 64*CoM3y*I3zz*g0*l2^2*m1*m2*m3*cos(2*x2) + 2*db*l2^2*l3^3*m2^2*m3^2*x5^2*sin(x2)*sin(x3) + 2*db*l2^2*l3^3*m2^2*m3^2*x6^2*sin(x2)*sin(x3) + 8*db*l2*l3^2*m1*m2*m3*tau2*sin(x2) - 8*db*l2*l3^2*m1*m2*m3*tau3*sin(x2) + 8*db*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3) - 12*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(x2) - 4*CoM3x*l2^3*l3^2*m1*m2^2*m3*x5^2*sin(x2) + 16*I3zz*l2^3*m1*m2^2*p_module*x5^2*cos(p_angle)*cos(x2) + 128*I3zz*l2^3*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 32*I3zz*l2^3*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 16*I3zz*l2^3*m2^2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 64*CoM3x*I3zz*g0*l2^2*m1*m2*m3*sin(2*x2) + 6*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(x2) + 2*db*l2^3*l3^2*m1*m2^2*m3*x5^2*cos(x2) + 16*CoM3x*l2*l3^2*m1*m3^2*tau2*sin(2*x3)*sin(x2) - 16*CoM3x*l2*l3^2*m1*m3^2*tau3*sin(2*x3)*sin(x2) - 8*I2zz*db*l3^3*m1*m3^2*x5^2*sin(x2)*sin(x3) - 8*I2zz*db*l3^3*m1*m3^2*x6^2*sin(x2)*sin(x3) - 8*I2zz*db*l3^3*m2*m3^2*x5^2*sin(x2)*sin(x3) - 8*I2zz*db*l3^3*m2*m3^2*x6^2*sin(x2)*sin(x3) - 96*CoM3x*I3zz*l2^3*m1*m2*m3*x5^2*sin(x2) - 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*cos(2*x2)*cos(2*x3) - 8*db*l2*l3^2*m1*m3^2*tau2*cos(2*x3)*sin(x2) - 8*db*l2*l3^2*m1*m3^2*tau2*sin(2*x3)*cos(x2) + 8*db*l2*l3^2*m1*m3^2*tau3*cos(2*x3)*sin(x2) + 8*db*l2*l3^2*m1*m3^2*tau3*sin(2*x3)*cos(x2) - 4*db*l2*l3^2*m2*m3^2*tau2*cos(2*x3)*sin(x2) - 4*db*l2*l3^2*m2*m3^2*tau2*sin(2*x3)*cos(x2) + 4*db*l2*l3^2*m2*m3^2*tau3*cos(2*x3)*sin(x2) + 4*db*l2*l3^2*m2*m3^2*tau3*sin(2*x3)*cos(x2) + 48*I3zz*db*l2^3*m1*m2*m3*x5^2*cos(x2) + 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*x2)*sin(2*x3) + 16*CoM3x*I2zz*g0*l3^2*m1*m3^2*cos(2*x3)*sin(2*x2) - db*l2^3*l3^2*m2^2*m3^2*x5^2*cos(2*x3)*cos(x2) + 16*CoM3y*I2zz*g0*l3^2*m1*m3^2*sin(2*x2)*sin(2*x3) + 32*I3zz*db*l2^2*l3*m1*m3^2*x5^2*cos(x2)*cos(x3) + 32*I3zz*db*l2^2*l3*m1*m3^2*x6^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x6^2*cos(x2)*cos(x3) + 2*db*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(2*x3)*sin(x2) + 16*I2zz*l2*l3^2*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 24*I2zz*l2*l3^2*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 16*I2zz*l2*l3^2*m2^2*m3*p_module*x5^2*cos(p_angle)*cos(x2) - 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*cos(x2)*sin(x3) - 64*CoM3x*I2zz*I3zz*l3*m1*m3*x5^2*cos(x3)*sin(x2) - 64*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*cos(x2)*sin(x3) - 64*CoM3x*I2zz*I3zz*l3*m1*m3*x6^2*cos(x3)*sin(x2) - 64*I2zz*I3zz*l3*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 64*I2zz*I3zz*l3*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 32*I2zz*I3zz*db*l3*m1*m3*x5^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m1*m3*x6^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m2*m3*x5^2*cos(x2)*cos(x3) + 32*I2zz*I3zz*db*l3*m2*m3*x6^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x5^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m2^2*m3*x5^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m2*m3^2*x6^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m2^2*m3*x6^2*sin(x2)*sin(x3) - 16*CoM3x*I2zz*l2*l3^2*m1*m2*m3*x5^2*sin(x2) + 64*I2zz*I3zz*l2*m1*m2*p_module*x5^2*cos(p_angle)*cos(x2) + 128*I2zz*I3zz*l2*m1*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 192*I2zz*I3zz*l2*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 64*I2zz*I3zz*db*l3*m3^2*x5*x6*cos(x2)*cos(x3) + 8*I2zz*db*l2*l3^2*m1*m2*m3*x5^2*cos(x2) - 32*I2zz*I3zz*db*l3*m1*m3*x5^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m1*m3*x6^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m2*m3*x5^2*sin(x2)*sin(x3) - 32*I2zz*I3zz*db*l3*m2*m3*x6^2*sin(x2)*sin(x3) - 16*CoM3x*l2^2*l3*m1*m2*m3*tau3*cos(x2)*cos(x3) + 64*l2^2*l3*m1*m3^2*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) + 16*l2^2*l3*m2*m3^2*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) - 16*l2^2*l3*m2*m3^2*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 16*l2^2*l3*m2^2*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 64*I2zz*I3zz*db*l3*m3^2*x5*x6*sin(x2)*sin(x3) - 16*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*cos(2*x3)*sin(x2) - 16*CoM3x*I2zz*l2*l3^2*m1*m3^2*x5^2*sin(2*x3)*cos(x2) + 8*I2zz*db*l2*l3^2*m1*m3^2*x5^2*cos(2*x3)*cos(x2) + 4*I2zz*db*l2*l3^2*m2*m3^2*x5^2*cos(2*x3)*cos(x2) - 16*CoM3x*l2^2*l3*m1*m2*m3*tau3*sin(x2)*sin(x3) + 64*I2zz*l3*m1*m3*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) + 64*I2zz*l3*m1*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) + 64*I2zz*l3*m2*m3*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) + 64*I2zz*l3*m2*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) + 4*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x2)*cos(2*x3)*sin(p_angle) - 4*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x2)*sin(2*x3)*cos(p_angle) - 4*l2^2*l3^2*m2*m3^2*p_module*tau1*cos(2*x3)*sin(2*x2)*cos(p_angle) + 8*db*l2^2*l3*m1*m2*m3*tau3*cos(x2)*sin(x3) - 8*db*l2^2*l3*m1*m2*m3*tau3*cos(x3)*sin(x2) + 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2)*sin(x3) - 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x3)*sin(x2) + 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2)*sin(x3) - 4*CoM3x*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x3)*sin(x2) + 16*I2zz*l3^3*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I2zz*l3^3*m1*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I2zz*l3^3*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I2zz*l3^3*m2*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 4*l2^2*l3^3*m2^2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 4*l2^2*l3^3*m2^2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 16*l2*l3^2*m1*m2*m3*p_module*tau2*cos(p_angle)*sin(x2) - 16*l2*l3^2*m1*m2*m3*p_module*tau3*cos(p_angle)*sin(x2) + 16*g0*l2^2*l3^2*m1*m2*m3^2*p_module*cos(2*x3)*cos(p_angle) - 8*I2zz*db*l2*l3^2*m1*m3^2*x5^2*sin(2*x3)*sin(x2) - 4*I2zz*db*l2*l3^2*m2*m3^2*x5^2*sin(2*x3)*sin(x2) - 4*l2^2*l3^2*m2*m3^2*p_module*tau1*sin(2*x2)*sin(2*x3)*sin(p_angle) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5^2*cos(x2)*cos(x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x6^2*cos(x2)*cos(x3) + 12*l2^3*l3^2*m1*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2) + 4*l2^3*l3^2*m1*m2^2*m3*p_module*x5^2*cos(p_angle)*cos(x2) - 16*I2zz*l3^3*m1*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I2zz*l3^3*m1*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I2zz*l3^3*m2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 16*I2zz*l3^3*m2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 32*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*cos(x2)*sin(x3) - 32*CoM3x*I2zz*l3^3*m1*m3^2*x5*x6*cos(x3)*sin(x2) - 16*l2*l3^2*m1*m3^2*p_module*tau2*cos(2*x3)*cos(p_angle)*sin(x2) - 16*l2*l3^2*m1*m3^2*p_module*tau2*sin(2*x3)*cos(p_angle)*cos(x2) + 16*l2*l3^2*m1*m3^2*p_module*tau3*cos(2*x3)*cos(p_angle)*sin(x2) + 16*l2*l3^2*m1*m3^2*p_module*tau3*sin(2*x3)*cos(p_angle)*cos(x2) - 8*l2*l3^2*m2*m3^2*p_module*tau2*cos(2*x3)*cos(p_angle)*sin(x2) - 8*l2*l3^2*m2*m3^2*p_module*tau2*sin(2*x3)*cos(p_angle)*cos(x2) + 8*l2*l3^2*m2*m3^2*p_module*tau3*cos(2*x3)*cos(p_angle)*sin(x2) + 8*l2*l3^2*m2*m3^2*p_module*tau3*sin(2*x3)*cos(p_angle)*cos(x2) + 2*db*l2^2*l3^3*m1*m2*m3^2*x5^2*sin(x2)*sin(x3) + 2*db*l2^2*l3^3*m1*m2*m3^2*x6^2*sin(x2)*sin(x3) + 96*I3zz*l2^3*m1*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 16*I2zz*db*l3^3*m1*m3^2*x5*x6*cos(x2)*cos(x3) + 16*I2zz*db*l3^3*m2*m3^2*x5*x6*cos(x2)*cos(x3) + 4*db*l2^2*l3^3*m2^2*m3^2*x5*x6*sin(x2)*sin(x3) + 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2)*cos(2*x3) - 2*l2^3*l3^2*m2^2*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x2)*sin(2*x3) - 4*CoM3x*g0*l2^2*l3^2*m1*m2*m3^2*cos(2*x3)*sin(2*x2) - 16*I2zz*db*l3^3*m1*m3^2*x5*x6*sin(x2)*sin(x3) - 16*I2zz*db*l3^3*m2*m3^2*x5*x6*sin(x2)*sin(x3) - 4*CoM3y*g0*l2^2*l3^2*m1*m2*m3^2*sin(2*x2)*sin(2*x3) + 4*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(2*x3)*sin(x2) + 4*CoM3x*l2^3*l3^2*m1*m2*m3^2*x5^2*sin(2*x3)*cos(x2) + 2*l2^3*l3^2*m2^2*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) - 2*db*l2^3*l3^2*m1*m2*m3^2*x5^2*cos(2*x3)*cos(x2) - 64*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5^2*cos(x3)*sin(x2) - 64*CoM3x*I3zz*l2^2*l3*m1*m3^2*x6^2*cos(x3)*sin(x2) + 64*I2zz*I3zz*l3*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 64*I2zz*I3zz*l3*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*cos(x2)*sin(x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5^2*cos(x3)*sin(x2) + 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*cos(x2)*sin(x3) - 16*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x6^2*cos(x3)*sin(x2) + 64*I2zz*I3zz*l3*m1*m3*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 64*I2zz*I3zz*l3*m1*m3*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 64*I2zz*I3zz*l3*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 64*I2zz*I3zz*l3*m2*m3*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I3zz*l2^2*l3*m2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*l2^2*l3*m2^2*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*l2^2*l3*m2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*l2^2*l3*m2^2*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 128*CoM3x*I3zz*l2^2*l3*m1*m3^2*x5*x6*cos(x3)*sin(x2) + 128*I2zz*I3zz*l3*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*cos(x2)*cos(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*cos(x2)*cos(x3) + 16*I2zz*l2*l3^2*m1*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2) + 64*I3zz*db*l2^2*l3*m1*m3^2*x5*x6*cos(x2)*cos(x3) + 16*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*cos(x2)*cos(x3) - 64*I2zz*I3zz*l3*m1*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 64*I2zz*I3zz*l3*m1*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 64*I2zz*I3zz*l3*m2*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) - 64*I2zz*I3zz*l3*m2*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) - 128*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*cos(x2)*sin(x3) - 128*CoM3x*I2zz*I3zz*l3*m1*m3*x5*x6*cos(x3)*sin(x2) - 128*I2zz*I3zz*l3*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x5^2*sin(x2)*sin(x3) + 8*I3zz*db*l2^2*l3*m1*m2*m3*x6^2*sin(x2)*sin(x3) + 64*I2zz*I3zz*db*l3*m1*m3*x5*x6*cos(x2)*cos(x3) + 64*I2zz*I3zz*db*l3*m2*m3*x5*x6*cos(x2)*cos(x3) + 16*I3zz*db*l2^2*l3*m2*m3^2*x5*x6*sin(x2)*sin(x3) + 16*I3zz*db*l2^2*l3*m2^2*m3*x5*x6*sin(x2)*sin(x3) + 16*I2zz*l2*l3^2*m1*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) + 8*I2zz*l2*l3^2*m2*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) + 16*l2^2*l3*m1*m2*m3*p_module*tau3*cos(p_angle)*cos(x2)*sin(x3) - 16*l2^2*l3*m1*m2*m3*p_module*tau3*cos(p_angle)*cos(x3)*sin(x2) - 64*I2zz*I3zz*db*l3*m1*m3*x5*x6*sin(x2)*sin(x3) - 64*I2zz*I3zz*db*l3*m2*m3*x5*x6*sin(x2)*sin(x3) - 16*I2zz*l2*l3^2*m1*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) - 8*I2zz*l2*l3^2*m2*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) + 4*l2^2*l3^3*m1*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 4*l2^2*l3^3*m1*m2*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 4*l2^2*l3^3*m1*m2*m3^2*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 4*l2^2*l3^3*m1*m2*m3^2*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 8*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2)*sin(x3) - 8*CoM3x*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x3)*sin(x2) + 32*I2zz*l3^3*m1*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 32*I2zz*l3^3*m2*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 8*l2^2*l3^3*m2^2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 4*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*cos(x2)*cos(x3) - 32*I2zz*l3^3*m1*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) - 32*I2zz*l3^3*m2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 4*db*l2^2*l3^3*m1*m2*m3^2*x5*x6*sin(x2)*sin(x3) - 4*l2^3*l3^2*m1*m2*m3^2*p_module*x5^2*cos(2*x3)*cos(p_angle)*cos(x2) + 64*I3zz*l2^2*l3*m1*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 64*I3zz*l2^2*l3*m1*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I3zz*l2^2*l3*m2*m3^2*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I3zz*l2^2*l3*m2*m3^2*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 4*l2^3*l3^2*m1*m2*m3^2*p_module*x5^2*sin(2*x3)*cos(p_angle)*sin(x2) + 128*I3zz*l2^2*l3*m1*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 32*I3zz*l2^2*l3*m2*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x5^2*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x6^2*cos(p_angle)*sin(x2)*sin(x3) + 32*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*cos(x2)*sin(x3) - 32*CoM3x*I3zz*l2^2*l3*m1*m2*m3*x5*x6*cos(x3)*sin(x2) + 128*I2zz*I3zz*l3*m1*m3*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 128*I2zz*I3zz*l3*m2*m3*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 32*I3zz*l2^2*l3*m2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 32*I3zz*l2^2*l3*m2^2*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*cos(x2)*cos(x3) - 128*I2zz*I3zz*l3*m1*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) - 128*I2zz*I3zz*l3*m2*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*db*l2^2*l3*m1*m2*m3*x5*x6*sin(x2)*sin(x3) + 8*l2^2*l3^3*m1*m2*m3^2*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 8*l2^2*l3^3*m1*m2*m3^2*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3) + 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x5^2*cos(p_angle)*cos(x2)*cos(x3) + 16*I3zz*l2^2*l3*m1*m2*m3*p_module*x6^2*cos(p_angle)*cos(x2)*cos(x3) + 32*I3zz*l2^2*l3*m1*m2*m3*p_module*x5*x6*cos(p_angle)*cos(x2)*cos(x3) + 32*I3zz*l2^2*l3*m1*m2*m3*p_module*x5*x6*cos(p_angle)*sin(x2)*sin(x3))/(4*(4*I3zz*l2^2*m2^2 + 4*I2zz*l3^2*m3^2 + 16*I3zz*l2^2*m3^2 + 32*I2zz*I3zz*m1 + 32*I2zz*I3zz*m2 + 32*I2zz*I3zz*m3 + 4*l2^2*l3^2*m1*m3^2 + 3*l2^2*l3^2*m2*m3^2 + l2^2*l3^2*m2^2*m3 + 8*I3zz*l2^2*m1*m2 + 8*I2zz*l3^2*m1*m3 + 32*I3zz*l2^2*m1*m3 + 8*I2zz*l3^2*m2*m3 + 24*I3zz*l2^2*m2*m3 - 4*I3zz*l2^2*m2^2*cos(2*x2) - 16*I3zz*l2^2*m3^2*cos(2*x2) - 4*I2zz*l3^2*m3^2*cos(2*x2 + 2*x3) + 2*l2^2*l3^2*m1*m2*m3 - 4*l2^2*l3^2*m1*m3^2*cos(2*x3) - 2*l2^2*l3^2*m2*m3^2*cos(2*x2) - l2^2*l3^2*m2^2*m3*cos(2*x2) - 2*l2^2*l3^2*m2*m3^2*cos(2*x3) - 16*I3zz*l2^2*m2*m3*cos(2*x2) + l2^2*l3^2*m2*m3^2*cos(2*x2 + 2*x3))) >= 0);
end


mpc = acado.OCPexport( ocp );

% set several option for the algorithm
mpc.set( 'HESSIAN_APPROXIMATION',       'GAUSS_NEWTON'      );
mpc.set( 'DISCRETIZATION_TYPE',         'MULTIPLE_SHOOTING' );
% mpc.set( 'SPARSE_QP_SOLUTION',          'FULL_CONDENSING_N2');
mpc.set( 'INTEGRATOR_TYPE',             'INT_IRK_GL4'       );
mpc.set( 'NUM_INTEGRATOR_STEPS',        2*N                 );
mpc.set( 'QP_SOLVER',                   'QP_QPOASES'    	);
% mpc.set( 'HOTSTART_QP',                 'NO'             	);
% mpc.set( 'LEVENBERG_MARQUARDT', 		 1e-10				);
% mpc.set( 'GENERATE_SIMULINK_INTERFACE', 'YES'               );

if EXPORT
    mpc.exportCode( 'export_MPC');
%     system("make -j4");
%     copyfile('../../../../../../external_packages/qpoases', 'export_MPC/qpoases', 'f')
    % !!!!!!!!!  ASSUMING ACADOtoolkit BASE FOLDER LOCATED IN THE HOME
    % DIRECTORY  !!!!!!!!
    % if it is not the case for out change the source path of the
    % ACADOtoolkit base directory !!!
    copyfile('~/ACADOtoolkit/external_packages/qpoases', 'export_MPC/qpoases', 'f')
    
    cd export_MPC
    make_acado_solver('../acado_MPCstep')
    cd ..
end

END_ACADO; % End with "END ACADO" to compile.

%% PREPARE SIMULATION

Tf = 10; %s
% generate reference in the task space
t = linspace(0,Tf,Tf/Ts);

% specify parameters
x_start = -1;
x_end = 1;

tf = 1; %s
% tf = 6; %s
L = 2; %m
v_max = 3;  %m/s
% v_max = 0.4; %m/s
a_max = (v_max^2)/(tf*v_max-L);
T_switch = (tf*v_max-L)/v_max;

% trapezoidal path
[h_x, dh_x, ddh_x] = trapveltraj([x_start x_end],tf/Ts,'PeakVelocity',v_max);
h_x = [h_x repmat(h_x(end),1,length(t)-length(h_x))];
dh_x = [dh_x repmat(dh_x(end),1,length(t)-length(dh_x))];

h_y = repmat(1.6606,1,length(t));
dh_y = repmat(0,1,length(t));

h_ref = [h_x.' h_y.'];
dh_ref = [dh_x.' dh_y.'];

obs_radius = 0.15;

% % % generate obstacles
% obs = repmat([0 1.6606 obs_radius 0 0],length(t)+1,1);

% generate obstacle trajectory (comment if you want the obs not to move)
syms ti;
v_obs = 0.5;
tf_obs = 2/v_obs;
obs_x = 1 - v_obs*ti;
obs_y = 1.6606;
dobs_x = -0.4;
dobs_y = 0;
t_obs = linspace(0,tf_obs,tf_obs/Ts);
obs = [double(subs(obs_x,t_obs)).' repmat([obs_y obs_radius dobs_x dobs_y],length(t_obs),1)];
obs_final = obs(end,:);
obs_final(end,4) = 0.0;
obs = [obs;repmat(obs_final,length(t)-length(t_obs)+1,1)];

% clearance function to be plotted
clearance = norm([X1 - rt1 + rt4 - (l3/2)*sin(X2 + X3) - l2*sin(X2); hb + ht + rw + (l3/2)*cos(X2 + X3) + l2*cos(X2)] - [XOBS;YOBS]) - obs_radius - (l3/2) - ds;

%% PARAMETERS SIMULATION

% inital state
X0 = [-1.764 -pi/6 -pi/6 0 0 0];

% initial state
% X0 = [-0.422 pi/6 pi/6 0 0 0];


% Xref = [1.5 pi/3 -pi/2 0 0 0];
% input.x = repmat(Xref,N+1,1);
input.x = repmat(X0,N+1,1);

% % Online data
% input.od = repmat([obs X0],N+1,1);
% % input.od = repmat(obs,N+1,1);

% Input torques reference
Uref = repmat(compute_gravity_term(X0(1:3)),N,1);
input.u = Uref;

% Output reference
Yref = [h_ref(1:N,:) dh_ref(1:N,:) zeros(N,3+3+2)];
% Yref = [h_ref(1:N,:) dh_ref(1:N,:) zeros(N,3+3)];
input.y = Yref;
input.yN = Yref(N,1:end-5);

% weight matrices
% input.W = diag([50 50 1 0 0.01 0.01 0.01 0.0001 0.001 0.01]);
input.W = diag([50 50 10 10 0.05 1 1 1e-05 0.001 0.01 1e-05 1e-05]);  % weights on [x y dx dy x4 x5 x6 tau1 tau2 tau3 b1 b2];
input.WN = diag([50 50 10 10 10 1 1]);   % weights on [x y dx dy x4 x5 x6];

%% SIMULATION LOOP
display('------------------------------------------------------------------')
display('               Simulation Loop'                                    )
display('------------------------------------------------------------------')

iter = 0; time = 0;
KKT_MPC = []; INFO_MPC = []; INFO_CPU_TIME = [];
controls_MPC = [];
state_sim = X0;
input_sim = [];
is_feasable = [];
ZMP_VALUES = [zmp_f(X0(1),X0(2),X0(3),X0(4),X0(5),X0(6),0,0,0)];
MM1 = [];
MM2 = [];
CLEARANCE = [double(subs(clearance,[X;XOBS;YOBS],[X0.';obs(1,1:2).']))];
TASK_ERROR = [];

if RECORD_SIMULATION
    % create the video writer
    writerObj = VideoWriter(video_names(CONSTRAINT_TYPE)+'.avi');
    % set the seconds per image
    writerObj.FrameRate = 1/Ts;
    % open the writer
    open(writerObj);
end

myFig = figure(10); hold on;

visualize;
while time(end) < Tf
    tic
    % Solve NMPC OCP
    input.x0 = state_sim(end,:);

%     input.od = repmat([obs state_sim(end,:)],N+1,1); % pass X0 as an online data element
    input.od = [get_ref(obs,iter,N+1) repmat(state_sim(end,:),N+1,1)];

    Yref = [get_ref(h_ref,iter,N) get_ref(dh_ref,iter,N) zeros(N,3+3+2)];
%     Yref = [get_ref(h_ref,iter,N) get_ref(dh_ref,iter,N) zeros(N,3+3)];
%     Uref = repmat(compute_gravity_term(state_sim(1:3)),N,1);
%     input.u = Uref;
    input.y = Yref;  % reference for the output
    input.yN = Yref(N,1:end-5);  % reference for the final output state
%     input.yN = Yref(N,1:end-3);
    output = acado_MPCstep(input);
    
    % Save the MPC step
    INFO_MPC = [INFO_MPC; output.info];
    KKT_MPC = [KKT_MPC; output.info.kktValue];
    INFO_CPU_TIME = [INFO_CPU_TIME;output.info.cpuTime];
    is_feasable = [is_feasable output.info.status];
    controls_MPC = [controls_MPC; output.u(1,:)];
    input.x = [output.x(2:end,:);output.x(end,:)];
    input.u = [output.u(2:end,:);output.u(end,:)];

    % Compute zmp and moments on the support polygon edges
%     ZMP_VALUES = [ZMP_VALUES;double(subs(zmp,[X;Tau],[state_sim(end,:).';output.u(1,:).']))];
    ZMP_VALUES = [ZMP_VALUES;zmp_f(state_sim(end,1),state_sim(end,2),state_sim(end,3),state_sim(end,4),state_sim(end,5),state_sim(end,6),output.u(1,1),output.u(1,2),output.u(1,3))];
    MM1 = [MM1;Mm1_f(state_sim(end,1),state_sim(end,2),state_sim(end,3),state_sim(end,4),state_sim(end,5),state_sim(end,6),output.u(1,1),output.u(1,2),output.u(1,3))];
    MM2 = [MM2;Mm2_f(state_sim(end,1),state_sim(end,2),state_sim(end,3),state_sim(end,4),state_sim(end,5),state_sim(end,6),output.u(1,1),output.u(1,2),output.u(1,3))];
    TASK_ERROR = [TASK_ERROR;task_error_f(state_sim(end,1),state_sim(end,2),state_sim(end,3),h_ref(iter+1,1),h_ref(iter+1,2))];

    % Simulate system
    sim_input.x = state_sim(end,:).';
    sim_input.u = output.u(1,:).';
    states = integrate_tiago(sim_input);
    state_sim = [state_sim; states.value'];
    input_sim = [input_sim; output.u(1,:)];

    % compute clearance
    CLEARANCE = [CLEARANCE double(subs(clearance,[X;XOBS;YOBS],[state_sim(end,:).';obs(iter+1,1:2).']))];

    
    iter = iter+1;
    nextTime = iter*Ts;
    disp(['current time: ' num2str(nextTime) '   ' char(9) ' (RTI step: ' num2str(INFO_CPU_TIME(end)/Ts*10^2) '%)'])
    time = [time nextTime];
    
    visualize;
    pause(abs(Ts-toc));
end


if RECORD_SIMULATION
    close(writerObj);
    
    mkdir('./Simulations/'+video_names(CONSTRAINT_TYPE));
    movefile(video_names(CONSTRAINT_TYPE)+'.avi','./Simulations/'+video_names(CONSTRAINT_TYPE)+'/.');
else
    return;
end

%% plot the clearance

fig1 = figure(1);

plot(time(1:end),CLEARANCE,'linewidth',1.5,'color','k');
grid on; hold on;
xlabel('t [s]','FontSize',13);    ylabel('clearance [m]','FontSize',13);
hold off;

set(gcf, 'Position',[0 0 1920 961]);
saveas(fig1,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/clearance.png');
saveas(fig1,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/clearance.fig');
saveas(fig1,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/clearance','epsc');

%% plot the task error

fig2 = figure(2);

plot(time(1:end-1),TASK_ERROR,'linewidth',1.5,'color','k');
grid on; hold on;
xlabel('t [s]','FontSize',13);    ylabel('task-error [m]','FontSize',13);
hold off;

set(gcf, 'Position',[0 0 1920 961]);
saveas(fig2,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/task_error.png');
saveas(fig2,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/task_error.fig');
saveas(fig2,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/task_error','epsc');


%% plot the cpu-time plot at the end

fig3 = figure(3);

plot(time(1:end-1),INFO_CPU_TIME,'linewidth',1.5,'color','k');hold on
plot(time(1:end-1),repmat(Ts,length(time)-1),'LineWidth',2,'color','red');
grid on;
xlabel('t [s]','FontSize',13);    ylabel('CPU time [s]','FontSize',13);

set(gcf, 'Position',[0 0 1920 961]);
xlabel('t [s]','FontSize',13);    ylabel('clearance [m]','FontSize',13);
saveas(fig3,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/CPU_time.png');
saveas(fig3,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/CPU_time.fig');
saveas(fig3,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/CPU_time','epsc');


%% plot the zmp 

fig4 = figure(4);

plot(time(1:end-1),ZMP_VALUES(1:end-1),'linewidth',1.5,'color','green'); hold on
plot(time(1:end-1),repmat(db/2,length(time)-1),'LineWidth',2,'color','red'); % upper limit
plot(time(1:end-1),repmat(-db/2,length(time)-1),'LineWidth',2,'color','red'); % lower limit
grid on;
xlabel('t [s]','FontSize',13);    ylabel('ZMP position [m]','FontSize',13);

set(gcf, 'Position',[0 0 1920 961]);
saveas(fig4,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/zmp.png');
saveas(fig4,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/zmp.fig');
saveas(fig4,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/zmp','epsc');


%% Joint positions: [x1 x2 x3]

% plot(time,state_sim(:,1:3),"Linewidth",1.5); grid on; hold on; legend('q1','q2','q3', "Location","best"); hold on;
% plot(time(1:end),repmat(-3*pi/4,length(time(1:end)),1),'linewidth',1.5,'color','blue','linestyle','-');
% plot(time(1:end),repmat(3*pi/4,length(time(1:end)),1),'linewidth',1.5,'color','blue','linestyle','-');
% plot(time(1:end),repmat(-5*pi/6,length(time(1:end)),1),'linewidth',1.5,'color','red','linestyle','-');
% plot(time(1:end),repmat(5*pi/6,length(time(1:end)),1),'linewidth',1.5,'color','red','linestyle','-'); hold off;

save('./Simulations/'+video_names(CONSTRAINT_TYPE)+'/states.mat','state_sim');

%% Joint velocities:

% plot(time,state_sim(:,4:6),"Linewidth",1.5); grid on; hold on; legend('qd1','qd2','qd3', "Location","best");
% plot(time(1:end),repmat(-10,length(time(1:end)),1),'linewidth',1.5,'color','blue','linestyle','-');
% plot(time(1:end),repmat(10,length(time(1:end)),1),'linewidth',1.5,'color','blue','linestyle','-');
% plot(time(1:end),repmat(-5,length(time(1:end)),1),'linewidth',1.5,'color','red','linestyle','-');
% plot(time(1:end),repmat(5,length(time(1:end)),1),'linewidth',1.5,'color','red','linestyle','-'); hold off;

%% Control inputs [tau1 tau2 tau3]

fig5 = figure(5);

plot(time(1:end-1),[input_sim(:,1)*rw input_sim(:,2:3)],'linewidth',1.5); grid on; hold on; hold on;
plot(time(1:end),repmat(TAU1_MAX*rw,length(time(1:end)),1),'LineStyle','--','LineWidth',1.5,'color','blue');
plot(time(1:end),repmat(-TAU1_MAX*rw,length(time(1:end)),1),'LineStyle','--','LineWidth',1.5,'color','blue');
plot(time(1:end),repmat(TAU2_3_MAX,length(time(1:end)),1),'LineStyle','--','LineWidth',1.5,'color','red');
plot(time(1:end),repmat(TAU2_3_MAX,length(time(1:end)),1),'LineStyle','--','LineWidth',1.5,'color','red');
legend('\tau_w','\tau_{ARM1}','\tau_{ARM2}','\tau_{w max}','','\tau_{23 max}','',"Location","best"); hold off;


set(gcf, 'Position',[0 0 1920 961]);
saveas(fig5,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/control_inputs.png');
saveas(fig5,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/control_inputs.fig');
saveas(fig5,'./Simulations/'+video_names(CONSTRAINT_TYPE)+'/control_inputs','epsc');
save('./Simulations/'+video_names(CONSTRAINT_TYPE)+'/controls.mat','input_sim');

%% Balance constraint evolution

% plot(time(1:end-1),MM1.',"LineWidth",2.0,"Color","green"); grid on; hold on;
% plot(time(1:end-1),MM2.',"LineWidth",2.0,"Color","blue");

%%

% get_ref(obs,0,N+1)

%% function: get the reference points

function samples = get_ref(ref,num_iter,N)
    num_iter = num_iter + 1;  % to be consistent with the inidces
    num_residual_samples = length(ref)-(num_iter+N);
    if num_residual_samples >= 0
        samples = ref(num_iter:num_iter+N-1,:);
    else
        if num_iter > length(ref)
            num_iter = length(ref);
        end
        samples = [ref(num_iter:end,:);repmat(ref(end,:),-num_residual_samples-1,1)];
    end
    
end


%% function: compute the gravity term
function g = compute_gravity_term(q)
    g0 = 9.81;

    q1 = q(1); q2 = q(2); q3 = q(3);

    m2 = 2.08+1.79+2.28;
    l2 = 0.32;

    m3 = 1.89+1.07+0.2+0.6+0.2;
    l3 = 0.34+0.25;

    g(1) = 0;
    g(2) = - g0*m3*((l3*sin(q2 + q3))/2 + l2*sin(q2)) - (g0*l2*m2*sin(q2))/2;
    g(3) = -(g0*l3*m3*sin(q2 + q3))/2;

end
